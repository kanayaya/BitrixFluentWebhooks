package com.kanayaya.BitrixFluentWebhooks.api;

/**
 * Автосгенерированный список методов с документацией. Абсолютно необязательно, что все из них работают
 */
public enum Method {

    // Общие методы: https://dev.1c-bitrix.ru/rest_help/general/index.php

    /**
     * Показ списка методов.<br>
     */
    METHODS("methods"),
    /**
     * Показ разрешений.<br>
     */
    SCOPE("scope"),
    /**
     * Показ информации о приложении.<br>
     */
    APP_INFO("app.info"),
    /**
     * Выполнение пакета запросов.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code halt}</b> - Определяет прерывать ли последовательность запросов в случае ошибки.</li>
     * <li><b>{@code cmd}</b> - Массив запросов стандартного вида (следует помнить про квотирование данных запросов; получается, что данные для подзапросов должны пройти двойное квотирование).</li>
     * </ul>
     */
    BATCH("batch"),
    /**
     * Определяет, обладает ли текущий пользователь правами на управление настройками приложений.<br>
     */
    USER_ADMIN("user.admin"),
    /**
     * Определяет, обладает ли текущий пользователь хотя бы одним из заданного параметром ACCESS набора прав.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ACCESS}</b> - Обязательный. Идентификатор или список идентификаторов прав, доступ к которым нужно проверить.</li>
     * </ul>
     */
    USER_ACCESS("user.access"),
    /**
     * Получение названий прав доступа.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ACCESS}</b> - Обязательный. Список идентификаторов прав, названия для которых нужно получить.</li>
     * </ul>
     */
    ACCESS_NAME("access.name"),
    /**
     * Возвращает текущее время сервера в формате ATOM.<br>
     */
    SERVER_TIME("server.time"),
    /**
     * Позволяет получить базовую информации о текущем пользователе без каких-либо скоупов.<br>
     */
    PROFILE("profile"),

// Методы событий: https://dev.1c-bitrix.ru/rest_help/general/events_method/index.php

    /**
     * Показ общего списка событий.<br>
     */
    EVENTS("events"),
    /**
     * Получение списка зарегистрированных обработчиков событий.<br>
     */
    EVENT_GET("event.get"),
    /**
     * Получение списка зарегистрированных обработчиков событий.<br>
     */
    EVENTS_GET("events.get"),
    /**
     * Регистрация нового обработчика события.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code handler}</b> - Ссылка на обработчик события. Обязательный.</li>
     * <li><b>{@code auth_type}</b> - Идентификатор пользователя, под которым авторизуется обработчик события. Не обязательный. По умолчанию будет использоваться авторизация пользователя, действия которого привели к срабатыванию события.</li>
     * <li><b>{@code event_type}</b> - Значения: online|offline. По умолчанию event_type=online, и поведение метода не меняется. Если вызывается event_type=offline, то метод работает с офлайн событиями.</li>
     * <li><b>{@code options}</b> - Дополнительные настройки для регистрируемого события, при наличии.</li>
     * <li><b>{@code auth_connector}</b> - Ключ источника. Параметр предназначен для офлайн событий. Позволяет исключать ложные срабатывания событий.</li>
     * <li><b>{@code event}</b> - Имя события. Обязательный.</li>
     * </ul>
     */
    EVENT_BIND("event.bind"),
    /**
     * Отмена зарегистрированного обработчика события.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code handler}</b> - Ссылка на обработчик события. Обязательный.</li>
     * <li><b>{@code auth_type}</b> - Идентификатор пользователя, под которым авторизуется обработчик события. Не обязательный. Примечание: если требуется удалить обработчики события, установленные с пустым auth_type (с авторизацией от имени пользователя, вызвавшего событие), но оставить остальные обработчики, указывайте auth_type=0 или пустое значение параметра.</li>
     * <li><b>{@code event_type}</b> - Значения: online|offline. По умолчанию event_type=online, и поведение метода не меняется. Если показывается event_type=offline, то метод работает с офлайн событиями.</li>
     * <li><b>{@code event}</b> - Имя события. Обязательный.</li>
     * </ul>
     */
    EVENT_UNBIND("event.unbind"),
    /**
     * Метод возвращает приложению первые в очереди офлайновые события.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code order: array}</b> - Сортировка записей. Поддерживается сортировка по тем же полям, что и в фильтре, на вход принимается массив вида [поле=>ASC|DESC]. По умолчанию - [TIMESTAMP_X:ASC].</li>
     * <li><b>{@code filter: array}</b> - Фильтр записей. По умолчанию отдаются все записи, без фильтрации. Поддерживается фильтрация по полям: ID, TIMESTAMP_X, EVENT_NAME, MESSAGE_ID со стандартными операциями типа =, >, <, <= и так далее.</li>
     * <li><b>{@code limit: int}</b> - Количество выбираемых записей. По умолчанию 50.</li>
     * </ul>
     */
    EVENT_OFFLINE_GET("event.offline.get"),
    /**
     * Сохранение записи в базе с пометкой об ошибке при использовании офлайновых событий.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code message_id: array}</b> - Массив значений поля MESSAGE_ID записей, которые нужно пометить как ошибочные.</li>
     * <li><b>{@code process_id: }</b> - Идентификатор процесса, занимается обработкой записей. Обязательный параметр.</li>
     * </ul>
     */
    EVENT_OFFLINE_ERROR("event.offline.error"),
    /**
     * Очистка записей в очереди офлайн событий.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: array}</b> - Массив идентификаторов записей, которые нужно вычистить. Не обязателен, по умолчанию будут вычищены все записи, помеченные переданным process_id.</li>
     * <li><b>{@code message_id: array}</b> - Массив значений поля MESSAGE_ID записей, которые нужно вычистить. Игнорируется, если указан параметр id. Не обязателен, по умолчанию будут вычищены все записи, помеченные переданным process_id.</li>
     * <li><b>{@code process_id: }</b> - Идентификатор процесса, который занимается обработкой записей. Обязательный параметр.</li>
     * </ul>
     */
    EVENT_OFFLINE_CLEAR("event.offline.clear"),
    /**
     * Чтение текущей очереди без внесения изменений в ее состояние.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code order: array}</b> - Сортировка записей. Поддерживается сортировка по тем же полям, что и в фильтре. На вход принимается массив вида [поле=>ASC|DESC]. По умолчанию - [ID:ASC].</li>
     * <li><b>{@code filter: array}</b> - Фильтр записей. По умолчанию отдаются все записи, без фильтрации. Поддерживается фильтрация по полям: ID, TIMESTAMP_X, EVENT_NAME, MESSAGE_ID, PROCESS_ID, ERROR со стандартными операциями типа =, >, <, <= и т.д.</li>
     * <li><b>{@code start: string}</b> - Номер страницы вывода. Работает для https запросов.</li>
     * </ul>
     */
    EVENT_OFFLINE_LIST("event.offline.list"),

// Настройка приложений: https://dev.1c-bitrix.ru/rest_help/general/application/index.php

    /**
     * Метод привязывает данные к приложению.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code options}</b> - Массив, где ключ - название сохраняемого свойства, а значение - значение свойства. Если подать значение с новым ключом, то метод его запишет, если существующее, то обновит.</li>
     * </ul>
     */
    APP_OPTION_SET("app.option.set"),
    /**
     * Получает данные, привязанные к приложению.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code option}</b> - Строка, один из ключей из свойства {@link #APP_OPTION_SET}.</li>
     * </ul>
     */
    APP_OPTION_GET("app.option.get"),
    /**
     * Методы привязки данных к приложению и пользователю<br>
     */
    USER_OPTION_ANY("user.option.*"),

// Лиды: https://dev.1c-bitrix.ru/rest_help/crm/leads/index.php

    /**
     * Создаёт новый лид.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("поле"=>"значение"[, ...]), содержащий значения полей лида. Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_LEAD_FIELDS} и посмотрите формат пришедших значений этих полей. Для создания повторного лида установите значения полей COMPANY_ID или CONTACT_ID. После установки этих полей флаг IS_RETURN_CUSTOMER будет установлен автоматически.</li>
     * <li><b>{@code params}</b> - Набор параметров. REGISTER_SONET_EVENT - произвести регистрацию события добавления лида в живой ленте. Дополнительно будет отправлено уведомление ответственному за лид.</li>
     * </ul>
     */
    CRM_LEAD_ADD("crm.lead.add"),
    /**
     * Удаляет лид и все связанные с ним объекты.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор лида.</li>
     * </ul>
     */
    CRM_LEAD_DELETE("crm.lead.delete"),
    /**
     * Возвращает описание полей лида.<br>
     */
    CRM_LEAD_FIELDS("crm.lead.fields"),
    /**
     * Возвращает лид по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор лида.</li>
     * </ul>
     */
    CRM_LEAD_GET("crm.lead.get"),
    /**
     * Возвращает список лидов по фильтру.<br>
     */
    CRM_LEAD_LIST("crm.lead.list"),
    /**
     * Возвращает товарные позиции лида.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор лида.</li>
     * </ul>
     */
    CRM_LEAD_PRODUCTROWS_GET("crm.lead.productrows.get"),
    /**
     * Устанавливает (создаёт или обновляет) товарные позиции лида.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор лида.</li>
     * <li><b>{@code rows}</b> - Товарные позиции - массив вида <nobr>array(array("поле"=>"значение"[, ...])[, ...])</nobr>, где "поле" может принимать значения из возвращаемых методом {@code #CRM_PRODUCTROW_FIELDS}. Товарные позиции лида, существующие до момента вызова метода, будут заменены новыми. После сохранения будет произведён пересчёт суммы лида.</li>
     * </ul>
     */
    CRM_LEAD_PRODUCTROWS_SET("crm.lead.productrows.set"),
    /**
     * Обновляет существующий лид.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор лида.</li>
     * <li><b>{@code fields}</b> - Набор полей - массив вида <nobr>array("обновляемое поле"=>"значение"[, ...])</nobr>, где "обновляемое поле" может принимать значения из возвращаемых методом {@link #CRM_LEAD_FIELDS}. Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_LEAD_FIELDS} и посмотрите формат пришедших значений этих полей.</li>
     * <li><b>{@code params}</b> - Набор параметров. REGISTER_SONET_EVENT - произвести регистрацию события изменения лида в живой ленте. Дополнительно будет отправлено уведомление ответственному за лид.</li>
     * </ul>
     */
    CRM_LEAD_UPDATE("crm.lead.update"),
    /**
     * Создаёт новое пользовательское поле для лидов.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("поле"=>"значение"[, ...]), содержащий описание пользовательского поля.</li>
     * <li><b>{@code LIST}</b> - Содержит набор значений списка для пользовательских полей типа Список. Указывается при создании/обновлении поля. Каждое значение представляет собой массив с полями: VALUE - значение элемента списка. Поле является обязательным в случае, когда создается новый элемент. SORT - сортировка. DEF - если равно Y, то элемент списка является значением по-умолчанию. Для множественного поля допустимо несколько DEF=Y. Для не множественного, дефолтным будет считаться первое. XML_ID - внешний код значения. Параметр учитывается только при обновлении уже существующих значений элемента списка. ID - идентификатор значения. Если он указан, то считается что это обновление существующего значения элемента списка, а не создание нового. Имеет смысл только при вызове методов *.userfield.update. DEL - если равно Y, то существующий элемент списка будет удален. Применяется, если заполнен параметр ID.</li>
     * </ul>
     */
    CRM_LEAD_USERFIELD_ADD("crm.lead.userfield.add"),
    /**
     * Возвращает пользовательское поле лидов по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор пользовательского поля.</li>
     * </ul>
     */
    CRM_LEAD_USERFIELD_GET("crm.lead.userfield.get"),
    /**
     * Возвращает список пользовательских полей лидов по фильтру.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter}</b> - Поля фильтра.</li>
     * <li><b>{@code order}</b> - Поля сортировки.</li>
     * </ul>
     */
    CRM_LEAD_USERFIELD_LIST("crm.lead.userfield.list"),
    /**
     * Обновляет существующее пользовательское поле лидов.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор пользовательского поля.</li>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("поле"=>"значение"[, ...]), где "обновляемое поле" может принимать значения из возвращаемых методом {@link #CRM_USERFIELD_FIELDS}.</li>
     * <li><b>{@code LIST}</b> - Содержит набор значений списка для пользовательских полей типа Список. Указывается при создании/обновлении поля. Каждое значение представляет собой массив с полями: VALUE - значение элемента списка. Поле является обязательным в случае, когда создается новый элемент. SORT - сортировка. DEF - если равно Y, то элемент списка является значением по-умолчанию. Для множественного поля допустимо несколько DEF=Y. Для не множественного, дефолтным будет считаться первое. XML_ID - внешний код значения. Параметр учитывается только при обновлении уже существующих значений элемента списка. ID - идентификатор значения. Если он указан, то считается что это обновление существующего значения элемента списка, а не создание нового. Имеет смысл только при вызове методов *.userfield.update. DEL - если равно Y, то существующий элемент списка будет удален. Применяется, если заполнен параметр ID.</li>
     * </ul>
     */
    CRM_LEAD_USERFIELD_UPDATE("crm.lead.userfield.update"),
    /**
     * Удаляет пользовательское поле лидов.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор пользовательского поля.</li>
     * </ul>
     */
    CRM_LEAD_USERFIELD_DELETE("crm.lead.userfield.delete"),

// Компании: https://dev.1c-bitrix.ru/rest_help/crm/company/index.php

    /**
     * Создаёт новую компанию.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("поле"=>"значение"[, ...]), содержащий значения полей компании. Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_COMPANY_FIELDS} и посмотрите формат пришедших значений этих полей.</li>
     * <li><b>{@code params}</b> - Набор параметров. REGISTER_SONET_EVENT - произвести регистрацию события добавления компании в живой ленте. Дополнительно будет отправлено уведомление ответственному за компанию.</li>
     * </ul>
     */
    CRM_COMPANY_ADD("crm.company.add"),
    /**
     * Удаляет компанию и все связанные с ней объекты.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор компании.</li>
     * </ul>
     */
    CRM_COMPANY_DELETE("crm.company.delete"),
    /**
     * Возвращает описание полей компании.<br>
     */
    CRM_COMPANY_FIELDS("crm.company.fields"),
    /**
     * Возвращает компанию по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор компании.</li>
     * </ul>
     */
    CRM_COMPANY_GET("crm.company.get"),
    /**
     * Возвращает список компаний по фильтру.<br>
     */
    CRM_COMPANY_LIST("crm.company.list"),
    /**
     * Обновляет существующую компанию.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор компании.</li>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("обновляемое поле"=>"значение"[, ...]), где "обновляемое поле" может принимать значения из возвращаемых методом {@link #CRM_COMPANY_FIELDS}. Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_COMPANY_FIELDS} и посмотрите формат пришедших значений этих полей.</li>
     * <li><b>{@code params}</b> - Набор параметров. REGISTER_SONET_EVENT - произвести регистрацию события изменения компании в живой ленте. Дополнительно будет отправлено уведомление ответственному за компанию.</li>
     * </ul>
     */
    CRM_COMPANY_UPDATE("crm.company.update"),
    /**
     * Создаёт новое пользовательское поле для компаний.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("поле"=>"значение"[, ...]), содержащий описание пользовательского поля.</li>
     * <li><b>{@code LIST}</b> - Содержит набор значений списка для пользовательских полей типа Список. Указывается при создании/обновлении поля. Каждое значение представляет собой массив с полями: VALUE - значение элемента списка. Поле является обязательным в случае, когда создается новый элемент. SORT - сортировка. DEF - если равно Y, то элемент списка является значением по-умолчанию. Для множественного поля допустимо несколько DEF=Y. Для не множественного, дефолтным будет считаться первое. XML_ID - внешний код значения. Параметр учитывается только при обновлении уже существующих значений элемента списка. ID - идентификатор значения. Если он указан, то считается что это обновление существующего значения элемента списка, а не создание нового. Имеет смысл только при вызове методов *.userfield.update. DEL - если равно Y, то существующий элемент списка будет удален. Применяется, если заполнен параметр ID.</li>
     * </ul>
     */
    CRM_COMPANY_USERFIELD_ADD("crm.company.userfield.add"),
    /**
     * Возвращает пользовательское поле компаний по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор пользовательского поля.</li>
     * </ul>
     */
    CRM_COMPANY_USERFIELD_GET("crm.company.userfield.get"),
    /**
     * Возвращает список пользовательских полей компаний по фильтру.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter}</b> - Поля фильтра.</li>
     * <li><b>{@code order}</b> - Поля сортировки.</li>
     * </ul>
     */
    CRM_COMPANY_USERFIELD_LIST("crm.company.userfield.list"),
    /**
     * Обновляет существующее пользовательское поле компаний.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор пользовательского поля.</li>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("обновляемое поле"=>"значение"[, ...]), где "обновляемое поле" может принимать значения из возвращаемых методом {@link #CRM_USERFIELD_FIELDS}.</li>
     * <li><b>{@code LIST}</b> - Содержит набор значений списка для пользовательских полей типа Список. Указывается при создании/обновлении поля. Каждое значение представляет собой массив с полями: VALUE - значение элемента списка. Поле является обязательным в случае, когда создается новый элемент. SORT - сортировка. DEF - если равно Y, то элемент списка является значением по-умолчанию. Для множественного поля допустимо несколько DEF=Y. Для не множественного, дефолтным будет считаться первое. XML_ID - внешний код значения. Параметр учитывается только при обновлении уже существующих значений элемента списка. ID - идентификатор значения. Если он указан, то считается что это обновление существующего значения элемента списка, а не создание нового. Имеет смысл только при вызове методов *.userfield.update. DEL - если равно Y, то существующий элемент списка будет удален. Применяется, если заполнен параметр ID.</li>
     * </ul>
     */
    CRM_COMPANY_USERFIELD_UPDATE("crm.company.userfield.update"),
    /**
     * Удаляет пользовательское поле компаний.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор пользовательского поля.</li>
     * </ul>
     */
    CRM_COMPANY_USERFIELD_DELETE("crm.company.userfield.delete"),
    /**
     * Добавляет контакт к указанной компании.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор компании.</li>
     * <li><b>{@code fields}</b> - Объект со следующими полями: CONTACT_ID - идентификатор контакта (обязательное поле) SORT - индекс сортировки IS_PRIMARY - флаг первичного контакта Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_COMPANY_FIELDS} и посмотрите формат пришедших значений этих полей.</li>
     * </ul>
     */
    CRM_COMPANY_CONTACT_ADD("crm.company.contact.add"),
    /**
     * Удаляет контакт из указанной компании.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор контакта.</li>
     * <li><b>{@code fields}</b> - Объект со следующими полями: CONTACT_ID - идентификатор контакта (обязательное поле)</li>
     * </ul>
     */
    CRM_COMPANY_CONTACT_DELETE("crm.company.contact.delete"),
    /**
     * Возвращает описание полей для связи компания-контакт.<br>
     */
    CRM_COMPANY_CONTACT_FIELDS("crm.company.contact.fields"),
    /**
     * Очищает набор коонтактов, связанных с указанной компанией.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор компании.</li>
     * </ul>
     */
    CRM_COMPANY_CONTACT_ITEMS_DELETE("crm.company.contact.items.delete"),
    /**
     * Возвращает набор контактов, связанных с указанной компанией.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор компании.</li>
     * </ul>
     */
    CRM_COMPANY_CONTACT_ITEMS_GET("crm.company.contact.items.get"),
    /**
     * Устанавливает набор контактов, связанных с указанной компанией.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор компании.</li>
     * <li><b>{@code items}</b> - Набор контактов в виде массива объектов со следующими полями: CONTACT_ID - идентификатор контакта (обязательное поле) SORT - индекс сортировки IS_PRIMARY - флаг первичного контакта</li>
     * </ul>
     */
    CRM_COMPANY_CONTACT_ITEMS_SET("crm.company.contact.items.set"),

// Контакты: https://dev.1c-bitrix.ru/rest_help/crm/contacts/index.php

    /**
     * Создаёт новый контакт.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей – массив вида array("поле"=>"значение"[, ...]), содержащий значения полей контакта. Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_CONTACT_FIELDS} и посмотрите формат пришедших значений этих полей.</li>
     * <li><b>{@code params}</b> - Набор параметров. REGISTER_SONET_EVENT - произвести регистрацию события добавления контакта в живой ленте. Дополнительно будет отправлено уведомление ответственному за контакт.</li>
     * </ul>
     */
    CRM_CONTACT_ADD("crm.contact.add"),
    /**
     * Добавляет компанию к указанному контакту.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор контакта.</li>
     * <li><b>{@code fields}</b> - Объект со следующими полями: COMPANY_ID - идентификатор компании (обязательное поле) SORT - индекс сортировки IS_PRIMARY - флаг первичной компании Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_CONTACT_FIELDS} и посмотрите формат пришедших значений этих полей.</li>
     * </ul>
     */
    CRM_CONTACT_COMPANY_ADD("crm.contact.company.add"),
    /**
     * Удаляет компанию из указанного контакта.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор контакта.</li>
     * <li><b>{@code fields}</b> - Объект со следующими полями: COMPANY_ID - идентификатор компании (обязательное поле)</li>
     * </ul>
     */
    CRM_CONTACT_COMPANY_DELETE("crm.contact.company.delete"),
    /**
     * Возвращает описание полей для связи контакт-компания.<br>
     */
    CRM_CONTACT_COMPANY_FIELDS("crm.contact.company.fields"),
    /**
     * Очищает набор компаний, связанных с указанным контактом.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор контакта.</li>
     * </ul>
     */
    CRM_CONTACT_COMPANY_ITEMS_DELETE("crm.contact.company.items.delete"),
    /**
     * Возвращает набор компаний, связанных с указанным контактом.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор контакта.</li>
     * </ul>
     */
    CRM_CONTACT_COMPANY_ITEMS_GET("crm.contact.company.items.get"),
    /**
     * Устанавливает набор компаний, связанных с указанным контактом.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор контакта.</li>
     * <li><b>{@code items}</b> - Набор компаний в виде массива объектов со следующими полями: COMPANY_ID - идентификатор компании (обязательное поле) SORT - индекс сортировки IS_PRIMARY - флаг первичной компании</li>
     * </ul>
     */
    CRM_CONTACT_COMPANY_ITEMS_SET("crm.contact.company.items.set"),
    /**
     * Удаляет контакт и все связанные с ним объекты.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор контакта.</li>
     * </ul>
     */
    CRM_CONTACT_DELETE("crm.contact.delete"),
    /**
     * Возвращает описание полей контакта.<br>
     */
    CRM_CONTACT_FIELDS("crm.contact.fields"),
    /**
     * Возвращает контакт по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор контакта.</li>
     * </ul>
     */
    CRM_CONTACT_GET("crm.contact.get"),
    /**
     * Возвращает список контактов по фильтру.<br>
     */
    CRM_CONTACT_LIST("crm.contact.list"),
    /**
     * Обновляет существующий контакт.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор контакта.</li>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("обновляемое поле"=>"значение"[, ...]), где "обновляемое поле" может принимать значения из возвращаемых методом {@link #CRM_CONTACT_FIELDS}. Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_CONTACT_FIELDS} и посмотрите формат пришедших значений этих полей.</li>
     * <li><b>{@code params}</b> - Набор параметров. REGISTER_SONET_EVENT - произвести регистрацию события изменения контакта в живой ленте. Дополнительно будет отправлено уведомление ответственному за контакт.</li>
     * </ul>
     */
    CRM_CONTACT_UPDATE("crm.contact.update"),
    /**
     * Создаёт новое пользовательское поле для контактов.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("поле"=>"значение"[, ...]), содержащий описание пользовательского поля.</li>
     * <li><b>{@code LIST}</b> - Содержит набор значений списка для пользовательских полей типа Список. Указывается при создании/обновлении поля. Каждое значение представляет собой массив с полями: VALUE - значение элемента списка. Поле является обязательным в случае, когда создается новый элемент. SORT - сортировка. DEF - если равно Y, то элемент списка является значением по-умолчанию. Для множественного поля допустимо несколько DEF=Y. Для не множественного, дефолтным будет считаться первое. XML_ID - внешний код значения. Параметр учитывается только при обновлении уже существующих значений элемента списка. ID - идентификатор значения. Если он указан, то считается что это обновление существующего значения элемента списка, а не создание нового. Имеет смысл только при вызове методов *.userfield.update. DEL - если равно Y, то существующий элемент списка будет удален. Применяется, если заполнен параметр ID.</li>
     * </ul>
     */
    CRM_CONTACT_USERFIELD_ADD("crm.contact.userfield.add"),
    /**
     * Возвращает пользовательское поле контактов по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор пользовательского поля.</li>
     * </ul>
     */
    CRM_CONTACT_USERFIELD_GET("crm.contact.userfield.get"),
    /**
     * Возвращает список пользовательских полей контактов по фильтру.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter}</b> - Поля фильтра.</li>
     * <li><b>{@code order}</b> - Поля сортировки.</li>
     * </ul>
     */
    CRM_CONTACT_USERFIELD_LIST("crm.contact.userfield.list"),
    /**
     * Обновляет существующее пользовательское поле контактов.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор пользовательского поля.</li>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("обновляемое поле"=>"значение"[, ...]), где "обновляемое поле" может принимать значения из возвращаемых методом {@link #CRM_USERFIELD_FIELDS}.</li>
     * <li><b>{@code LIST}</b> - Содержит набор значений списка для пользовательских полей типа Список. Указывается при создании/обновлении поля. Каждое значение представляет собой массив с полями: VALUE - значение элемента списка. Поле является обязательным в случае, когда создается новый элемент. SORT - сортировка. DEF - если равно Y, то элемент списка является значением по-умолчанию. Для множественного поля допустимо несколько DEF=Y. Для не множественного, дефолтным будет считаться первое. XML_ID - внешний код значения. Параметр учитывается только при обновлении уже существующих значений элемента списка. ID - идентификатор значения. Если он указан, то считается что это обновление существующего значения элемента списка, а не создание нового. Имеет смысл только при вызове методов *.userfield.update. DEL - если равно Y, то существующий элемент списка будет удален. Применяется, если заполнен параметр ID.</li>
     * </ul>
     */
    CRM_CONTACT_USERFIELD_UPDATE("crm.contact.userfield.update"),
    /**
     * Удаляет пользовательское поле контактов.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор пользовательского поля.</li>
     * </ul>
     */
    CRM_CONTACT_USERFIELD_DELETE("crm.contact.userfield.delete"),

// Сделки: https://dev.1c-bitrix.ru/rest_help/crm/cdeals/index.php

    /**
     * Создаёт новую сделку.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("поле"=>"значение"[, ...]), содержащий значения полей сделки. Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_DEAL_FIELDS} и посмотрите формат пришедших значений этих полей.</li>
     * <li><b>{@code params}</b> - Набор параметров. REGISTER_SONET_EVENT - произвести регистрацию события добавления сделки в живой ленте. Дополнительно будет отправлено уведомление ответственному за сделку.</li>
     * </ul>
     */
    CRM_DEAL_ADD("crm.deal.add"),
    /**
     * Добавляет контакт к указанной сделке.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор сделки.</li>
     * <li><b>{@code fields}</b> - Объект со следующими полями: CONTACT_ID - идентификатор контакта (обязательное поле) SORT - индекс сортировки IS_PRIMARY - флаг первичного контакта Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_DEAL_CONTACT_FIELDS} и посмотрите формат пришедших значений этих полей.</li>
     * </ul>
     */
    CRM_DEAL_CONTACT_ADD("crm.deal.contact.add"),
    /**
     * Удаляет контакт из указанной сделки.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор сделки.</li>
     * <li><b>{@code fields}</b> - Объект со следующими полями: CONTACT_ID - идентификатор контакта (обязательное поле)</li>
     * </ul>
     */
    CRM_DEAL_CONTACT_DELETE("crm.deal.contact.delete"),
    /**
     * Возвращает описание полей для связи сделка-контакт.<br>
     */
    CRM_DEAL_CONTACT_FIELDS("crm.deal.contact.fields"),
    /**
     * Очищает набор контактов, связанных с указанной сделкой.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор сделки.</li>
     * </ul>
     */
    CRM_DEAL_CONTACT_ITEMS_DELETE("crm.deal.contact.items.delete"),
    /**
     * Возвращает набор контактов, связанных с указанной сделкой.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор сделки.</li>
     * </ul>
     */
    CRM_DEAL_CONTACT_ITEMS_GET("crm.deal.contact.items.get"),
    /**
     * Устанавливает набор контактов, связанных с указанной сделкой.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор сделки.</li>
     * <li><b>{@code items}</b> - Набор контактов в виде массива объектов со следующими полями: CONTACT_ID - идентификатор контакта (обязательное поле) SORT - индекс сортировки IS_PRIMARY - флаг первичного контакта</li>
     * </ul>
     */
    CRM_DEAL_CONTACT_ITEMS_SET("crm.deal.contact.items.set"),
    /**
     * Удаляет сделку и все связанные с ней объекты.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор сделки.</li>
     * </ul>
     */
    CRM_DEAL_DELETE("crm.deal.delete"),
    /**
     * Возвращает описание полей сделки.<br>
     */
    CRM_DEAL_FIELDS("crm.deal.fields"),
    /**
     * Возвращает сделку по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор сделки.</li>
     * </ul>
     */
    CRM_DEAL_GET("crm.deal.get"),
    /**
     * Возвращает список сделок по фильтру.<br>
     */
    CRM_DEAL_LIST("crm.deal.list"),
    /**
     * Возвращает товарные позиции сделки.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор сделки.</li>
     * </ul>
     */
    CRM_DEAL_PRODUCTROWS_GET("crm.deal.productrows.get"),
    /**
     * Устанавливает (создаёт или обновляет) товарные позиции сделки.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор cделки.</li>
     * <li><b>{@code rows}</b> - Товарные позиции - массив вида array(array("поле"=>"значение"[, ...])[, ...]), где "поле" может принимать значения из возвращаемых методом {@code  #CRM_PRODUCTROW_FIELDS}. Товарные позиции сделки, существующие до момента вызова метода, будут заменены новыми. После сохранения будет произведён пересчёт суммы сделки.</li>
     * </ul>
     */
    CRM_DEAL_PRODUCTROWS_SET("crm.deal.productrows.set"),
    /**
     * Добавляет новую настройку для регулярной сделки.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array ("поле"=>"значение"[, ...]), содержащий значения полей сделки. Обязательное поле - поле DEAL_ID [ID сделки, у которой задан параметр IS_RECURRING=Y] Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_DEAL_RECURRING_FIELDS} и посмотрите формат пришедших значений этих полей.</li>
     * </ul>
     */
    CRM_DEAL_RECURRING_ADD("crm.deal.recurring.add"),
    /**
     * Удаляет существующую настройку для шаблона регулярной сделки.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор настройки шаблона регулярной сделки.</li>
     * </ul>
     */
    CRM_DEAL_RECURRING_DELETE("crm.deal.recurring.delete"),
    /**
     * Создает новую сделку из шаблона.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор настройки шаблона регулярной сделки.</li>
     * </ul>
     */
    CRM_DEAL_RECURRING_EXPOSE("crm.deal.recurring.expose"),
    /**
     * Возвращает список полей настройки шаблона регулярной сделки с описанием.<br>
     */
    CRM_DEAL_RECURRING_FIELDS("crm.deal.recurring.fields"),
    /**
     * Возвращает поля настройки шаблона регулярной сделки по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор настройки шаблона регулярной сделки.</li>
     * </ul>
     */
    CRM_DEAL_RECURRING_GET("crm.deal.recurring.get"),
    /**
     * Возвращает список настроек шаблонов регулярных сделок по фильтру.<br>
     */
    CRM_DEAL_RECURRING_LIST("crm.deal.recurring.list"),
    /**
     * Обновляет существующую настройку для шаблона регулярной сделки.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор настройки шаблона регулярной сделки.</li>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("обновляемое поле"=>"значение"[, ...]), где "обновляемое поле" может принимать значения из возвращаемых методом {@link #CRM_DEAL_RECURRING_FIELDS}. Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_DEAL_RECURRING_FIELDS} и посмотрите формат пришедших значений этих полей.</li>
     * </ul>
     */
    CRM_DEAL_RECURRING_UPDATE("crm.deal.recurring.update"),
    /**
     * Обновляет существующую сделку.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор сделки.</li>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("обновляемое поле"=>"значение"[, ...]), где "обновляемое поле" может принимать значения из возвращаемых методом {@link #CRM_DEAL_FIELDS}. Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_DEAL_FIELDS} и посмотрите формат пришедших значений этих полей.</li>
     * <li><b>{@code params}</b> - Набор параметров. REGISTER_SONET_EVENT - произвести регистрацию события изменения сделки в живой ленте. Дополнительно будет отправлено уведомление ответственному за сделку.</li>
     * </ul>
     */
    CRM_DEAL_UPDATE("crm.deal.update"),
    /**
     * Создаёт новое пользовательское поле для сделок.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей На данный момент: ENTITY_ID USER_TYPE_ID FIELD_NAME LIST_FILTER_LABEL LIST_COLUMN_LABEL EDIT_FORM_LABEL ERROR_MESSAGE HELP_MESSAGE MULTIPLE MANDATORY SHOW_FILTER SETTINGS LIST - массив вида array("поле"=>"значение"[, ...]), содержащий описание пользовательского поля. В том числе содержит поле LIST, которое содержит набор значений списка для пользовательских полей типа Список. Указывается при создании/обновлении поля. Каждое значение представляет собой массив с полями: VALUE - значение элемента списка. Поле является обязательным в случае, когда создается новый элемент. SORT - сортировка. DEF - если равно Y, то элемент списка является значением по-умолчанию. Для множественного поля допустимо несколько DEF=Y. Для не множественного, дефолтным будет считаться первое. XML_ID - внешний код значения. Параметр учитывается только при обновлении уже существующих значений элемента списка. ID - идентификатор значения. Если он указан, то считается что это обновление существующего значения элемента списка, а не создание нового. Имеет смысл только при вызове методов *.userfield.update. DEL - если равно Y, то существующий элемент списка будет удален. Применяется, если заполнен параметр ID.</li>
     * </ul>
     */
    CRM_DEAL_USERFIELD_ADD("crm.deal.userfield.add"),
    /**
     * Возвращает пользовательское поле сделок по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор поля.</li>
     * </ul>
     */
    CRM_DEAL_USERFIELD_GET("crm.deal.userfield.get"),
    /**
     * Возвращает список пользовательских полей сделок по фильтру.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter}</b> - Поля фильтра.</li>
     * <li><b>{@code order}</b> - Поля сортировки.</li>
     * </ul>
     */
    CRM_DEAL_USERFIELD_LIST("crm.deal.userfield.list"),
    /**
     * Обновляет существующее пользовательское поле сделок.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор пользовательского поля.</li>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("обновляемое поле"=>"значение"[, ...]), где "обновляемое поле" может принимать значения из возвращаемых методом {@link #CRM_USERFIELD_FIELDS}.</li>
     * <li><b>{@code LIST}</b> - Содержит набор значений списка для пользовательских полей типа Список. Указывается при создании/обновлении поля. Каждое значение представляет собой массив с полями: VALUE - значение элемента списка. Поле является обязательным в случае, когда создается новый элемент. SORT - сортировка. DEF - если равно Y, то элемент списка является значением по-умолчанию. Для множественного поля допустимо несколько DEF=Y. Для не множественного, дефолтным будет считаться первое. XML_ID - внешний код значения. Параметр учитывается только при обновлении уже существующих значений элемента списка. ID - идентификатор значения. Если он указан, то считается что это обновление существующего значения элемента списка, а не создание нового. Имеет смысл только при вызове методов *.userfield.update. DEL - если равно Y, то существующий элемент списка будет удален. Применяется, если заполнен параметр ID.</li>
     * </ul>
     */
    CRM_DEAL_USERFIELD_UPDATE("crm.deal.userfield.update"),
    /**
     * Удаляет пользовательское поле сделок.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор пользовательского поля.</li>
     * </ul>
     */
    CRM_DEAL_USERFIELD_DELETE("crm.deal.userfield.delete"),

// Статусы счетов: https://dev.1c-bitrix.ru/rest_help/crm/invoice_status/index.php

    /**
     * Возвращает описание полей статуса счёта.<br>
     */
    CRM_INVOICE_STATUS_FIELDS("crm.invoice.status.fields"),
    /**
     * Возвращает список статусов счёта.<br>
     */
    CRM_INVOICE_STATUS_LIST("crm.invoice.status.list"),
    /**
     * Возвращает статус счёта по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор статуса счёта.</li>
     * </ul>
     */
    CRM_INVOICE_STATUS_GET("crm.invoice.status.get"),
    /**
     * Создаёт новый статус счёта.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("поле"=>"значение"[, ...]), содержащий значения полей статуса счёта. Примечание: чтобы узнать требуемый формат полей, выполните метод crm.invoice.status.fields и посмотрите формат пришедших значений этих полей.</li>
     * </ul>
     */
    CRM_INVOICE_STATUS_ADD("crm.invoice.status.add"),
    /**
     * Обновляет существующий статус счёта.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор статуса счёта.</li>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("обновляемое поле"=>"значение"[, ...]), где "обновляемое поле" может принимать значения из возвращаемых методом {@link #CRM_INVOICE_STATUS_FIELDS}. Примечание: чтобы узнать требуемый формат полей, выполните метод crm.invoice.status.fields и посмотрите формат пришедших значений этих полей.</li>
     * </ul>
     */
    CRM_INVOICE_STATUS_UPDATE("crm.invoice.status.update"),
    /**
     * Удаляет статус счёта.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор статуса счёта.</li>
     * </ul>
     */
    CRM_INVOICE_STATUS_DELETE("crm.invoice.status.delete"),

// Управление связями лидов и контактов: https://dev.1c-bitrix.ru/rest_help/crm/management_communication/index.php

    /**
     * Добавляет контакт к указанному лиду.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор лида.</li>
     * <li><b>{@code fields}</b> - Объект со следующими полями: CONTACT_ID - идентификатор контакта (обязательное поле) SORT - индекс сортировки IS_PRIMARY - флаг первичного контакта</li>
     * </ul>
     */
    CRM_LEAD_CONTACT_ADD("crm.lead.contact.add"),
    /**
     * Удаляет контакт из указанного лида.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор лида.</li>
     * <li><b>{@code fields}</b> - Объект со следующими полями: CONTACT_ID - идентификатор контакта (обязательное поле)</li>
     * </ul>
     */
    CRM_LEAD_CONTACT_DELETE("crm.lead.contact.delete"),
    /**
     * Возвращает для связи лид-контакт описание полей, используемых методами семейства {@code #CRM_LEAD_CONTACT_*}.*<br>
     */
    CRM_LEAD_CONTACT_FIELDS("crm.lead.contact.fields"),
    /**
     * Очищает набор контактов, связанных с указанным лидом.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор лида.</li>
     * </ul>
     */
    CRM_LEAD_CONTACT_ITEMS_DELETE("crm.lead.contact.items.delete"),
    /**
     * Возвращает набор контактов, связанных с указанным лидом.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор лида.</li>
     * </ul>
     */
    CRM_LEAD_CONTACT_ITEMS_GET("crm.lead.contact.items.get"),
    /**
     * Устанавливает набор контактов, связанных с указанным лидом.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор лида.</li>
     * <li><b>{@code items}</b> - Набор контактов в виде массива объектов со следующими полями: CONTACT_ID - идентификатор контакта (обязательное поле) SORT - индекс сортировки IS_PRIMARY - флаг первичного контакта</li>
     * </ul>
     */
    CRM_LEAD_CONTACT_ITEMS_SET("crm.lead.contact.items.set"),

// Предложения: https://dev.1c-bitrix.ru/rest_help/crm/komm_quote/index.php

    /**
     * Возвращает описание полей коммерческого предложения.<br>
     */
    CRM_QUOTE_FIELDS("crm.quote.fields"),
    /**
     * Набор полей.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("поле"=>"значение"[, ...]), содержащий значения полей предложения, где "поле" может принимать значения из возвращаемых методом {@link #CRM_QUOTE_FIELDS}. Примечание: чтобы узнать требуемый формат полей, выполните метод crm.quote.fields и посмотрите формат пришедших значений этих полей.</li>
     * </ul>
     */
    CRM_QUOTE_ADD("crm.quote.add"),
    /**
     * Возвращает коммерческое предложение по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор предложения.</li>
     * </ul>
     */
    CRM_QUOTE_GET("crm.quote.get"),
    /**
     * Возвращает список предложений по фильтру. Является реализацией списочного метода для предложений.<br>
     */
    CRM_QUOTE_LIST("crm.quote.list"),
    /**
     * Обновляет существующее предложение.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор предложения.</li>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("обновляемое поле"=>"значение"[, ...]), где "обновляемое поле" может принимать значения из возвращаемых методом {@link #CRM_QUOTE_FIELDS}. Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_QUOTE_FIELDS} и посмотрите формат пришедших значений этих полей.</li>
     * <li><b>{@code params}</b> - Набор параметров. REGISTER_HISTORY_EVENT - создать запись в истории, значение по умолчанию: "Y". Дополнительно будет отправлено уведомление ответственному за предложение.</li>
     * </ul>
     */
    CRM_QUOTE_UPDATE("crm.quote.update"),
    /**
     * Удаляет предложение и все связанные с ним объекты.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор предложения.</li>
     * </ul>
     */
    CRM_QUOTE_DELETE("crm.quote.delete"),
    /**
     * Возвращает товарные позиции предложения.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор предложения.</li>
     * </ul>
     */
    CRM_QUOTE_PRODUCTROWS_GET("crm.quote.productrows.get"),
    /**
     * Устанавливает (создаёт или обновляет) товарные позиции предложения.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор предложения.</li>
     * <li><b>{@code rows}</b> - Товарные позиции - массив вида array(array("поле"=>"значение"[, ...])[, ...]), где "поле" может принимать значения из возвращаемых методом {@code  #CRM_PRODUCTROW_FIELDS}. Товарные позиции предложения, существующие до момента вызова метода, будут заменены новыми. После сохранения будет произведён пересчёт суммы предложения.</li>
     * </ul>
     */
    CRM_QUOTE_PRODUCTROWS_SET("crm.quote.productrows.set"),
    /**
     * Создаёт новое пользовательское поле для предложений.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("поле"=>"значение"[, ...]), содержащий описание пользовательского поля. Полное описание полей можно получить вызовом метода {@link #CRM_USERFIELD_FIELDS}.</li>
     * </ul>
     */
    CRM_QUOTE_USERFIELD_ADD("crm.quote.userfield.add"),
    /**
     * Удаляет пользовательское поле предложений.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор пользовательского поля.</li>
     * </ul>
     */
    CRM_QUOTE_USERFIELD_DELETE("crm.quote.userfield.delete"),
    /**
     * Возвращает пользовательское поле предложений по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор пользовательского поля.</li>
     * </ul>
     */
    CRM_QUOTE_USERFIELD_GET("crm.quote.userfield.get"),
    /**
     * Возвращает список пользовательских полей предложений по фильтру.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter}</b> - Поля фильтра.</li>
     * <li><b>{@code order}</b> - Поля сортировки.</li>
     * </ul>
     */
    CRM_QUOTE_USERFIELD_LIST("crm.quote.userfield.list"),
    /**
     * Обновляет существующее пользовательское поле предложений.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор пользовательского поля.</li>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("обновляемое поле"=>"значение"[, ...]), где "обновляемое поле" может принимать значения из возвращаемых методом {@link #CRM_USERFIELD_FIELDS}.</li>
     * </ul>
     */
    CRM_QUOTE_USERFIELD_UPDATE("crm.quote.userfield.update"),

// Методы настроек смарт-процессов: https://dev.1c-bitrix.ru/rest_help/crm/dynamic/methodscrmtype/index.php

    /**
     * Отдает информацию о собственных полях настроек смарт-процесса.<br>
     */
    CRM_TYPE_FIELDS("crm.type.fields"),
    /**
     * Отдает информацию о смарт-процессе.<br>
     */
    CRM_TYPE_GET("crm.type.get"),
    /**
     * Возвращает массив настроек смарт-процессов.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter}</b> - Список для фильтрации. Примеры фильтров ниже.</li>
     * <li><b>{@code start}</b> - Сдвиг для постраничной навигации.</li>
     * <li><b>{@code order}</b> - Список для сортировки, где ключ - поле, а значение - ASC или DESC.</li>
     * </ul>
     */
    CRM_TYPE_LIST("crm.type.list"),
    /**
     * Создаёт новый смарт-процесс.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Состоит из полей настроек смарт-процесса, а также настроек связей, привязок к пользовательскому полю и настройки показа вне CRM.</li>
     * </ul>
     */
    CRM_TYPE_ADD("crm.type.add"),
    /**
     * Обновляет существующие настройки смарт-процесса.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор смарт-процесса.</li>
     * <li><b>{@code fields}</b> - Состоит из полей настроек смарт-процесса, а также настроек связей, привязок к пользовательскому полю и настройки показа вне CRM.</li>
     * </ul>
     */
    CRM_TYPE_UPDATE("crm.type.update"),
    /**
     * Удаляет существующие настройки смарт-процесса.<br>
     */
    CRM_TYPE_DELETE("crm.type.delete"),

// Направления смарт-процессов: https://dev.1c-bitrix.ru/rest_help/crm/dynamic/category.php

    /**
     * Отдает информацию о полях направлений.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code entityTypeId}</b> - Идентификатор типа сущности CRM.</li>
     * </ul>
     */
    CRM_CATEGORY_FIELDS("crm.category.fields"),
    /**
     * Отдает информацию о направлении с идентификатором id.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code entityTypeId}</b> - Идентификатор типа сущности CRM.</li>
     * <li><b>{@code id}</b> - Идентификатор направления.</li>
     * </ul>
     */
    CRM_CATEGORY_GET("crm.category.get"),
    /**
     * Возвращает массив направлений, которые относятся к типу сущности с идентификатором entityTypeId.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code entityTypeId}</b> - Идентификатор типа сущности CRM.</li>
     * </ul>
     */
    CRM_CATEGORY_LIST("crm.category.list"),
    /**
     * Создаёт у типа сущности с идентификатором entityTypeId новое направление с полями fields.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code entityTypeId}</b> - Идентификатор типа сущности CRM.</li>
     * <li><b>{@code fields}</b> - Значение полей направления.</li>
     * </ul>
     */
    CRM_CATEGORY_ADD("crm.category.add"),
    /**
     * Обновляет направление с идентификатором id, задав ему новые значения полей из fields.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code entityTypeId}</b> - Идентификатор типа сущности CRM.</li>
     * <li><b>{@code id}</b> - Идентификатор направления.</li>
     * <li><b>{@code fields}</b> - Значение полей направления.</li>
     * </ul>
     */
    CRM_CATEGORY_UPDATE("crm.category.update"),
    /**
     * Удаляет направление с идентификатором id, которое относится к типу сущности с идентификатором entityTypeId.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code entityTypeId}</b> - Идентификатор типа сущности CRM.</li>
     * <li><b>{@code id}</b> - Идентификатор направления.</li>
     * </ul>
     */
    CRM_CATEGORY_DELETE("crm.category.delete"),

// Элементы смарт-процессов: https://dev.1c-bitrix.ru/rest_help/crm/dynamic/methodscrmitem/index.php

    /**
     * Отдает информацию о полях смарт-процесса.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code entityTypeId}</b> - Идентификатор смарт-процесса.</li>
     * </ul>
     */
    CRM_ITEM_FIELDS("crm.item.fields"),
    /**
     * Отдает информацию об элементе смарт-процесса.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code entityTypeId}</b> - Идентификатор смарт-процесса.</li>
     * <li><b>{@code id}</b> - Идентификатор элемента.</li>
     * </ul>
     */
    CRM_ITEM_GET("crm.item.get"),
    /**
     * Возвращает массив элементов смарт-процесса.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter}</b> - Список для фильтрации. Примеры фильтров ниже.</li>
     * <li><b>{@code select}</b> - Массив имен полей для выборки.</li>
     * <li><b>{@code start}</b> - Сдвиг для постраничной навигации.</li>
     * <li><b>{@code entityTypeId}</b> - Идентификатор смарт-процесса.</li>
     * <li><b>{@code order}</b> - Список для сортировки, где ключ - поле, а значение - ASC или DESC.</li>
     * </ul>
     */
    CRM_ITEM_LIST("crm.item.list"),
    /**
     * Создаёт новый элемент смарт-процесса.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code entityTypeId}</b> - Идентификатор смарт-процесса.</li>
     * <li><b>{@code fields}</b> - Значение полей элемента. Необязательный параметр.</li>
     * </ul>
     */
    CRM_ITEM_ADD("crm.item.add"),
    /**
     * Обновляет элемент смарт-процесса.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code entityTypeId}</b> - Идентификатор смарт-процесса.</li>
     * <li><b>{@code id}</b> - Идентификатор элемента.</li>
     * <li><b>{@code fields}</b> - Значение полей элемента.</li>
     * </ul>
     */
    CRM_ITEM_UPDATE("crm.item.update"),
    /**
     * Удаляет элемент смарт-процесса.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code entityTypeId}</b> - Идентификатор смарт-процесса.</li>
     * <li><b>{@code id}</b> - Идентификатор элемента.</li>
     * </ul>
     */
    CRM_ITEM_DELETE("crm.item.delete"),

// Дополнительные контентные блоки: https://dev.1c-bitrix.ru/rest_help/crm/timeline/timeline_layout_blocks/index.php

    /**
     * Метод позволяет REST Приложениям устанавливать набор дополнительных контентных блоков в запись таймлайна<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code entityId* integer: entityId* integer}</b> - Идентификатор объекта CRM, к которому привязана запись таймлайна</li>
     * <li><b>{@code layout* RestAppLayoutDto: layout* RestAppLayoutDto}</b> - Объект, описывающий набор дополнительных контентных блоков</li>
     * <li><b>{@code activityId* integer: activityId* integer}</b> - Идентификатор записи таймлайна</li>
     * <li><b>{@code entityTypeId* integer: entityTypeId* integer}</b> - Идентификатор объекта CRM, к которому привязана запись таймлайна</li>
     * </ul>
     */
    CRM_TIMELINE_LAYOUT_BLOCKS_SET("crm.timeline.layout.blocks.set"),
    /**
     * Метод позволяет REST Приложениям получать установленный им же набор дополнительных контентных блоков для записи таймлайна<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code entityId* integer: entityId* integer}</b> - Идентификатор объекта CRM, к которой привязана запись таймлайна</li>
     * <li><b>{@code timelineId* integer: timelineId* integer}</b> - Идентификатор записи таймлайна</li>
     * <li><b>{@code entityTypeId* integer: entityTypeId* integer}</b> - Идентификатор типа объекта CRM, к которому привязана запись таймлайна</li>
     * </ul>
     */
    CRM_TIMELINE_LAYOUT_BLOCKS_GET("crm.timeline.layout.blocks.get"),
    /**
     * Метод позволяет REST приложениям удалять установленный им же набор дополнительных контентных блоков для записи таймлайна<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code entityTypeId* integer}</b> - Идентификатор типа сущности, к которому привязана запись таймлайна</li>
     * <li><b>{@code entityId* integer}</b> - Идентификатор сущности, к которой привязана запись таймлайна</li>
     * <li><b>{@code timelineId* integer}</b> - Идентификатор записи таймлайна</li>
     * </ul>
     */
    CRM_TIMELINE_LAYOUT_BLOCKS_DELETE("crm.timeline.layout.blocks.delete"),

// Заметка к записи таймлайна: https://dev.1c-bitrix.ru/rest_help/crm/timeline/note/index.php

    /**
     * Удаление заметки<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code itemId}</b> - Идентификатор записи, из которой нужно удалить заметку. Если itemType=1, то это идентификатор записи истории таймлайна, Если itemType=2, то это идентификатор дела.</li>
     * <li><b>{@code itemType}</b> - Тип записи, из которой нужно удалить заметку: запись истории дело</li>
     * <li><b>{@code ownerId}</b> - Идентификатор элемента, к которому относится запись</li>
     * <li><b>{@code ownerTypeId}</b> - Идентификатор типа элемента (справочник доступных типов), к которому относится запись.</li>
     * </ul>
     */
    CRM_TIMELINE_NOTE_DELETE("crm.timeline.note.delete"),
    /**
     * Информация о заметке<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code itemId}</b> - Идентификатор записи, к которой нужно применить заметку: Если itemType=1, то это идентификатор записи истории таймлайна, Если itemType=2, то это идентификатор дела.</li>
     * <li><b>{@code itemType}</b> - Тип записи, к которой нужно применить заметку: запись истории, дело</li>
     * <li><b>{@code ownerId}</b> - Идентификатор элемента, к которому относится запись</li>
     * <li><b>{@code ownerTypeId}</b> - Идентификатор типа элемента (справочник доступных типов), к которому относится запись.</li>
     * </ul>
     */
    CRM_TIMELINE_NOTE_GET("crm.timeline.note.get"),
    /**
     * Сохранить заметку.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code itemId}</b> - Идентификатор записи, к которой нужно применить заметку. Если itemType=1, то это идентификатор записи истории таймлайна, Если itemType=2, то это идентификатор дела.</li>
     * <li><b>{@code itemType}</b> - Тип записи, к которой нужно применить заметку: запись истории дело</li>
     * <li><b>{@code text}</b> - Текст заметки</li>
     * <li><b>{@code ownerId}</b> - Идентификатор элемента, к которому относится запись</li>
     * <li><b>{@code ownerTypeId}</b> - Идентификатор типа элемента (справочник доступных типов), к которому относится запись</li>
     * </ul>
     */
    CRM_TIMELINE_NOTE_SAVE("crm.timeline.note.save"),

// Записи: https://dev.1c-bitrix.ru/rest_help/crm/timeline/bindings/index.php

    /**
     * Привязывает запись в таймлайне к элементу crm.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array ("поле"=>"значение"[, ...]), содержащий значения полей. Обязательные поля - OWNER_ID, ENTITY_ID и ENTITY_TYPE.</li>
     * </ul>
     */
    CRM_TIMELINE_BINDINGS_BIND("crm.timeline.bindings.bind"),
    /**
     * Возвращает список полей привязки элементов crm к записям в таймлайне.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array ("поле"=>"значение"[, ...]), содержащий значения полей. Обязательные поля - OWNER_ID, ENTITY_ID и ENTITY_TYPE.</li>
     * </ul>
     */
    CRM_TIMELINE_BINDINGS_FIELDS("crm.timeline.bindings.fields"),
    /**
     * Возвращает список привязок к записи в таймлайне.<br>
     */
    CRM_TIMELINE_BINDINGS_LIST("crm.timeline.bindings.list"),
    /**
     * Снимает привязку записи таймлайна с элемента crm.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array ("поле"=>"значение"[, ...]), содержащий значения полей. Обязательные поля - OWNER_ID, ENTITY_ID и ENTITY_TYPE.</li>
     * </ul>
     */
    CRM_TIMELINE_BINDINGS_UNBIND("crm.timeline.bindings.unbind"),

// Комментарии: https://dev.1c-bitrix.ru/rest_help/crm/timeline/comment/index.php

    /**
     * Добавляет новый комментарий в таймлайн.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array ("поле"=>"значение"[, ...]), содержащий значения полей. Обязательные поля - поле ENTITY_ID Поле Описание Тип Примечание ENTITY_ID ID элемента, к которому привязана записи в таймлайне. integer Неизменяемое\Обязательное и ENTITY_TYPE Поле Описание Тип Примечание ENTITY_TYPE Тип элемента, к которому привязан комментарий. Значения: lead - лид; deal - сделка; contact - контакт; company - компания; order - заказ. string Неизменяемое\Обязательное . Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_TIMELINE_COMMENT_FIELDS} и посмотрите формат пришедших значений этих полей.</li>
     * </ul>
     */
    CRM_TIMELINE_COMMENT_ADD("crm.timeline.comment.add"),
    /**
     * Удаляет комментарий.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор комментария в таймлайне.</li>
     * </ul>
     */
    CRM_TIMELINE_COMMENT_DELETE("crm.timeline.comment.delete"),
    /**
     * Возвращает список полей комментария таймлайна.<br>
     */
    CRM_TIMELINE_COMMENT_FIELDS("crm.timeline.comment.fields"),
    /**
     * Возвращает информацию о комментарии.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор комментария в таймлайне.</li>
     * </ul>
     */
    CRM_TIMELINE_COMMENT_GET("crm.timeline.comment.get"),
    /**
     * Возвращает список всех комментариев для определенного crm элемента.<br>
     */
    CRM_TIMELINE_COMMENT_LIST("crm.timeline.comment.list"),
    /**
     * Обновляет комментарий.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор сообщения в таймлайне.</li>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array ("поле"=>"значение"[, ...]), содержащий значения полей. Доступные значения - COMMENT и FILES. Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_TIMELINE_COMMENT_FIELDS} и посмотрите формат пришедших значений этих полей.</li>
     * </ul>
     */
    CRM_TIMELINE_COMMENT_UPDATE("crm.timeline.comment.update"),

// Дела: https://dev.1c-bitrix.ru/rest_help/crm/rest_activity/index.php

    /**
     * Создаёт новое дело.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Массив вида array("поле"=>"значение"[, ...]), содержащий значения полей дел. Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_ACTIVITY_FIELDS} и посмотрите формат пришедших значений этих полей. Имеется дополнительное поле DISABLE_SENDING_MESSAGE_COPY. Оно предназначено для принудительного отключения отправки копии сообщения адресату из MESSAGE_FROM. Если параметр не заполнен или указано любое значение отличное от 'Y' - копия отправлена будет. Пример: [
     * 'fields'=>
     * array (
     * 'SETTINGS'=>array ('DISABLE_SENDING_MESSAGE_COPY'=>'Y')
     * )
     * ]</li>
     * </ul>
     */
    CRM_ACTIVITY_ADD("crm.activity.add"),
    /**
     * Возвращает описание коммуникации для дела.<br>
     */
    CRM_ACTIVITY_COMMUNICATION_FIELDS("crm.activity.communication.fields"),
    /**
     * Удаляет дело.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор активности.</li>
     * </ul>
     */
    CRM_ACTIVITY_DELETE("crm.activity.delete"),
    /**
     * Возвращает описание полей дела.<br>
     */
    CRM_ACTIVITY_FIELDS("crm.activity.fields"),
    /**
     * Возвращает дело по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор активности.</li>
     * </ul>
     */
    CRM_ACTIVITY_GET("crm.activity.get"),
    /**
     * Возвращает список дел по фильтру.<br>
     */
    CRM_ACTIVITY_LIST("crm.activity.list"),
    /**
     * Обновляет существующую дело.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор активности.</li>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("обновляемое поле"=>"значение"[, ...]), где "обновляемое поле" может принимать значения из возвращаемых методом crm.activity.fields. Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_ACTIVITY_FIELDS} и посмотрите формат пришедших значений этих полей.</li>
     * </ul>
     */
    CRM_ACTIVITY_UPDATE("crm.activity.update"),

// Дополнительные контентные блоки: https://dev.1c-bitrix.ru/rest_help/crm/rest_activity/activity_layout_blocks/index.php

    /**
     * Метод позволяет REST Приложениям устанавливать набор дополнительных контентных блоков в дело<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code entityId* integer: entityId* integer}</b> - Идентификатор объекта CRM, к которому привязано дело</li>
     * <li><b>{@code layout* RestAppLayoutDto: layout* RestAppLayoutDto}</b> - Объект, описывающий набор дополнительных контентных блоков</li>
     * <li><b>{@code activityId* integer: activityId* integer}</b> - Идентификатор дела</li>
     * <li><b>{@code entityTypeId* integer: entityTypeId* integer}</b> - Идентификатор типа объекта CRM, к которому привязано дело</li>
     * </ul>
     */
    CRM_ACTIVITY_LAYOUT_BLOCKS_SET("crm.activity.layout.blocks.set"),
    /**
     * Метод позволяет REST Приложениям получать установленный им же набор дополнительных контентных блоков в деле<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code entityId* integer: entityId* integer}</b> - Идентификатор объекта CRM, к которому привязано дело</li>
     * <li><b>{@code activityId* integer: activityId* integer}</b> - Идентификатор дела</li>
     * <li><b>{@code entityTypeId* integer: entityTypeId* integer}</b> - Идентификатор типа объекта CRM, к которому привязано дело</li>
     * </ul>
     */
    CRM_ACTIVITY_LAYOUT_BLOCKS_GET("crm.activity.layout.blocks.get"),
    /**
     * Метод позволяет REST приложениям удалять установленный им же набор дополнительных контентных блоков для дела<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code entityId* integer: entityId* integer}</b> - Идентификатор объекта CRM, к которому привязано дело</li>
     * <li><b>{@code activityId* integer: activityId* integer}</b> - Идентификатор дела</li>
     * <li><b>{@code entityTypeId* integer: entityTypeId* integer}</b> - Идентификатор типа объекта CRM, к которому привязано дело</li>
     * </ul>
     */
    CRM_ACTIVITY_LAYOUT_BLOCKS_DELETE("crm.activity.layout.blocks.delete"),

// Конфигурируемое дело: https://dev.1c-bitrix.ru/rest_help/crm/rest_activity/configurable/index.php

    /**
     * Информация о деле.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ID}</b> - Идентификатор дела</li>
     * </ul>
     */
    CRM_ACTIVITY_CONFIGURABLE_GET("crm.activity.configurable.get"),
    /**
     * Добавить дело<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code layout}</b> - Ассоциативный массив особой структуры, описывающий внешний вид дела в таймлайне</li>
     * <li><b>{@code ownerId}</b> - Идентификатор элемента этой сущности, к которому будет привязано создаваемое дело.</li>
     * <li><b>{@code fields}</b> - Ассоциативный массив полей дела</li>
     * <li><b>{@code ownerTypeId}</b> - Идентификатор типа сущности, к которой будет привязано создаваемое дело.</li>
     * </ul>
     */
    CRM_ACTIVITY_CONFIGURABLE_ADD("crm.activity.configurable.add"),
    /**
     * Обновить дело<br>
     */
    CRM_ACTIVITY_CONFIGURABLE_UPDATE("crm.activity.configurable.update"),

// Подтип Дело: https://dev.1c-bitrix.ru/rest_help/crm/rest_activity/todo/index.php

    /**
     * Добавить дело<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code description}</b> - Текст дела</li>
     * <li><b>{@code responsibleId}</b> - Ответственный за дело</li>
     * <li><b>{@code ownerId}</b> - Идентификатор элемента, к которому относится дело</li>
     * <li><b>{@code deadline}</b> - Крайний срок дела</li>
     * <li><b>{@code ownerTypeId}</b> - Идентификатор типа элемента (справочник доступных типов), к которому относится дело</li>
     * </ul>
     */
    CRM_ACTIVITY_TODO_ADD("crm.activity.todo.add"),
    /**
     * Изменить дедлайн дела<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор дела.</li>
     * <li><b>{@code ownerId}</b> - Идентификатор элемента, к которому относится дело.</li>
     * <li><b>{@code value}</b> - Новый крайний срок дела.</li>
     * <li><b>{@code ownerTypeId}</b> - Идентификатор типа элемента (справочник доступных типов), к которому относится дело.</li>
     * </ul>
     */
    CRM_ACTIVITY_TODO_UPDATEDEADLINE("crm.activity.todo.updateDeadline"),
    /**
     * Изменить текст дела.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор дела</li>
     * <li><b>{@code ownerId}</b> - Идентификатор элемента, к которому относится дело</li>
     * <li><b>{@code value}</b> - Новый текст дела</li>
     * <li><b>{@code ownerTypeId}</b> - Идентификатор типа элемента (справочник доступных типов), к которому относится дело</li>
     * </ul>
     */
    CRM_ACTIVITY_TODO_UPDATEDESCRIPTION("crm.activity.todo.updateDescription"),

// Подтипы дел: https://dev.1c-bitrix.ru/rest_help/crm/rest_activity/type/index.php

    /**
     * Метод для регистрации своего подтипа дел с указанием ему названия и иконки.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TYPE_ID}</b> - Тип дела провайдера (при создании дела это PROVIDER_TYPE_ID)</li>
     * <li><b>{@code IS_CONFIGURABLE_TYPE}</b> - Значение по умолчанию - N. Значение "Y" - признак того, что тип будет использоваться для конфигурируемых дел.</li>
     * <li><b>{@code ICON_FILE}</b> - Файл иконки вашего типа дел</li>
     * <li><b>{@code NAME}</b> - Название вашего типа дел</li>
     * </ul>
     */
    CRM_ACTIVITY_TYPE_ADD("crm.activity.type.add"),
    /**
     * Метод для удаления подтипа дел.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TYPE_ID}</b> - Идентификатор типа дела провайдера</li>
     * </ul>
     */
    CRM_ACTIVITY_TYPE_DELETE("crm.activity.type.delete"),
    /**
     * Метод для получения списка подтипов дел.<br>
     */
    CRM_ACTIVITY_TYPE_LIST("crm.activity.type.list"),

// Управление привязками дел к сущностям CRM: https://dev.1c-bitrix.ru/rest_help/crm/rest_activity/binding/index.php

    /**
     * Получить список привязок<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code activityId}</b> - идентификатор дела</li>
     * </ul>
     */
    CRM_ACTIVITY_BINDING_LIST("crm.activity.binding.list"),
    /**
     * Добавление привязки<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code activityId}</b> - идентификатор дела</li>
     * <li><b>{@code entityTypeId}</b> - идентификатор типа элемента (Справочник доступных типов)</li>
     * <li><b>{@code entityId}</b> - идентификатор элемента</li>
     * </ul>
     */
    CRM_ACTIVITY_BINDING_ADD("crm.activity.binding.add"),
    /**
     * Удаление привязки<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code activityId}</b> - идентификатор дела</li>
     * <li><b>{@code entityTypeId}</b> - идентификатор типа элемента (Справочник доступных типов)</li>
     * <li><b>{@code entityId}</b> - идентификатор элемента</li>
     * </ul>
     */
    CRM_ACTIVITY_BINDING_DELETE("crm.activity.binding.delete"),

// Методы: https://dev.1c-bitrix.ru/rest_help/crm/requisite/methods/index.php

    /**
     * Создаёт новый адрес для реквизита.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("поле"=>"значение"[, ...]), содержащий значения полей адреса. Где "поле" может принимать значения из возвращаемых методом crm.address.fields. Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_ADDRESS_FIELDS} и посмотрите формат пришедших значений этих полей.</li>
     * </ul>
     */
    CRM_ADDRESS_ADD("crm.address.add"),
    /**
     * Удаляет адрес для реквизита.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("поле"=>"значение"[, ...]). Где "поле" может принимать значения из возвращаемых методом {@link #CRM_ADDRESS_FIELDS}.</li>
     * </ul>
     */
    CRM_ADDRESS_DELETE("crm.address.delete"),
    /**
     * Возвращает описание полей адреса.<br>
     */
    CRM_ADDRESS_FIELDS("crm.address.fields"),
    /**
     * Возвращает список адресов по фильтру.<br>
     */
    CRM_ADDRESS_LIST("crm.address.list"),
    /**
     * Обновляет адрес для реквизита.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("обновляемое поле"=>"значение"[, ...]), содержащий значения полей адреса. Где "обновляемое поле" может принимать значения из возвращаемых методом crm.address.fields. Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_ADDRESS_FIELDS} и посмотрите формат пришедших значений этих полей.</li>
     * </ul>
     */
    CRM_ADDRESS_UPDATE("crm.address.update"),
    /**
     * Создаёт новый реквизит.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("поле"=>"значение"[, ...]), содержащий значения полей адреса. Где "поле" может принимать значения из возвращаемых методом {@link #CRM_REQUISITE_FIELDS}. Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_REQUISITE_FIELDS} и посмотрите формат пришедших значений этих полей.</li>
     * </ul>
     */
    CRM_REQUISITE_ADD("crm.requisite.add"),
    /**
     * Создаёт новый банковский реквизит.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("поле"=>"значение"[, ...]), содержащий значения полей адреса. Где "поле" может принимать значения из возвращаемых методом {@link #CRM_REQUISITE_BANKDETAIL_FIELDS}. Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_REQUISITE_BANKDETAIL_FIELDS} и посмотрите формат пришедших значений этих полей. Внимание! В поле ENTITY_ID указывается не ID контакта/компании, а ID реквизита.</li>
     * </ul>
     */
    CRM_REQUISITE_BANKDETAIL_ADD("crm.requisite.bankdetail.add"),
    /**
     * Удаляет банковский реквизит.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор банковского реквизита.</li>
     * </ul>
     */
    CRM_REQUISITE_BANKDETAIL_DELETE("crm.requisite.bankdetail.delete"),
    /**
     * Возвращает описание полей банковских реквизитов.<br>
     */
    CRM_REQUISITE_BANKDETAIL_FIELDS("crm.requisite.bankdetail.fields"),
    /**
     * Возвращает банковский реквизит по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор реквизита.</li>
     * </ul>
     */
    CRM_REQUISITE_BANKDETAIL_GET("crm.requisite.bankdetail.get"),
    /**
     * Возвращает список банковских реквизитов по фильтру.<br>
     */
    CRM_REQUISITE_BANKDETAIL_LIST("crm.requisite.bankdetail.list"),
    /**
     * Обновляет существующий банковский реквизит.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор реквизита.</li>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("обновляемое поле"=>"значение"[, ...]), где "обновляемое поле" может принимать значения из возвращаемых методом crm.requisite.bankdetail.fields. Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_REQUISITE_BANKDETAIL_FIELDS} и посмотрите формат пришедших значений этих полей.</li>
     * </ul>
     */
    CRM_REQUISITE_BANKDETAIL_UPDATE("crm.requisite.bankdetail.update"),
    /**
     * Удаляет реквизит и все связанные с ним объекты.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор реквизита.</li>
     * </ul>
     */
    CRM_REQUISITE_DELETE("crm.requisite.delete"),
    /**
     * Возвращает описание полей реквизита.<br>
     */
    CRM_REQUISITE_FIELDS("crm.requisite.fields"),
    /**
     * Возвращает реквизит по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор реквизита.</li>
     * </ul>
     */
    CRM_REQUISITE_GET("crm.requisite.get"),
    /**
     * Возвращает список реквизитов по фильтру.<br>
     */
    CRM_REQUISITE_LIST("crm.requisite.list"),
    /**
     * Возвращает описание полей для связей реквизитов.<br>
     */
    CRM_REQUISITE_LINK_FIELDS("crm.requisite.link.fields"),
    /**
     * Возвращает связь реквизитов с сущностью.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code entityTypeId}</b> - Идентификатор типа сущности (см. метод {@link #CRM_ENUM_OWNERTYPE}). Для связей реквизитов может быть только сделка, предложение или счёт.</li>
     * <li><b>{@code entityId}</b> - Идентификатор сущности (сделки, предложения или счёта).</li>
     * </ul>
     */
    CRM_REQUISITE_LINK_GET("crm.requisite.link.get"),
    /**
     * Возвращает список связей реквизитов.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter}</b> - Поля фильтра.</li>
     * <li><b>{@code order}</b> - Поля сортировки.</li>
     * </ul>
     */
    CRM_REQUISITE_LINK_LIST("crm.requisite.link.list"),
    /**
     * Регистрирует связь реквизитов с сущностью.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("поле"=>"значение"[, ...]), содержащий значения полей связи реквизитов.</li>
     * </ul>
     */
    CRM_REQUISITE_LINK_REGISTER("crm.requisite.link.register"),
    /**
     * Удаляет связь реквизитов с сущностью.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code entityTypeId}</b> - Идентификатор типа сущности (см. метод {@link #CRM_ENUM_OWNERTYPE}). Для связей реквизитов может быть только сделка, предложение или счёт.</li>
     * <li><b>{@code entityId}</b> - Идентификатор сущности (сделки, предложения или счёта).</li>
     * </ul>
     */
    CRM_REQUISITE_LINK_UNREGISTER("crm.requisite.link.unregister"),
    /**
     * Создаёт новый шаблон.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("поле"=>"значение"[, ...]), содержащий значения полей шаблона. Где "поле" может принимать значения из возвращаемых методом {@link #CRM_REQUISITE_PRESET_FIELDS}. Примечание: чтобы узнать требуемый формат полей, выполните метод crm.requisite.preset.fields и посмотрите формат пришедших значений этих полей.</li>
     * </ul>
     */
    CRM_REQUISITE_PRESET_ADD("crm.requisite.preset.add"),
    /**
     * Возвращает возможный список стран для шаблонов реквизита.<br>
     */
    CRM_REQUISITE_PRESET_COUNTRIES("crm.requisite.preset.countries"),
    /**
     * Удаляет шаблон реквизита по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор шаблона реквизита.</li>
     * </ul>
     */
    CRM_REQUISITE_PRESET_DELETE("crm.requisite.preset.delete"),
    /**
     * Добавляет поле в набор полей шаблона, связанного с реквизитом.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code preset}</b> - Поля шаблона, к которому привязан набор.</li>
     * <li><b>{@code fields}</b> - Описание полей набора.</li>
     * </ul>
     */
    CRM_REQUISITE_PRESET_FIELD_ADD("crm.requisite.preset.field.add"),
    /**
     * Возвращает доступные поля из набора шаблона для определенного реквизита.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code preset}</b> - Поля шаблона, к которому привязан набор.</li>
     * </ul>
     */
    CRM_REQUISITE_PRESET_FIELD_AVAILABLETOADD("crm.requisite.preset.field.availabletoadd"),
    /**
     * Удаляет поле из набора полей шаблона для определенного реквизита.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор поля из набора шаблона.</li>
     * <li><b>{@code preset}</b> - Поля шаблона, к которому привязан набор.</li>
     * </ul>
     */
    CRM_REQUISITE_PRESET_FIELD_DELETE("crm.requisite.preset.field.delete"),
    /**
     * Возвращает описание набора полей шаблона.<br>
     */
    CRM_REQUISITE_PRESET_FIELD_FIELDS("crm.requisite.preset.field.fields"),
    /**
     * Возвращает описание поля из набора полей шаблона для определенного реквизита.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор поля.</li>
     * <li><b>{@code preset}</b> - Поля шаблона, к которому привязан набор полей.</li>
     * </ul>
     */
    CRM_REQUISITE_PRESET_FIELD_GET("crm.requisite.preset.field.get"),
    /**
     * Возвращает список полей из набора полей шаблона для определенного реквизита.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code preset}</b> - Поля шаблона, к которому привязан набор полей.</li>
     * </ul>
     */
    CRM_REQUISITE_PRESET_FIELD_LIST("crm.requisite.preset.field.list"),
    /**
     * Обновляет поле из набора полей шаблона, связанного с реквизитом.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code preset}</b> - Поля шаблона, к которому привязан набор полей.</li>
     * <li><b>{@code fields}</b> - Описание полей из набора.</li>
     * </ul>
     */
    CRM_REQUISITE_PRESET_FIELD_UPDATE("crm.requisite.preset.field.update"),
    /**
     * Возвращает описание полей шаблона реквизитов.<br>
     */
    CRM_REQUISITE_PRESET_FIELDS("crm.requisite.preset.fields"),
    /**
     * Возвращает шаблон реквизита по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор шаблона реквизита.</li>
     * </ul>
     */
    CRM_REQUISITE_PRESET_GET("crm.requisite.preset.get"),
    /**
     * Возвращает список шаблонов по фильтру.<br>
     */
    CRM_REQUISITE_PRESET_LIST("crm.requisite.preset.list"),
    /**
     * Обновляет шаблон реквизита.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("поле"=>"значение"[, ...]), содержащий значения полей шаблона. Где "поле" может принимать значения из возвращаемых методом {@link #CRM_REQUISITE_PRESET_FIELDS}. Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_REQUISITE_PRESET_FIELDS} и посмотрите формат пришедших значений этих полей.</li>
     * </ul>
     */
    CRM_REQUISITE_PRESET_UPDATE("crm.requisite.preset.update"),
    /**
     * Создаёт новое пользовательское поле для реквизита.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("поле"=>"значение"[, ...]), содержащий описание пользовательского поля. Полное описание полей можно получить вызовом метода {@link #CRM_USERFIELD_FIELDS}.</li>
     * <li><b>{@code LIST}</b> - Содержит набор значений списка для пользовательских полей типа Список. Указывается при создании/обновлении поля. Каждое значение представляет собой массив с полями: VALUE - значение элемента списка. Поле является обязательным в случае, когда создается новый элемент. SORT - сортировка. DEF - если равно Y, то элемент списка является значением по-умолчанию. Для множественного поля допустимо несколько DEF=Y. Для не множественного, дефолтным будет считаться первое. XML_ID - внешний код значения. Параметр учитывается только при обновлении уже существующих значений элемента списка. ID - идентификатор значения. Если он указан, то считается что это обновление существующего значения элемента списка, а не создание нового. Имеет смысл только при вызове методов *.userfield.update. DEL - если равно Y, то существующий элемент списка будет удален. Применяется, если заполнен параметр ID.</li>
     * </ul>
     */
    CRM_REQUISITE_USERFIELD_ADD("crm.requisite.userfield.add"),
    /**
     * Удаляет пользовательское поле реквизита.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор пользовательского поля.</li>
     * </ul>
     */
    CRM_REQUISITE_USERFIELD_DELETE("crm.requisite.userfield.delete"),
    /**
     * Возвращает пользовательское поле реквизита по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор пользовательского поля.</li>
     * </ul>
     */
    CRM_REQUISITE_USERFIELD_GET("crm.requisite.userfield.get"),
    /**
     * Возвращает список пользовательских полей реквизита по фильтру.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter}</b> - Поля фильтра.</li>
     * <li><b>{@code order}</b> - Поля сортировки.</li>
     * </ul>
     */
    CRM_REQUISITE_USERFIELD_LIST("crm.requisite.userfield.list"),
    /**
     * Обновляет существующее пользовательское поле реквизита..<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор пользовательского поля.</li>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("обновляемое поле"=>"значение"[, ...]), где "обновляемое поле" может принимать значения из возвращаемых методом {@link #CRM_USERFIELD_FIELDS}.</li>
     * <li><b>{@code LIST}</b> - Содержит набор значений списка для пользовательских полей типа Список. Указывается при создании/обновлении поля. Каждое значение представляет собой массив с полями: VALUE - значение элемента списка. Поле является обязательным в случае, когда создается новый элемент. SORT - сортировка. DEF - если равно Y, то элемент списка является значением по-умолчанию. Для множественного поля допустимо несколько DEF=Y. Для не множественного, дефолтным будет считаться первое. XML_ID - внешний код значения. Параметр учитывается только при обновлении уже существующих значений элемента списка. ID - идентификатор значения. Если он указан, то считается что это обновление существующего значения элемента списка, а не создание нового. Имеет смысл только при вызове методов *.userfield.update. DEL - если равно Y, то существующий элемент списка будет удален. Применяется, если заполнен параметр ID.</li>
     * </ul>
     */
    CRM_REQUISITE_USERFIELD_UPDATE("crm.requisite.userfield.update"),
    /**
     * Обновляет существующий реквизит.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор реквизита.</li>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("обновляемое поле"=>"значение"[, ...]), где "обновляемое поле" может принимать значения из возвращаемых методом {@link #CRM_REQUISITE_FIELDS}. Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_REQUISITE_FIELDS} и посмотрите формат пришедших значений этих полей.</li>
     * </ul>
     */
    CRM_REQUISITE_UPDATE("crm.requisite.update"),

// Документы: https://dev.1c-bitrix.ru/rest_help/crm/documentgenerator/documents/index.php

    /**
     * Возвращает информацию о документе по его идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - ID документа</li>
     * </ul>
     */
    CRM_DOCUMENTGENERATOR_DOCUMENT_GET("crm.documentgenerator.document.get"),
    /**
     * Возвращает список полей документа с их описанием.<br>
     */
    CRM_DOCUMENTGENERATOR_DOCUMENT_GETFIELDS("crm.documentgenerator.document.getfields"),
    /**
     * Возвращает список документов по фильтру.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter}</b> - массив для фильтрации.</li>
     * <li><b>{@code select}</b> - массив полей для вывода.</li>
     * <li><b>{@code start}</b> - offset для постраничной навигации.</li>
     * <li><b>{@code order}</b> - массив для указания порядка вывода {"id": "desc"}.</li>
     * </ul>
     */
    CRM_DOCUMENTGENERATOR_DOCUMENT_LIST("crm.documentgenerator.document.list"),
    /**
     * Удаляет документ.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - идентификатор документа.</li>
     * </ul>
     */
    CRM_DOCUMENTGENERATOR_DOCUMENT_DELETE("crm.documentgenerator.document.delete"),
    /**
     * Создает новый документ на основании шаблона и данных из соответствующей сущности.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code stampsEnabled}</b> - 1 (поставить), 0 (убрать) печати и подписи.</li>
     * <li><b>{@code values}</b> - дополнительные значения полей.</li>
     * <li><b>{@code entityTypeId}</b> - ID типа сущности CRM.</li>
     * <li><b>{@code entityId}</b> - ID сущности.</li>
     * <li><b>{@code templateId}</b> - ID шаблона.</li>
     * </ul>
     */
    CRM_DOCUMENTGENERATOR_DOCUMENT_ADD("crm.documentgenerator.document.add"),
    /**
     * Обновляет существующий документ с новыми значениями.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code stampsEnabled}</b> - 1 (поставить), 0 (убрать) печати и подписи.</li>
     * <li><b>{@code values}</b> - массив новых значений полей документа.</li>
     * <li><b>{@code id}</b> - идентификатор документа.</li>
     * </ul>
     */
    CRM_DOCUMENTGENERATOR_DOCUMENT_UPDATE("crm.documentgenerator.document.update"),
    /**
     * Включает / выключает публичную ссылку на документ.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - идентификатор документа.</li>
     * <li><b>{@code status}</b> - 1 (включить), 0 (выключить) публичную ссылку на документ.</li>
     * </ul>
     */
    CRM_DOCUMENTGENERATOR_DOCUMENT_ENABLEPUBLICURL("crm.documentgenerator.document.enablepublicurl"),
    /**
     * Загружает сформированный документ и прикрепляет его к указанной сущности.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code number}</b> - номер документа.</li>
     * <li><b>{@code imageContent}</b> - контент картинки в base64, не обязательно.</li>
     * <li><b>{@code pdfContent}</b> - контент pdf файла в base64, не обязательно.</li>
     * <li><b>{@code entityTypeId}</b> - ID типа сущности CRM.</li>
     * <li><b>{@code entityId}</b> - ID сущности CRM.</li>
     * <li><b>{@code region}</b> - страна.</li>
     * <li><b>{@code title}</b> - заголовок документа.</li>
     * <li><b>{@code fileContent}</b> - контент docx файла в base64.</li>
     * </ul>
     */
    CRM_DOCUMENTGENERATOR_DOCUMENT_UPLOAD("crm.documentgenerator.document.upload"),

// Шаблоны документов: https://dev.1c-bitrix.ru/rest_help/crm/documentgenerator/tempates/index.php

    /**
     * Возвращает информацию о шаблоне по его идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - ID шаблона</li>
     * </ul>
     */
    CRM_DOCUMENTGENERATOR_TEMPLATE_GET("crm.documentgenerator.template.get"),
    /**
     * Возвращает список полей шаблона с их описанием.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code values}</b> - массив дополнительных значений</li>
     * <li><b>{@code entityTypeId}</b> - ID типа CRM-сущности</li>
     * <li><b>{@code entityId}</b> - ID используемой сущности</li>
     * <li><b>{@code id}</b> - ID шаблона</li>
     * </ul>
     */
    CRM_DOCUMENTGENERATOR_TEMPLATE_GETFIELDS("crm.documentgenerator.template.getfields"),
    /**
     * Возвращает список шаблонов по фильтру.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter}</b> - массив для фильтрации.</li>
     * <li><b>{@code select}</b> - массив полей для вывода. По умолчанию выводит все поля шаблона, кроме users и entityTypeId. Чтобы они появились, надо добавить дополнительно. Например, ['*', 'entityTypeId', 'users'].</li>
     * <li><b>{@code start}</b> - offset для постраничной навигации.</li>
     * <li><b>{@code order}</b> - массив для указания порядка вывода {"id": "desc"}.</li>
     * </ul>
     */
    CRM_DOCUMENTGENERATOR_TEMPLATE_LIST("crm.documentgenerator.template.list"),
    /**
     * Удаляет шаблон.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - идентификатор шаблона</li>
     * </ul>
     */
    CRM_DOCUMENTGENERATOR_TEMPLATE_DELETE("crm.documentgenerator.template.delete"),
    /**
     * Добавляет новый шаблон.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - массив полей шаблона, среди которых: fields[name] - название шаблона (обязательное). fields[file] - контент файла, закодированный в base64 (обязательное). Как альтернативу, контент файла можно передать в multipart / form-data. В этом случае его не надо кодировать в base64. fields[numeratorId] - идентификатор нумератора (обязательное). fields[region] - страна (обязательное). fields[entityTypeId] - массив идентификаторов привязанных сущностей (обязательное). Здесь необходимо передавать код сделки с учетом фильтрации по направлениям. fields[users] - массив прав доступа. fields[active] - Y/N флаг активности. fields[withStamps] - Y/N ставить печати и подписи. fields[sort] - индекс сортировки.</li>
     * </ul>
     */
    CRM_DOCUMENTGENERATOR_TEMPLATE_ADD("crm.documentgenerator.template.add"),
    /**
     * Обновляет существующий шаблон.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - идентификатор шаблона.</li>
     * <li><b>{@code fields}</b> - массив полей. Аналогично методу {@link #CRM_DOCUMENTGENERATOR_TEMPLATE_ADD}, только здесь все поля необязательные.</li>
     * </ul>
     */
    CRM_DOCUMENTGENERATOR_TEMPLATE_UPDATE("crm.documentgenerator.template.update"),

// Нумераторы: https://dev.1c-bitrix.ru/rest_help/crm/documentgenerator/numerator/index.php

    /**
     * Возвращает информацию о нумераторе по его идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - ID нумератора.</li>
     * </ul>
     */
    CRM_DOCUMENTGENERATOR_NUMERATOR_GET("crm.documentgenerator.numerator.get"),
    /**
     * Возвращает список нумераторов.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code start}</b> - offset при запросе, для постраничной навигации.</li>
     * </ul>
     */
    CRM_DOCUMENTGENERATOR_NUMERATOR_LIST("crm.documentgenerator.numerator.list"),
    /**
     * Добавляет новый нумератор.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code template}</b> - Шаблон</li>
     * <li><b>{@code settings}</b> - Настройки генераторов</li>
     * <li><b>{@code name}</b> - Имя</li>
     * </ul>
     */
    CRM_DOCUMENTGENERATOR_NUMERATOR_ADD("crm.documentgenerator.numerator.add"),
    /**
     * Обновляет существующий нумератор с новыми значениями.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - ID нумератора</li>
     * <li><b>{@code fields}</b> - Массив, аналогичный crm.documentgenerator.numerator.add(), только все поля необязательны.</li>
     * </ul>
     */
    CRM_DOCUMENTGENERATOR_NUMERATOR_UPDATE("crm.documentgenerator.numerator.update"),
    /**
     * Удаляет нумератор.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - ID нумератора</li>
     * </ul>
     */
    CRM_DOCUMENTGENERATOR_NUMERATOR_DELETE("crm.documentgenerator.numerator.delete"),

// Настройка карточек сущности: https://dev.1c-bitrix.ru/rest_help/crm/custom_form/index.php

    /**
     * Метод для получения параметров настройки карточки лидов.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code scope}</b> - Область применения настроек. Допустимые значения: P - личные настройки, C - общие настройки</li>
     * <li><b>{@code extras}</b> - Дополнительные параметры. Здесь для лидов может быть задан параметр leadCustomerType, с допустимыми значениями: 1 - простые лиды, 2 - повторные лиды</li>
     * <li><b>{@code userId}</b> - Идентификатор пользователя. Если не задан, то берётся текущий. Нужен только при запросе личных настроек.</li>
     * </ul>
     */
    CRM_LEAD_DETAILS_CONFIGURATION_GET("crm.lead.details.configuration.get"),
    /**
     * Метод устанавливает настройки карточки лидов.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code scope}</b> - Область применения настроек. Допустимые значения: P - личные настройки, C - общие настройки</li>
     * <li><b>{@code extras}</b> - Дополнительные параметры. Здесь для лидов может быть задан параметр leadCustomerType, с допустимыми значениями: 1 - простые лиды, 2 - повторные лиды</li>
     * <li><b>{@code userId}</b> - Идентификатор пользователя. Если не задан, то берётся текущий. Нужен только при установке личных настроек.</li>
     * </ul>
     */
    CRM_LEAD_DETAILS_CONFIGURATION_SET("crm.lead.details.configuration.set"),
    /**
     * Метод сбрасывает настройки карточки лидов.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code scope}</b> - Область применения настроек. Допустимые значения: P - личные настройки, C - общие настройки</li>
     * <li><b>{@code extras}</b> - Дополнительные параметры. Здесь для лидов может быть задан параметр leadCustomerType, с допустимыми значениями: 1 - простые лиды, 2 - повторные лиды</li>
     * <li><b>{@code userId}</b> - Идентификатор пользователя. Если не задан, то берётся текущий. Нужен только при сбросе личных настроек.</li>
     * </ul>
     */
    CRM_LEAD_DETAILS_CONFIGURATION_RESET("crm.lead.details.configuration.reset"),
    /**
     * Метод принудительно устанавливает общую карточку лидов для всех пользователей.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code extras}</b> - Дополнительные параметры. Здесь для лидов может быть задан параметр leadCustomerType, с допустимыми значениями: 1 - простые лиды, 2 - повторные лиды</li>
     * </ul>
     */
    CRM_LEAD_DETAILS_CONFIGURATION_FORCECOMMONSCOPEFORALL("crm.lead.details.configuration.forceCommonScopeForAll"),
    /**
     * Метод для получения настроек карточки сделок.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code scope}</b> - Область применения настроек. Допустимые значения: P - личные настройки, C - общие настройки</li>
     * <li><b>{@code extras}</b> - Дополнительные параметры. Здесь для сделок может быть задан параметр dealCategoryId.</li>
     * <li><b>{@code userId}</b> - Идентификатор пользователя. Если не задан, то берётся текущий. Нужен только при запросе личных настроек.</li>
     * </ul>
     */
    CRM_DEAL_DETAILS_CONFIGURATION_GET("crm.deal.details.configuration.get"),
    /**
     * Метод позволяет установить настройки карточки сделок.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code scope}</b> - Область применения настроек. Допустимые значения: P - личные настройки, C - общие настройки</li>
     * <li><b>{@code extras}</b> - Дополнительные параметры. Здесь для сделок может быть задан параметр dealCategoryId.</li>
     * <li><b>{@code userId}</b> - Идентификатор пользователя. Если не задан, то берётся текущий. Нужен только при установке личных настроек.</li>
     * </ul>
     */
    CRM_DEAL_DETAILS_CONFIGURATION_SET("crm.deal.details.configuration.set"),
    /**
     * Метод для сброса настроек карточки сделок.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code scope}</b> - Область применения настроек. Допустимые значения: P - личные настройки, C - общие настройки</li>
     * <li><b>{@code extras}</b> - Дополнительные параметры. Здесь для сделок может быть задан параметр dealCategoryId.</li>
     * <li><b>{@code userId}</b> - Идентификатор пользователя. Если не задан, то берётся текущий. Нужен только при сбросе личных настроек.</li>
     * </ul>
     */
    CRM_DEAL_DETAILS_CONFIGURATION_RESET("crm.deal.details.configuration.reset"),
    /**
     * Метод принудительно устанавливает общую карточку сделок для всех пользователей.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code extras}</b> - Дополнительные параметры. Здесь для сделок может быть задан параметр dealCategoryId.</li>
     * </ul>
     */
    CRM_DEAL_DETAILS_CONFIGURATION_FORCECOMMONSCOPEFORALL("crm.deal.details.configuration.forceCommonScopeForAll"),
    /**
     * Метод для получения настроек карточки контактов.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code scope}</b> - Область применения настроек. Допустимые значения: P - личные настройки, C - общие настройки</li>
     * <li><b>{@code userId}</b> - Идентификатор пользователя. Если не задан, то берётся текущий. Нужен только при запросе личных настроек.</li>
     * </ul>
     */
    CRM_CONTACT_DETAILS_CONFIGURATION_GET("crm.contact.details.configuration.get"),
    /**
     * Метод устанавливает настройки карточки контактов.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code data}</b> - Массив настроек.</li>
     * <li><b>{@code scope}</b> - Область применения настроек. Допустимые значения: P - личные настройки, C - общие настройки</li>
     * <li><b>{@code userId}</b> - Идентификатор пользователя. Если не задан, то берётся текущий. Нужен только при установке личных настроек.</li>
     * </ul>
     */
    CRM_CONTACT_DETAILS_CONFIGURATION_SET("crm.contact.details.configuration.set"),
    /**
     * Метод для сброса настроек карточки контактов.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code scope}</b> - Область применения настроек. Допустимые значения: P - личные настройки, C - общие настройки</li>
     * <li><b>{@code userId}</b> - Идентификатор пользователя. Если не задан, то берётся текущий. Нужен только при сбросе личных настроек.</li>
     * </ul>
     */
    CRM_CONTACT_DETAILS_CONFIGURATION_RESET("crm.contact.details.configuration.reset"),
    /**
     * Метод позволяет принудительно установить общую карточку контакта для всех пользователей.<br>
     */
    CRM_CONTACT_DETAILS_CONFIGURATION_FORCECOMMONSCOPEFORALL("crm.contact.details.configuration.forceCommonScopeForAll"),
    /**
     * Метод для получения настроек карточки компаний.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code scope}</b> - Область применения настроек. Допустимые значения: P - личные настройки, C - общие настройки</li>
     * <li><b>{@code userId}</b> - Идентификатор пользователя. Если не задан, то берётся текущий. Нужен только при запросе личных настроек.</li>
     * </ul>
     */
    CRM_COMPANY_DETAILS_CONFIGURATION_GET("crm.company.details.configuration.get"),
    /**
     * Метод устанавливает настройки карточки компаний.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code data}</b> - Массив параметров.</li>
     * <li><b>{@code scope}</b> - Область применения настроек. Допустимые значения: P - личные настройки, C - общие настройки</li>
     * <li><b>{@code userId}</b> - Идентификатор пользователя. Если не задан, то берётся текущий. Нужен только при установке личных настроек.</li>
     * </ul>
     */
    CRM_COMPANY_DETAILS_CONFIGURATION_SET("crm.company.details.configuration.set"),
    /**
     * Метод для сброса настроек карточки компаний.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code scope}</b> - Область применения настроек. Допустимые значения: P - личные настройки, C - общие настройки</li>
     * <li><b>{@code userId}</b> - Идентификатор пользователя. Если не задан, то берётся текущий. Нужен только при сбросе личных настроек.</li>
     * </ul>
     */
    CRM_COMPANY_DETAILS_CONFIGURATION_RESET("crm.company.details.configuration.reset"),
    /**
     * Метод позволяет принудительно установить общую карточку компаний для всех пользователей.<br>
     */
    CRM_COMPANY_DETAILS_CONFIGURATION_FORCECOMMONSCOPEFORALL("crm.company.details.configuration.forceCommonScopeForAll"),

// Пользовательские поля: https://dev.1c-bitrix.ru/rest_help/crm/userfields/index.php

    /**
     * Возвращает описание полей для пользовательских полей.<br>
     */
    CRM_USERFIELD_FIELDS("crm.userfield.fields"),
    /**
     * Возвращает список типов пользовательских полей.<br>
     */
    CRM_USERFIELD_TYPES("crm.userfield.types"),
    /**
     * Возвращает описание полей для пользовательского поля типа "enumeration" (список).<br>
     */
    CRM_USERFIELD_ENUMERATION_FIELDS("crm.userfield.enumeration.fields"),
    /**
     * Возвращает описание полей настроек для типа пользовательского поля.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code type}</b> - Tип пользовательского поля. Значение из списка возвращаемого методом {@link #CRM_USERFIELD_TYPES}.</li>
     * </ul>
     */
    CRM_USERFIELD_SETTINGS_FIELDS("crm.userfield.settings.fields"),

// Автоматизация: https://dev.1c-bitrix.ru/rest_help/crm/automation/index.php

    /**
     * Активирует триггер Webhook, настроенный в автоматизации CRM.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code code}</b> - Уникальный символьный код триггера, настроенного в Автоматизации на конкретный статус/стадию документа.</li>
     * <li><b>{@code target}</b> - Целевой объект для автоматизации, указывается в виде TYPENAME_ID (например, LEAD_25).</li>
     * </ul>
     */
    CRM_AUTOMATION_TRIGGER("crm.automation.trigger"),

// Триггеры приложений: https://dev.1c-bitrix.ru/rest_help/crm/automation/trigger_application/index.php

    /**
     * Метод добавляет триггер.<br>
     */
    CRM_AUTOMATION_TRIGGER_ADD("crm.automation.trigger.add"),
    /**
     * Метод удаляет триггер.<br>
     */
    CRM_AUTOMATION_TRIGGER_DELETE("crm.automation.trigger.delete"),
    /**
     * Метод для получения списка приложений и триггеров<br>
     */
    CRM_AUTOMATION_TRIGGER_LIST("crm.automation.trigger.list"),
    /**
     * Метод, запускающий выполнение триггера<br>
     */
    CRM_AUTOMATION_TRIGGER_EXECUTE("crm.automation.trigger.execute"),

// Внешние каналы: https://dev.1c-bitrix.ru/rest_help/crm/externalchannel/index.php

    /**
     * Создает дело "Документ от компании".<br>
     */
    CRM_EXTERNALCHANNEL_ACTIVITY_COMPANY("crm.externalchannel.activity.company"),
    /**
     * Создает дело "Документ от контакта".<br>
     */
    CRM_EXTERNALCHANNEL_ACTIVITY_CONTACT("crm.externalchannel.activity.contact"),
    /**
     * Импортирует Компанию и создает дело "Импорт компании".<br>
     */
    CRM_EXTERNALCHANNEL_COMPANY("crm.externalchannel.company"),
    /**
     * Импортирует Контакт и создает дело "Импорт контакта".<br>
     */
    CRM_EXTERNALCHANNEL_CONTACT("crm.externalchannel.contact"),
    /**
     * Регистрирует коннектор внешнего канала.<br>
     */
    CRM_EXTERNALCHANNEL_CONNECTOR_REGISTER("crm.externalchannel.connector.register"),
    /**
     * Удаляет коннектор внешнего канала.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("поле"=>"значение"[, ...]), содержащий значения полей адреса. Где "поле" может принимать два значения "TYPE_ID", "ORIGINATOR_ID"</li>
     * </ul>
     */
    CRM_EXTERNALCHANNEL_CONNECTOR_UNREGISTER("crm.externalchannel.connector.unregister"),

// Каталог: https://dev.1c-bitrix.ru/rest_help/crm/catalog/index.php

    /**
     * Возвращает описание полей каталога товаров.<br>
     */
    CRM_CATALOG_FIELDS("crm.catalog.fields"),
    /**
     * Возвращает товарный каталог по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор товарного каталога.</li>
     * </ul>
     */
    CRM_CATALOG_GET("crm.catalog.get"),
    /**
     * Возвращает список товарных каталогов.<br>
     */
    CRM_CATALOG_LIST("crm.catalog.list"),

// Валюты: https://dev.1c-bitrix.ru/rest_help/crm/currency/index.php

    /**
     * Создаёт новую валюту.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("поле"=>"значение"[, ...]), содержащий значения полей валюты, где "поле" может принимать значения из возвращаемых методом crm.currency.fields. Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_CURRENCY_FIELDS} и посмотрите формат пришедших значений этих полей.</li>
     * </ul>
     */
    CRM_CURRENCY_ADD("crm.currency.add"),
    /**
     * Удаляет валюту.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Символьный идентификатор валюты.</li>
     * </ul>
     */
    CRM_CURRENCY_DELETE("crm.currency.delete"),
    /**
     * Возвращает описание полей валюты.<br>
     */
    CRM_CURRENCY_FIELDS("crm.currency.fields"),
    /**
     * Возвращает валюту по символьному идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Символьный идентификатор валюты.</li>
     * </ul>
     */
    CRM_CURRENCY_GET("crm.currency.get"),
    /**
     * Возвращает список валют.<br>
     */
    CRM_CURRENCY_LIST("crm.currency.list"),
    /**
     * Удаляет выбранные локализации для валюты, указанной по символьному идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Символьный идентификатор валюты.</li>
     * <li><b>{@code lids}</b> - Массив идентификаторов языков, локализации которых требуется удалить.</li>
     * </ul>
     */
    CRM_CURRENCY_LOCALIZATIONS_DELETE("crm.currency.localizations.delete"),
    /**
     * Возвращает локализации для валюты, указанной по символьному идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Символьный идентификатор валюты.</li>
     * </ul>
     */
    CRM_CURRENCY_LOCALIZATIONS_GET("crm.currency.localizations.get"),
    /**
     * Устанавливает локализации для валюты, указанной по символьному идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code localizations}</b> - Набор локализаций - массив вида array("язык" => array("поле"=>"значение"[, ...])), содержащий значения полей локализаций, где "язык" - идентификатор языка, "поле" - одно из возвращаемых методом {@link #CRM_CURRENCY_LOCALIZATIONS_FIELDS} значений.</li>
     * <li><b>{@code id}</b> - Символьный идентификатор валюты.</li>
     * </ul>
     */
    CRM_CURRENCY_LOCALIZATIONS_SET("crm.currency.localizations.set"),
    /**
     * Возвращает описание локализаций для валюты.<br>
     */
    CRM_CURRENCY_LOCALIZATIONS_FIELDS("crm.currency.localizations.fields"),
    /**
     * Обновляет существующую валюту.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Символьный идентификатор валюты.</li>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("обновляемое поле"=>"значение"[, ...]), где "обновляемое поле" может принимать значения из возвращаемых методом {@link #CRM_CURRENCY_FIELDS}. Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_CURRENCY_FIELDS} и посмотрите формат пришедших значений этих полей.</li>
     * </ul>
     */
    CRM_CURRENCY_UPDATE("crm.currency.update"),
    /**
     * Метод позволяет получить символьный идентификатор базовой валюты.<br>
     */
    CRM_CURRENCY_BASE_GET("crm.currency.base.get"),
    /**
     * Метод устанавливает валюту в качестве базовой.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Символьный код валюты, которую необходимо сделать базовой</li>
     * </ul>
     */
    CRM_CURRENCY_BASE_SET("crm.currency.base.set"),

// Единицы измерения: https://dev.1c-bitrix.ru/rest_help/crm/measure/index.php

    /**
     * Добавляет новую единицу измерения.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("поле"=>"значение"[, ...]), содержащий значения полей единицы измерения. Примечание: чтобы узнать требуемый формат полей, выполните метод crm.measure.fields и посмотрите формат пришедших значений этих полей. Поля для добавления единицы измерения: CODE - Код; MEASURE_TITLE - Наименование единицы измерения; SYMBOL_RUS - Условное обозначение; SYMBOL_INTL - Условное обозначение (международное); SYMBOL_LETTER_INTL - Кодовое буквенное обозначение (международное); IS_DEFAULT - По умолчанию.</li>
     * </ul>
     */
    CRM_MEASURE_ADD("crm.measure.add"),
    /**
     * Удаляет единицу измерения.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор единицы измерения.</li>
     * </ul>
     */
    CRM_MEASURE_DELETE("crm.measure.delete"),
    /**
     * Возвращает описание полей для единиц измерений.<br>
     */
    CRM_MEASURE_FIELDS("crm.measure.fields"),
    /**
     * Возвращает единицу измерения по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор единицы измерения.</li>
     * </ul>
     */
    CRM_MEASURE_GET("crm.measure.get"),
    /**
     * Возвращает список единиц измерений.<br>
     */
    CRM_MEASURE_LIST("crm.measure.list"),
    /**
     * Обновляет существующую единицу измерения.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор единицы измерения.</li>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("обновляемое поле"=>"значение"[, ...]), где "обновляемое поле" может принимать значения из возвращаемых методом {@link #CRM_MEASURE_FIELDS}. Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_MEASURE_FIELDS} и посмотрите формат пришедших значений этих полей.</li>
     * </ul>
     */
    CRM_MEASURE_UPDATE("crm.measure.update"),

// Разделы товаров: https://dev.1c-bitrix.ru/rest_help/crm/product_section/index.php

    /**
     * Создаёт новый раздел товаров.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("поле"=>"значение"[, ...]), содержащий значения полей раздела товаров. Примечание: чтобы узнать требуемый формат полей, выполните метод crm.productsection.fields и посмотрите формат пришедших значений этих полей.</li>
     * </ul>
     */
    CRM_PRODUCTSECTION_ADD("crm.productsection.add"),
    /**
     * Удаляет раздел товаров.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор раздела товаров.</li>
     * </ul>
     */
    CRM_PRODUCTSECTION_DELETE("crm.productsection.delete"),
    /**
     * Возвращает описание полей раздела товара.<br>
     */
    CRM_PRODUCTSECTION_FIELDS("crm.productsection.fields"),
    /**
     * Возвращает раздел товаров по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор раздела товаров.</li>
     * </ul>
     */
    CRM_PRODUCTSECTION_GET("crm.productsection.get"),
    /**
     * Возвращает список разделов товаров по фильтру.<br>
     */
    CRM_PRODUCTSECTION_LIST("crm.productsection.list"),
    /**
     * Обновляет существующий раздел товаров.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор раздела товаров.</li>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("обновляемое поле"=>"значение"[, ...]), где "обновляемое поле" может принимать значения из возвращаемых методом {@link #CRM_PRODUCTSECTION_FIELDS}. Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_PRODUCTSECTION_FIELDS} и посмотрите формат пришедших значений этих полей.</li>
     * </ul>
     */
    CRM_PRODUCTSECTION_UPDATE("crm.productsection.update"),

// Товарные позиции: https://dev.1c-bitrix.ru/rest_help/crm/productrow/index.php

    /**
     * Получение информации о полях товарных позиций<br>
     */
    CRM_ITEM_PRODUCTROW_FIELDS("crm.item.productrow.fields"),
    /**
     * Получение информацию о товарной позиции с идентификатором id.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор товарной позиции</li>
     * </ul>
     */
    CRM_ITEM_PRODUCTROW_GET("crm.item.productrow.get"),
    /**
     * Метод создает новую товарную позицию.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - значение полей товарной позиции</li>
     * </ul>
     */
    CRM_ITEM_PRODUCTROW_ADD("crm.item.productrow.add"),
    /**
     * Метод обновит товарную позицию с идентификатором id<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор товарной позиции</li>
     * <li><b>{@code fields}</b> - Значение полей товарной позиции, которые необходимо изменить</li>
     * </ul>
     */
    CRM_ITEM_PRODUCTROW_UPDATE("crm.item.productrow.update"),
    /**
     * Метод привяжет товарные позиции к элементу CRM.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ownerType}</b> - Символьный код типа сущности CRM. Узнать, какому типу сущности соответствует конкретный код можно через методы класса \CCrmOwnerTypeAbbr.</li>
     * <li><b>{@code ownerId}</b> - Идентификатор элемента CRM</li>
     * <li><b>{@code productRows}</b> - Массив товарных позиций. Каждый элемент массива - объект с данными, аналогичными fields из {@link #CRM_ITEM_PRODUCTROW_ADD}.</li>
     * </ul>
     */
    CRM_ITEM_PRODUCTROW_SET("crm.item.productrow.set"),
    /**
     * Метод удалит товарную позицию.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор товарной позиции</li>
     * </ul>
     */
    CRM_ITEM_PRODUCTROW_DELETE("crm.item.productrow.delete"),
    /**
     * Фильтрация списка товарных позиций.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter}</b> - Список для фильтрации. Примеры фильтров ниже. Ключи =ownerType и =ownerId являются обязательными.</li>
     * <li><b>{@code start}</b> - Сдвиг для постраничной навигации.</li>
     * <li><b>{@code order}</b> - Список для сортировки, где ключ — поле, а значение - ASC или DESC.</li>
     * </ul>
     */
    CRM_ITEM_PRODUCTROW_LIST("crm.item.productrow.list"),
    /**
     * Получает список товаров, по которым ещё не была выставлена оплата.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ownerType}</b> - Символьный код типа сущности CRM. Узнать, какому типу сущности соответствует конкретный код, можно через методы класса \CCrmOwnerTypeAbbr.</li>
     * <li><b>{@code ownerId}</b> - Идентификатор элемента CRM.</li>
     * </ul>
     */
    CRM_ITEM_PRODUCTROW_GETAVAILABLEFORPAYMENT("crm.item.productrow.getAvailableForPayment"),

// Товары: https://dev.1c-bitrix.ru/rest_help/crm/products/index.php

    /**
     * Создаёт новый товар.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("поле"=>"значение"[, ...]), содержащий значения полей товара. Необходимо обязательно указать CURRENCY_ID для установки цены. Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_PRODUCT_FIELDS} и посмотрите формат пришедших значений этих полей.</li>
     * </ul>
     */
    CRM_PRODUCT_ADD("crm.product.add"),
    /**
     * Удаляет товар.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор товара.</li>
     * </ul>
     */
    CRM_PRODUCT_DELETE("crm.product.delete"),
    /**
     * Возвращает описание полей товара.<br>
     */
    CRM_PRODUCT_FIELDS("crm.product.fields"),
    /**
     * Возвращает товар по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор товара.</li>
     * </ul>
     */
    CRM_PRODUCT_GET("crm.product.get"),
    /**
     * Возвращает список товаров по фильтру.<br>
     */
    CRM_PRODUCT_LIST("crm.product.list"),
    /**
     * Обновляет существующий товар.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор товара.</li>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("обновляемое поле"=>"значение"[, ...]), где "обновляемое поле" может принимать значения из возвращаемых методом {@link #CRM_PRODUCT_FIELDS}. Необходимо обязательно указать CURRENCY_ID для установки цены. Примечание: чтобы узнать требуемый формат полей, выполните метод {@link #CRM_PRODUCT_FIELDS} и посмотрите формат пришедших значений этих полей.</li>
     * </ul>
     */
    CRM_PRODUCT_UPDATE("crm.product.update"),
    /**
     * Возвращает список типов свойств товаров.<br>
     */
    CRM_PRODUCT_PROPERTY_TYPES("crm.product.property.types"),
    /**
     * Возвращает описание полей для свойств товаров.<br>
     */
    CRM_PRODUCT_PROPERTY_FIELDS("crm.product.property.fields"),
    /**
     * Возвращает описание полей дополнительных настроек свойства товаров пользовательского типа.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code propertyType}</b> - Тип свойства.</li>
     * <li><b>{@code userType}</b> - Пользовательский тип свойства.</li>
     * </ul>
     */
    CRM_PRODUCT_PROPERTY_SETTINGS_FIELDS("crm.product.property.settings.fields"),
    /**
     * Возвращает описание полей элемента свойства товаров списочного типа.<br>
     */
    CRM_PRODUCT_PROPERTY_ENUMERATION_FIELDS("crm.product.property.enumeration.fields"),
    /**
     * Создаёт новое свойство товаров.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("поле"=>"значение"[, ...]), содержащий описание свойства товаров.</li>
     * </ul>
     */
    CRM_PRODUCT_PROPERTY_ADD("crm.product.property.add"),
    /**
     * Возвращает свойство товаров по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор свойства товаров.</li>
     * </ul>
     */
    CRM_PRODUCT_PROPERTY_GET("crm.product.property.get"),
    /**
     * Возвращает список свойств товаров.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter}</b> - Поля фильтра.</li>
     * <li><b>{@code order}</b> - Поля сортировки.</li>
     * </ul>
     */
    CRM_PRODUCT_PROPERTY_LIST("crm.product.property.list"),
    /**
     * Обновляет существующее свойство товаров.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор свойства товаров.</li>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("обновляемое поле"=>"значение"[, ...]), где "обновляемое поле" может принимать значения из возвращаемых методом crm.product.property.fields.</li>
     * </ul>
     */
    CRM_PRODUCT_PROPERTY_UPDATE("crm.product.property.update"),
    /**
     * Удаляет свойство товаров.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор свойства товаров.</li>
     * </ul>
     */
    CRM_PRODUCT_PROPERTY_DELETE("crm.product.property.delete"),

// Оплаты: https://dev.1c-bitrix.ru/rest_help/crm/payment/index.php

    /**
     * Добавляет новую оплату.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code entityId}</b> - Идентификатор сущности CRM.</li>
     * <li><b>{@code entityTypeId}</b> - Идентификатор типа сущности CRM согласно Справочнику доступных типов.</li>
     * <li><b>{@code fields}</b> - Поле paySystemId – идентификатор платёжной системы.</li>
     * </ul>
     */
    CRM_ITEM_PAYMENT_ADD("crm.item.payment.add"),
    /**
     * Удаляет оплату.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор оплаты.</li>
     * </ul>
     */
    CRM_ITEM_PAYMENT_DELETE("crm.item.payment.delete"),
    /**
     * Получает информацию о конкретной оплате по её идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор оплаты.</li>
     * </ul>
     */
    CRM_ITEM_PAYMENT_GET("crm.item.payment.get"),
    /**
     * Получает список оплат.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code start}</b> - Тип String. Сколько первых записей пропускать в результате. Значение должно быть кратно 50 В связи с техническими ограничениями значение этого параметра всегда должно быть кратно 50. Например, при значении 50 в результате будут отображаться 51-я запись и последующие, а первые 50 записей будут пропущены. . При значении -1 будет отключён подсчёт количества.</li>
     * <li><b>{@code entityId}</b> - Идентификатор сущности CRM.</li>
     * <li><b>{@code entityTypeId}</b> - Идентификатор типа сущности CRM согласно Справочнику доступных типов.</li>
     * <li><b>{@code order}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * </ul>
     */
    CRM_ITEM_PAYMENT_LIST("crm.item.payment.list"),
    /**
     * Меняет статус оплаты на «Оплачено».<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор оплаты.</li>
     * </ul>
     */
    CRM_ITEM_PAYMENT_PAY("crm.item.payment.pay"),
    /**
     * Меняет статус оплаты на «Не оплачено».<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор оплаты.</li>
     * </ul>
     */
    CRM_ITEM_PAYMENT_UNPAY("crm.item.payment.unpay"),
    /**
     * Обновляет информацию об оплате.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор оплаты.</li>
     * <li><b>{@code fields}</b> - Поле paySystemId – идентификатор платёжной системы.</li>
     * </ul>
     */
    CRM_ITEM_PAYMENT_UPDATE("crm.item.payment.update"),

// Товарные позиции в оплате: https://dev.1c-bitrix.ru/rest_help/crm/payment/product/index.php

    /**
     * Добавляет товар в оплату.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code quantity}</b> - Количество товара.</li>
     * <li><b>{@code paymentId}</b> - Идентификатор оплаты.</li>
     * <li><b>{@code rowId}</b> - Идентификатор товарной позиции в сущности. Можно получить из crm.item.productrow.list.</li>
     * </ul>
     */
    CRM_ITEM_PAYMENT_PRODUCT_ADD("crm.item.payment.product.add"),
    /**
     * Удаляет товар из оплаты.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор товарной позиции в оплате.</li>
     * </ul>
     */
    CRM_ITEM_PAYMENT_PRODUCT_DELETE("crm.item.payment.product.delete"),
    /**
     * Получает список товарных позиций (товары или услуги) в оплате.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter}</b> - Список для фильтрации.</li>
     * <li><b>{@code paymentId}</b> - Идентификатор оплаты.</li>
     * <li><b>{@code start}</b> - Тип String. Сколько первых записей пропускать в результате. Значение должно быть кратно 50 В связи с техническими ограничениями значение этого параметра всегда должно быть кратно 50. Например, при значении 50 в результате будут отображаться 51-я запись и последующие, а первые 50 записей будут пропущены. . При значении -1 будет отключён подсчёт количества.</li>
     * <li><b>{@code order}</b> - Список для сортировки, где ключ – поле, а значение – ASC или DESC.</li>
     * </ul>
     */
    CRM_ITEM_PAYMENT_PRODUCT_LIST("crm.item.payment.product.list"),
    /**
     * Изменяет количество товара в оплате.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code quantity}</b> - Количество товара.</li>
     * <li><b>{@code id}</b> - Идентификатор товарной позиции в оплате.</li>
     * </ul>
     */
    CRM_ITEM_PAYMENT_PRODUCT_SETQUANTITY("crm.item.payment.product.setQuantity"),

// Доставки в оплате: https://dev.1c-bitrix.ru/rest_help/crm/payment/delivery/index.php

    /**
     * Добавляет доставку в оплату.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code deliveryId}</b> - Идентификатор доставки.</li>
     * <li><b>{@code paymentId}</b> - Идентификатор оплаты.</li>
     * </ul>
     */
    CRM_ITEM_PAYMENT_DELIVERY_ADD("crm.item.payment.delivery.add"),
    /**
     * Удаляет доставку из оплаты.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор оплаты.</li>
     * </ul>
     */
    CRM_ITEM_PAYMENT_DELIVERY_DELETE("crm.item.payment.delivery.delete"),
    /**
     * Изменяет информацию о доставке в оплате.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code deliveryId}</b> - Идентификатор доставки.</li>
     * <li><b>{@code id}</b> - Идентификатор оплаты.</li>
     * </ul>
     */
    CRM_ITEM_PAYMENT_DELIVERY_SETDELIVERY("crm.item.payment.delivery.setDelivery"),

// Доставки: https://dev.1c-bitrix.ru/rest_help/crm/delivery/index.php

    /**
     * Получает информацию о конкретной доставке по её идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор доставки.</li>
     * </ul>
     */
    CRM_ITEM_DELIVERY_GET("crm.item.delivery.get"),
    /**
     * Получает список доставок.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter}</b> - Список для фильтрации.</li>
     * <li><b>{@code start}</b> - Тип String. Сколько первых записей пропускать в результате. Значение должно быть кратно 50 В связи с техническими ограничениями значение этого параметра всегда должно быть кратно 50. Например, при значении 50 в результате будут отображаться 51-я запись и последующие, а первые 50 записей будут пропущены. . При значении -1 будет отключён подсчёт количества.</li>
     * <li><b>{@code entityId}</b> - Идентификатор сущности CRM.</li>
     * <li><b>{@code entityTypeId}</b> - Идентификатор типа сущности CRM согласно Справочнику доступных типов.</li>
     * <li><b>{@code order}</b> - Список для сортировки, где ключ – поле, а значение – ASC или DESC.</li>
     * </ul>
     */
    CRM_ITEM_DELIVERY_LIST("crm.item.delivery.list"),

// Цифровые рабочие места: https://dev.1c-bitrix.ru/rest_help/crm/automated_solution/index.php

    /**
     * Создать цифровое рабочее место<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields* object}</b> - Значения полей (подробное описание приведено ниже) для создания цифрового рабочего места в виде структуры:
     * "fields": {
     * "title": "значение",
     * "typeIds": []
     * }</li>
     * </ul>
     */
    CRM_AUTOMATEDSOLUTION_ADD("crm.automatedsolution.add"),
    /**
     * Изменить цифровое рабочее место<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields* object}</b> - Значения полей (подробное описание приведено ниже) для создания цифрового рабочего места в виде структуры:
     * "fields": {
     * "title": "значение",
     * "typeIds": []
     * }</li>
     * <li><b>{@code id* integer}</b> - Идентификатор цифрового рабочего места. Может быть получен из ответа метода {@link #CRM_AUTOMATEDSOLUTION_ADD} (result.automatedSolution.id), который был вызван при добавлении цифрового рабочего места, или {@link #CRM_AUTOMATEDSOLUTION_LIST}. Так же можно воспользоваться разделом «Цифровые рабочие места» на портале Битрикс24 — колонка ID в списке цифровых рабочих мест</li>
     * </ul>
     */
    CRM_AUTOMATEDSOLUTION_UPDATE("crm.automatedsolution.update"),
    /**
     * Получить данные о цифровом рабочем месте по id<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id* integer}</b> - Идентификатор цифрового рабочего места</li>
     * </ul>
     */
    CRM_AUTOMATEDSOLUTION_GET("crm.automatedsolution.get"),
    /**
     * Получить список цифровых рабочих мест<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code start integer}</b> - Параметр используется для управления постраничной навигацией. Размер страницы результатов всегда статичный: 50 записей. Чтобы выбрать вторую страницу результатов необходимо передавать значение 50. Чтобы выбрать третью страницу результатов значение — 100 и так далее. Формула расчета значения параметра start: start = (N-1) * 50, где N — номер нужной страницы</li>
     * <li><b>{@code filter object}</b> - Объект для фильтрации выбранных цифровых рабочих мест в формате {"field_1": "value_1", ... "field_N": "value_N"}. Доступные для фильтрации поля: id title Фильтр может иметь неограниченную вложенность и количество условий. По умолчанию все условия соединяются друг с другом как AND (логическое И). Если нужно использовать OR (Логическое ИЛИ), то можно передать специальный ключ logic со значением OR. Ключу может быть задан дополнительный префикс, уточняющий поведение фильтра. Возможные значения префикса: >= — больше либо равно > — больше <= — меньше либо равно < — меньше % — LIKE, поиск по подстроке. Символ % в значении фильтра передавать не нужно. Поиск ищет подстроку в любой позиции строки =% — LIKE, поиск по подстроке. Символ % нужно передавать в значении. Примеры: "мол%" — ищем значения, начинающиеся с «мол» "%мол" — ищем значения, заканчивающиеся на «мол» "%мол%" — ищем значения, где «мол» может быть в любой позиции %= — LIKE (см. описание выше) !% — NOT LIKE, поиск по подстроке. Символ % в значении фильтра передавать не нужно. Поиск идет с обоих сторон. =% — NOT LIKE, поиск по подстроке. Символ % нужно передавать в значении. Примеры: "мол%" — ищем значения, не начинающиеся с «мол» "%мол" — ищем значения, не заканчивающиеся на «мол» "%мол%" — ищем значения, где подстроки «мол» нет в любой позиции !%= — NOT LIKE (см. описание выше) = — равно, точное совпадение (используется по умолчанию) != - не равно</li>
     * <li><b>{@code order object}</b> - Список для сортировки в формате {"field_1": "value_1", ... "field_N": "value_N"}, где ключ — поле, а значение — ASC или DESC. Доступные для сортировки поля: id title</li>
     * </ul>
     */
    CRM_AUTOMATEDSOLUTION_LIST("crm.automatedsolution.list"),
    /**
     * Удалить цифровое рабочее место<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id* integer}</b> - Идентификатор цифрового рабочего места. Может быть получен из ответа метода {@link #CRM_AUTOMATEDSOLUTION_ADD} (result.automatedSolution.id), который был вызван при добавлении цифрового рабочего места, или {@link #CRM_AUTOMATEDSOLUTION_LIST}. Так же можно воспользоваться разделом «Цифровые рабочие места» на портале Битрикс24 — колонка ID в списке цифровых рабочих мест</li>
     * </ul>
     */
    CRM_AUTOMATEDSOLUTION_DELETE("crm.automatedsolution.delete"),
    /**
     * Получить поля цифрового рабочего места<br>
     */
    CRM_AUTOMATEDSOLUTION_FIELDS("crm.automatedsolution.fields"),

// Перечисления: https://dev.1c-bitrix.ru/rest_help/crm/auxiliary/enum/index.php

    /**
     * Возвращает описание полей перечисления<br>
     */
    CRM_ENUM_FIELDS("crm.enum.fields"),
    /**
     * Возвращает элементы перечисления "Тип владельца".<br>
     */
    CRM_ENUM_OWNERTYPE("crm.enum.ownertype"),
    /**
     * Возвращает элементы перечисления "Тип содержания".<br>
     */
    CRM_ENUM_CONTENTTYPE("crm.enum.contenttype"),
    /**
     * Возвращает элементы перечисления "Тип активности".<br>
     */
    CRM_ENUM_ACTIVITYTYPE("crm.enum.activitytype"),
    /**
     * Возвращает элементы перечисления "Приоритет активности".<br>
     */
    CRM_ENUM_ACTIVITYPRIORITY("crm.enum.activitypriority"),
    /**
     * Возвращает элементы перечисления "Направление активности" (для писем и звонков).<br>
     */
    CRM_ENUM_ACTIVITYDIRECTION("crm.enum.activitydirection"),
    /**
     * Возвращает элементы перечисления "Тип уведомления о начале активности" (для встреч и звонков).<br>
     */
    CRM_ENUM_ACTIVITYNOTIFYTYPE("crm.enum.activitynotifytype"),
    /**
     * Возвращает элементы перечисления "Тип адреса".<br>
     */
    CRM_ENUM_ADDRESSTYPE("crm.enum.addresstype"),
    /**
     * Возвращает элементы перечисления "Статус" (STATUS).<br>
     */
    CRM_ENUM_ACTIVITYSTATUS("crm.enum.activitystatus"),
    /**
     * Возвращает описание режимов работы CRM.<br>
     */
    CRM_ENUM_SETTINGS_MODE("crm.enum.settings.mode"),

// Справочники: https://dev.1c-bitrix.ru/rest_help/crm/auxiliary/status/index.php

    /**
     * Создаёт новый элемент в указанном справочнике.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("поле"=>"значение"[, ...]), содержащий значения полей справочника. (Обязательный)</li>
     * </ul>
     */
    CRM_STATUS_ADD("crm.status.add"),
    /**
     * Удаляет элемент справочника.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор элемента справочника. (Обязательный)</li>
     * <li><b>{@code params}</b> - Набор параметров. FORCED - флаг принудительного удаления системных элементов. По умолчанию - N. Если удаляемый элемент является системным, то он не будет удалён. Если будет передано значение Y, то этот элемент будет удалён в любом случае. Для удаления системного элемента используйте второй пример в описании.</li>
     * </ul>
     */
    CRM_STATUS_DELETE("crm.status.delete"),
    /**
     * Возвращает элементы справочника по его символьному идентификатору<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code entityId}</b> - Символьный идентификатор справочника (может быть получен вызовом метода crm.status.entity.types). Обязательный</li>
     * </ul>
     */
    CRM_STATUS_ENTITY_ITEMS("crm.status.entity.items"),
    /**
     * Возвращает описание типов справочников<br>
     */
    CRM_STATUS_ENTITY_TYPES("crm.status.entity.types"),
    /**
     * Возвращает описание полей справочника.<br>
     */
    CRM_STATUS_FIELDS("crm.status.fields"),
    /**
     * Возвращает элемент справочника по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор элемента справочника. (Обязательный)</li>
     * </ul>
     */
    CRM_STATUS_GET("crm.status.get"),
    /**
     * Возвращает список элементов справочника по фильтру.<br>
     */
    CRM_STATUS_LIST("crm.status.list"),
    /**
     * Обновляет существующий элемент справочника.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор элемента справочника. (Обязательный)</li>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("обновляемое поле"=>"значение"[, ...]), где "обновляемое поле" может принимать значения из возвращаемых методом crm.status.fields. (Обязательный)</li>
     * </ul>
     */
    CRM_STATUS_UPDATE("crm.status.update"),

// Ставки НДС: https://dev.1c-bitrix.ru/rest_help/crm/auxiliary/vat/index.php

    /**
     * Возвращает описание полей ставки НДС.<br>
     */
    CRM_VAT_FIELDS("crm.vat.fields"),
    /**
     * Возвращает список ставок НДС.<br>
     */
    CRM_VAT_LIST("crm.vat.list"),
    /**
     * Возвращает ставку НДС по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор ставки НДС.</li>
     * </ul>
     */
    CRM_VAT_GET("crm.vat.get"),
    /**
     * Создаёт новую ставку НДС.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("поле"=>"значение"[, ...]), содержащий значения ставки НДС.</li>
     * </ul>
     */
    CRM_VAT_ADD("crm.vat.add"),
    /**
     * Обновляет существующую ставку НДС.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор ставки НДС.</li>
     * <li><b>{@code fields}</b> - Набор полей - массив вида array("обновляемое поле"=>"значение"[, ...]), где "обновляемое поле" может принимать значения из возвращаемых методом crm.vat.fields.</li>
     * </ul>
     */
    CRM_VAT_UPDATE("crm.vat.update"),
    /**
     * Удаляет ставку НДС.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор ставки НДС.</li>
     * </ul>
     */
    CRM_VAT_DELETE("crm.vat.delete"),

// Лента CRM: https://dev.1c-bitrix.ru/rest_help/crm/stream/index.php

    /**
     * Добавляет сообщение в ленту CRM.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code MESSAGE}</b> - Текст сообщения.</li>
     * <li><b>{@code POST_TITLE}</b> - Заголовок сообщения.</li>
     * <li><b>{@code SPERM}</b> - Права на просмотр сообщения, пример:
     * SPERM": {
     * "CRMCONTACT": ["CRMCONTACT3", "CRMCONTACT7"], // контакты CRM
     * "CRMCOMPANY": ["CRMCOMPANY1", "CRMCOMPANY3"], // компании CRM
     * "CRMDEAL": ["CRMDEAL3", "CRMDEAL5"], // сделки CRM
     * "CRMLEAD": ["CRMLEAD9", "CRMLEAD11"], // лиды CRM
     * "SG": ["SG5", "SG9"], // рабочие группы соцсети
     * "U": ["U1", "U3"], // пользователи
     * "DR": ["DR1", "DR7"], // подразделения с подотделами
     * }</li>
     * <li><b>{@code ENTITYTYPEID}</b> - Тип сущности (число), в которой опубликовано сообщение: 1 - лид; 2 - сделка; 3 - контакт; 4 - компания.</li>
     * <li><b>{@code ENTITYID}</b> - ID конкретного лида/сделки/контакта/компании, в которой опубликовано сообщение.</li>
     * <li><b>{@code FILES}</b> - Файлы сообщения.</li>
     * </ul>
     */
    CRM_LIVEFEEDMESSAGE_ADD("crm.livefeedmessage.add"),

// Привязка заказа к другим сущностям: https://dev.1c-bitrix.ru/rest_help/crm/orderentity/index.php

    /**
     * Метод добавляет привязку заказа к сущности CRM.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * </ul>
     */
    CRM_ORDERENTITY_ADD("crm.orderentity.add"),
    /**
     * Метод возвращает поля привязки заказа к сущности.<br>
     */
    CRM_ORDERENTITY_GETFIELDS("crm.orderentity.getFields"),
    /**
     * Метод удаляет привязки заказа к сущности по фильтру.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * </ul>
     */
    CRM_ORDERENTITY_DELETEBYFILTER("crm.orderentity.deleteByFilter"),
    /**
     * Метод получает список привязок заказа к сущностям по фильтру.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * </ul>
     */
    CRM_ORDERENTITY_LIST("crm.orderentity.list"),

// Бизнес-процесс: https://dev.1c-bitrix.ru/rest_help/bizproc/bizproc_workflow_instance/index.php

    /**
     * Метод возвращает список запущенных бизнес-процессов. Алиас bizproc.workflow.instances.<br>
     */
    BIZPROC_WORKFLOW_INSTANCE_LIST("bizproc.workflow.instance.list"),
    /**
     * Метод возвращает список запущенных бизнес-процессов.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ORDER}</b> - Массив для сортировки результата. Массив вида {"поле_сортировки": 'направление сортировки' [, ...]}. Список полей для сортировки такой же, как для параметра SELECT. Направление сортировки может принимать значения: asc - по возрастанию; desc - по убыванию.</li>
     * <li><b>{@code FILTER}</b> - Массив вида {"фильтруемое_поле": "значение фильтра" [, ...]}. Список фильтруемых полей такой же, как для параметра SELECT. Перед названием фильтруемого поля может указать тип фильтрации: "!" - не равно; "<" - меньше; "<=" - меньше либо равно; ">" - больше; ">=" - больше либо равно.</li>
     * <li><b>{@code SELECT}</b> - Массив полей записей, которые будут возвращены методом. Можно указать только те поля, которые необходимы. Доступные поля: ID - идентификатор бизнес-процесса; OWNED_UNTIL - время блокировки бизнес-процесса. Процесс считается зависшим, если разница времени блокировки с текущим временем более 5 минут; MODULE_ID - идентификатор модуля (по документу); ENTITY - идентификатор сущности (по документу); DOCUMENT_ID - идентификатор документа; STARTED - дата запуска бизнес-процесса; STARTED_BY - кем запущен бизнес-процесс; TEMPLATE_ID - идентификатор шаблона бизнес-процесса.</li>
     * </ul>
     */
    BIZPROC_WORKFLOW_INSTANCES("bizproc.workflow.instances"),
    /**
     * Метод останавливает активный Бизнес-процесс.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code STATUS}</b> - Установить текст статуса. (не обязательный)</li>
     * <li><b>{@code ID}</b> - Идентификатор БП, который нужно остановить</li>
     * </ul>
     */
    BIZPROC_WORKFLOW_TERMINATE("bizproc.workflow.terminate"),
    /**
     * Метод запускает Бизнес-процесс.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code DOCUMENT_ID}</b> - Идентификатор документа БП</li>
     * <li><b>{@code PARAMETERS}</b> - Значения параметров БП (если шаблон с параметрами)</li>
     * <li><b>{@code TEMPLATE_ID}</b> - Идентификатор шаблона БП</li>
     * </ul>
     */
    BIZPROC_WORKFLOW_START("bizproc.workflow.start"),
    /**
     * Метод удаляет запущенный бизнес-процесс.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ID}</b> - Идентификатор бизнес-процесса.</li>
     * </ul>
     */
    BIZPROC_WORKFLOW_KILL("bizproc.workflow.kill"),

// Действия приложений: https://dev.1c-bitrix.ru/rest_help/bizproc/bizproc_activity/index.php

    /**
     * Добавляет новое действие в бизнес-процесс.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code AUTH_USER_ID}</b> - ID пользователя, токен которого будет передан приложению.</li>
     * <li><b>{@code FILTER}</b> - Правила ограничения действия по типу документа и редакции.</li>
     * <li><b>{@code PROPERTIES}</b> - Массив параметров действия. Список значений аналогичен значениям параметра RETURN_PROPERTIES.</li>
     * <li><b>{@code HANDLER*}</b> - URL, на который действие будет отсылать данные (через сервер очередей bitrix24), когда бизнес-процесс дошел до его выполнения. Должен ссылаться на тот же домен, на котором установлено приложение.</li>
     * <li><b>{@code DESCRIPTION}</b> - Описание действия. Может быть строкой или ассоциативным массивом локализированных строк.</li>
     * <li><b>{@code NAME*}</b> - Название действия. Может быть строкой или ассоциативным массивом локализированных строк. Нельзя использовать значение Title.</li>
     * <li><b>{@code CODE*}</b> - Внутренний идентификатор действия, уникальный в рамках приложения. Допустимые символы a-z, A-Z, 0-9, точка, дефис и нижнее подчеркивание.</li>
     * <li><b>{@code RETURN_PROPERTIES}</b> - Массив возвращаемых значений действия. Параметр управляет возможностью действия ожидать ответа приложения и работать с данными, которые придут в ответе. Внимание! Системное название параметра должно начинаться с буквы и может содержать только символы a-z, A-Z, 0-9 и нижнее подчеркивание. Каждый параметр обязательно должен содержать: Name - строка или массив локализаций. Description - описание параметра, строка или массив локализаций. Type - тип параметра. Список базовых параметров: bool (Да/Нет) date (Дата) datetime (Дата/Время) double (Число) int (Целое число) select (Список) массив значений списка: string (Строка) text (Текст) user (Пользователь), может иметь значения вида: цифра - ID группы пользователей; user_1 - пользователь с ID 1; group_D12 - сотрудники отдела 12 и другие коды (группы соцсети и т.п.). Options Только для TYPE равному select. [
     * 'value1' => 'title1',
     * 'value2' => 'title2',
     * 'value3' => 'title3',
     * 'value4' => 'title4',
     * ] Required(Y/N) - обязательность параметра. Multiple(Y/N) - множественность параметра. Default - значение параметра по-умолчанию. По умолчанию тип параметра - string, необязательный, немножественный.</li>
     * <li><b>{@code USE_PLACEMENT}</b> - Дает возможность открывать дополнительные настройки действия в слайдере приложения. Принимает значения (Y/N).</li>
     * <li><b>{@code USE_SUBSCRIPTION}</b> - Использование подписки. Допустимые значения - Y или N. Можно указать, должно ли ожидать действие ответа от приложения. Если параметр пустой или не указан - пользователь может сам настроить этот параметр в настройках действия в дизайнере бизнес-процессов.</li>
     * <li><b>{@code DOCUMENT_TYPE}</b> - Тип документа, который будет определять типы данных для параметров PROPERTIES и RETURN_PROPERTIES. Массив из 3 элементов: id модуля сущность (класс) непосредственно тип документа Примеры: ['crm', 'CCrmDocumentLead', 'LEAD']
     * ['lists', 'BizprocDocument', 'iblock_22']
     * ['disk', 'Bitrix\Disk\BizProcDocument', 'STORAGE_490']
     * ['tasks', 'Bitrix\Tasks\Integration\Bizproc\Document\Task', 'TASK_PROJECT_13']</li>
     * </ul>
     */
    BIZPROC_ACTIVITY_ADD("bizproc.activity.add"),
    /**
     * Метод удаляет действие.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code CODE}</b> - Идентификатор действия приложения.</li>
     * </ul>
     */
    BIZPROC_ACTIVITY_DELETE("bizproc.activity.delete"),
    /**
     * Метод возвращает список установленных приложением действий.<br>
     */
    BIZPROC_ACTIVITY_LIST("bizproc.activity.list"),
    /**
     * Метод позволяет обновить поля действия.<br>
     */
    BIZPROC_ACTIVITY_UPDATE("bizproc.activity.update"),
    /**
     * Метод записывает информацию в лог бизнес-процесса<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code LOG_MESSAGE}</b> - Сообщения для записи в лог.</li>
     * <li><b>{@code EVENT_TOKEN}</b> - Уникальный ключ, который необходимо использовать при отправке события бизнес-процессу.</li>
     * </ul>
     */
    BIZPROC_ACTIVITY_LOG("bizproc.activity.log"),

// Задания: https://dev.1c-bitrix.ru/rest_help/bizproc/bizproc_task/index.php

    /**
     * Метод осуществляет выполнение заданий БП.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code STATUS}</b> - Целевой статус задания, обязательный. Список допустимых значений: 1 или yes - ответ "Да" (утвержден) 2 или no - ответ "Нет" (отклонен) 3 или ok - ответ "Ок" (ознакомлен) 4 или cancel - ответ "Отмена"</li>
     * <li><b>{@code TASK_ID}</b> - Идентификатор задания, обязательный</li>
     * <li><b>{@code COMMENT}</b> - Комментарий пользователя, обязательность зависит от параметров задания</li>
     * </ul>
     */
    BIZPROC_TASK_COMPLETE("bizproc.task.complete"),
    /**
     * Метод возвращает список заданий бизнес-процессов<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ORDER}</b> - Массив для сортировки результата. Массив вида {"поле_сортировки": 'направление сортировки' [, ...]}. Список полей для сортировки такой же, как для параметра SELECT. Направление сортировки может принимать значения: asc - по возрастанию; desc - по убыванию.</li>
     * <li><b>{@code FILTER}</b> - Массив вида {"фильтруемое_поле": "значение фильтра" [, ...]}. Список фильтруемых полей такой же, как для параметра SELECT. Перед названием фильтруемого поля может указать тип фильтрации: "!" - не равно; "<" - меньше; "<=" - меньше либо равно; ">" - больше; ">=" - больше либо равно.</li>
     * <li><b>{@code SELECT}</b> - Массив полей записей, которые будут возвращены методом. Можно указать только те поля, которые необходимы. Доступные поля: ID - идентификатор задания; WORKFLOW_ID - идентификатор бизнес-процесса; DOCUMENT_NAME - название документа; DESCRIPTION - описание задания; NAME - название задания; MODIFIED - дата изменения; WORKFLOW_STARTED - дата запуска бизнес-процесса; WORKFLOW_STARTED_BY - кем запущен бизнес-процесс; OVERDUE_DATE - крайний срок; WORKFLOW_TEMPLATE_ID - идентификатор шаблона бизнес-процесса; WORKFLOW_TEMPLATE_NAME - название шаблона бизнес-процесса; WORKFLOW_STATE - статус бизнес-процесса; STATUS - статус задания: 0 - выполняется; 1 - утверждено (ответ Да); 2 - отклонено (ответ Нет); 3 - выполнено (ответ Ок); 4 - таймаут (истек срок выполнения задания). USER_ID - идентификатор пользователя; USER_STATUS - ответ пользователя: 0 - ожидание ответа; 1 - да (утвердил); 2 - нет (отклонил); 3 - ок (выполнил). MODULE_ID - идентификатор модуля (по документу); ENTITY - идентификатор сущности (по документу); DOCUMENT_ID - идентификатор документа. ACTIVITY - идентификатор типа задания, строка, варианты значений: ApproveActivity - Утверждение документа ReviewActivity - Ознакомление с документом RequestInformationActivity - Запрос дополнительной информации RequestInformationOptionalActivity - Запрос дополнительной информации (с отклонением) ACTIVITY_NAME - идентификатор действия в шаблоне. PARAMETERS - параметры задания, массив, который может содержать следующую информацию: CommentLabelMessage - Название поля "Комментарий"; CommentRequired - Обязательность комментария. Допустимые значения N (нет), Y (да), YA (да при утверждении), YR (да при отклонении); ShowComment - Показывать комментарий, Y/N; TaskButtonMessage - текст кнопки "Ознакомлен"; TaskButton1Message - текст кнопки "Утвердить"; TaskButton2Message - текст кнопки "Отклонить"; Fields - массив с описанием полей ( с версии 20.0.800 С версии 20.0.800 модуля Бизнес-процессы появилась возможность выполнять задания Запрос доп.информации через rest метод {@link #BIZPROC_TASK_COMPLETE}. Для того, чтобы понять, какие поля нужно заполнить, в метод bizproc.task.list в PARAMETERS добавлено новое свойство Fields. );</li>
     * </ul>
     */
    BIZPROC_TASK_LIST("bizproc.task.list"),

// Провайдеры: https://dev.1c-bitrix.ru/rest_help/bizproc/bizproc_provider/index.php

    /**
     * Регистрирует новый SMS-провайдер в бизнес-процессе.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code CODE}</b> - Внутренний идентификатор провайдера. Допустимые символы a-z, A-Z, 0-9, точка, дефис и нижнее подчеркивание.</li>
     * <li><b>{@code DESCRIPTION}</b> - Описание провайдера. Может быть строкой или ассоциативным массивом локализированных строк.</li>
     * <li><b>{@code HANDLER}</b> - URL приложения, на который будут отправлены данные.</li>
     * <li><b>{@code TYPE}</b> - Тип провайдера.</li>
     * <li><b>{@code NAME}</b> - Название провайдера. Может быть строкой или ассоциативным массивом локализированных строк.</li>
     * </ul>
     */
    BIZPROC_PROVIDER_ADD("bizproc.provider.add"),
    /**
     * Удаляет зарегистрированного SMS-провайдера.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code CODE}</b> - Идентификатор провайдера.</li>
     * </ul>
     */
    BIZPROC_PROVIDER_DELETE("bizproc.provider.delete"),
    /**
     * Возвращает список зарегистрированных приложением SMS-провайдеров.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code CODE}</b> - Идентификатор провайдера.</li>
     * </ul>
     */
    BIZPROC_PROVIDER_LIST("bizproc.provider.list"),

// Роботы приложений: https://dev.1c-bitrix.ru/rest_help/bizproc/bizproc_robot/index.php

    /**
     * Метод регистрирует нового робота.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code AUTH_USER_ID}</b> - ID пользователя, токен которого будет передан приложению.</li>
     * <li><b>{@code CODE}</b> - Внутренний идентификатор робота. Допустимые символы a-z, A-Z, 0-9, точка, дефис и нижнее подчеркивание. Обязательный параметр.</li>
     * <li><b>{@code PROPERTIES}</b> - Массив параметров робота. Список значений аналогичен значениям параметра RETURN_PROPERTIES.</li>
     * <li><b>{@code PLACEMENT_HANDLER}</b> - URL встройки (обработчик встройки на стороне приложения). Если использовать параметр USE_PLACEMENT со значением "Y", но не указать PLACEMENT_HANDLER, то возникает ошибка "error": "ERROR_WRONG_HANDLER_URL", "error_description": "Wrong handler URL" .</li>
     * <li><b>{@code USE_PLACEMENT}</b> - Дает возможность открывать дополнительные настройки робота в слайдере приложения. Принимает значения (Y/N). Необязательный параметр.</li>
     * <li><b>{@code RETURN_PROPERTIES}</b> - Массив возвращаемых значений робота. Параметр управляет возможностью ожидать ответа приложения роботом и работать с данными, которые придут в ответе. Внимание! Системное название параметра должно начинаться с буквы и может содержать только символы a-z, A-Z, 0-9 и нижнее подчеркивание. Каждый параметр обязательно должен содержать: Name - строка или массив локализаций. Description - описание параметра, строка или массив локализаций. Type - тип параметра. Список базовых параметров: bool (Да/Нет) date (Дата) datetime (Дата/Время) double (Число) int (Целое число) select (Список) массив значений списка: string (Строка) text (Текст) user (Пользователь) Options Только для TYPE равному select. [
     * 'value1' => 'title1',
     * 'value2' => 'title2',
     * 'value3' => 'title3',
     * 'value4' => 'title4',
     * ] Required(Y/N) - обязательность параметра. Multiple(Y/N) - множественность параметра. Default - значение параметра по-умолчанию. По умолчанию тип параметра - string, необязательный, немножественный.</li>
     * <li><b>{@code USE_SUBSCRIPTION}</b> - Использование подписки. Допустимые значения - Y или N. Можно указать, должен ли робот ожидать ответа от приложения. Если параметр пустой или не указан - пользователь может сам настроить этот параметр в настройках действия в дизайнере бизнес-процессов.</li>
     * <li><b>{@code HANDLER}</b> - URL приложения, на который будут отправлены данные. Обязательный параметр.</li>
     * <li><b>{@code NAME}</b> - Название робота. Может быть строкой или ассоциативным массивом локализированных строк. Обязательный параметр.</li>
     * </ul>
     */
    BIZPROC_ROBOT_ADD("bizproc.robot.add"),
    /**
     * Метод удаляет зарегистрированного робота.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code CODE}</b> - Идентификатор робота.</li>
     * </ul>
     */
    BIZPROC_ROBOT_DELETE("bizproc.robot.delete"),
    /**
     * Возвращает список зарегистрированных приложением роботов.<br>
     */
    BIZPROC_ROBOT_LIST("bizproc.robot.list"),
    /**
     * Метод обновляет поля робота.<br>
     */
    BIZPROC_ROBOT_UPDATE("bizproc.robot.update"),

// События: https://dev.1c-bitrix.ru/rest_help/bizproc/bizproc_event/index.php

    /**
     * Метод возвращает действию выходные параметры, заданные в описании действия<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code RETURN_VALUES}</b> - Массив возвращаемых значений действия. Также будет появляться в форме Вставка значения во вкладке Дополнительные результаты.</li>
     * <li><b>{@code EVENT_TOKEN}</b> - Уникальный ключ, который необходимо использовать при отправке события бизнес-процессу.</li>
     * </ul>
     */
    BIZPROC_EVENT_SEND("bizproc.event.send"),

// Шаблоны Бизнес-процессов: https://dev.1c-bitrix.ru/rest_help/bizproc/bizproc_workflow_template/index.php

    /**
     * Метод добавляет шаблон Бизнес-процесса.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code AUTO_EXECUTE}</b> - Флаги автозапуска, может быть: 0, 1 (создание), 2 (изменение) , 3 (создание + изменение)</li>
     * <li><b>{@code TEMPLATE_DATA}</b> - Передается контент файла *.bpt (стандартно для реста).</li>
     * <li><b>{@code DESCRIPTION}</b> - Описание шаблона.</li>
     * <li><b>{@code DOCUMENT_TYPE}</b> - Тип документа - массив из 3 элементов: id модуля сущность (класс) непосредственно тип документа Примеры: ['crm', 'CCrmDocumentLead', 'LEAD']
     * ['lists', 'BizprocDocument', 'iblock_22']
     * ['disk', 'Bitrix\Disk\BizProcDocument', 'STORAGE_490']
     * ['tasks', 'Bitrix\Tasks\Integration\Bizproc\Document\Task', 'TASK_PROJECT_13']</li>
     * <li><b>{@code NAME}</b> - Название шаблона</li>
     * </ul>
     */
    BIZPROC_WORKFLOW_TEMPLATE_ADD("bizproc.workflow.template.add"),
    /**
     * Метод удаляет шаблон Бизнес-процесса.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ID}</b> - Идентификатор удаляемого шаблона.</li>
     * </ul>
     */
    BIZPROC_WORKFLOW_TEMPLATE_DELETE("bizproc.workflow.template.delete"),
    /**
     * Метод изменяет шаблон Бизнес-процесса.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code FIELDS}</b> - Массив изменяемых параметров. Обновить можно поля: NAME, DESCRIPTION, AUTO_EXECUTE, TEMPLATE_DATA. При попытке обновить другие поля возвращаемые {@link #BIZPROC_WORKFLOW_TEMPLATE_LIST} - ошибок не возникнет, но и обновлено ничего не будет.</li>
     * <li><b>{@code ID}</b> - Идентификатор изменяемого шаблона.</li>
     * </ul>
     */
    BIZPROC_WORKFLOW_TEMPLATE_UPDATE("bizproc.workflow.template.update"),
    /**
     * Метод возвращает список шаблонов Бизнес-процессов, установленных на сайте.<br>
     */
    BIZPROC_WORKFLOW_TEMPLATE_LIST("bizproc.workflow.template.list"),

// Методы для встраивания приложений: https://dev.1c-bitrix.ru/rest_help/application_embedding/metods/index.php

    /**
     * Метод установит обработчик места встраивания. Работает только при авторизации под пользователем с правами администрирования портала.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code PLACEMENT}</b> - Идентификатор требуемого места встраивания. Обязателен.</li>
     * <li><b>{@code USER_ID}</b> - Принимает число, позволяет отображать встройку для указанного пользователя (только одного!). 0 или не указано поле - встройка регистрируется для всех. Внимание! Данное поле поддерживается не всеми местами встраивания На данный момент поддерживается только PAGE_BACKGROUND_WORKER. . При попытке регистрации места встраивания без этой возможности вы получите ошибку ERROR_PLACEMENT_USER_MODE: User mode is not available. Допустимость регистрации смотрите в описании мест встроек. Также HANDLER встройки должен быть уникальным для приложения, без учёта разных USER_ID.</li>
     * <li><b>{@code HANDLER}</b> - URL обработчика места встраивания. Обязателен.</li>
     * <li><b>{@code LANG_ALL}</b> - Массив параметров для каждого языка. Ключи массива: TITLE - заголовок обработчика, будет выводиться по месту встраивания. Не обязателен, по умолчанию - название приложения DESCRIPTION - Описание обработчика, может выводиться по месту встраивания. Не обязателен. GROUP_NAME - Название группы, который позволяет группировать обработчики в месте встраивания. Не обязателен.</li>
     * </ul>
     */
    PLACEMENT_BIND("placement.bind"),
    /**
     * Метод удалит обработчик места встраивания. Работает только при авторизации под пользователем с правами администрирования портала.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code PLACEMENT}</b> - Идентификатор места встраивания. Обязателен.</li>
     * <li><b>{@code HANDLER}</b> - URL обработчика места встраивания. Если не указывать URL обработчика, будут удалены все обработчики указанного места встраивания, зарегистрированные приложением.</li>
     * </ul>
     */
    PLACEMENT_UNBIND("placement.unbind"),
    /**
     * Получение списка доступных мест встраивания.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code SCOPE}</b> - Ограничение списка одним из прав доступа приложения</li>
     * </ul>
     */
    PLACEMENT_LIST("placement.list"),
    /**
     * Получение списка своих мест встраивания. Работает только при авторизации под пользователем с правами администрирования портала.<br>
     */
    PLACEMENT_GET("placement.get"),

// Встраивание в виде пользовательских типов полей: https://dev.1c-bitrix.ru/rest_help/application_embedding/user_field/index.php

    /**
     * Регистрация нового типа пользовательских полей.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code HANDLER: URL}</b> - Адрес обработчика пользовательского типа. Обязательный параметр.</li>
     * <li><b>{@code OPTIONS: Многомерный массив}</b> - Дополнительные настройки. На данный момент доступен один ключ: height - указывает высоту пользовательского поля по умолчанию в пикселях. По умолчанию - 0 При указании значения 0 - будет использована высота стандартная для отображения данной встройки. . Применится любое положительное значение.</li>
     * <li><b>{@code DESCRIPTION: Строка}</b> - Текстовое описание типа. Будет выводиться в административном интерфейсе настройки пользовательских полей.</li>
     * <li><b>{@code USER_TYPE_ID: Строка}</b> - Строковой код типа. Обязательный параметр.</li>
     * <li><b>{@code TITLE: Строка}</b> - Текстовое название типа. Будет выводиться в административном интерфейсе настройки пользовательских полей.</li>
     * </ul>
     */
    USERFIELDTYPE_ADD("userfieldtype.add"),
    /**
     * Получение списка зарегистрированных приложением типов пользовательских полей.<br>
     */
    USERFIELDTYPE_LIST("userfieldtype.list"),
    /**
     * Изменение настроек зарегистрированного приложением типа пользовательских полей.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code HANDLER: URL}</b> - Адрес обработчика пользовательского типа. Обязательный параметр.</li>
     * <li><b>{@code DESCRIPTION: Строка}</b> - Текстовое описание типа. Будет выводиться в административном интерфейсе настройки пользовательских полей.</li>
     * <li><b>{@code USER_TYPE_ID: Строка}</b> - Строковой код типа. Обязательный параметр.</li>
     * <li><b>{@code TITLE: Строка}</b> - Текстовое название типа. Будет выводиться в административном интерфейсе настройки пользовательских полей. Обязательный параметр.</li>
     * </ul>
     */
    USERFIELDTYPE_UPDATE("userfieldtype.update"),
    /**
     * Удаление зарегистрированного приложением типа пользовательских полей.<br>
     */
    USERFIELDTYPE_DELETE("userfieldtype.delete"),

// Модуль AI: https://dev.1c-bitrix.ru/rest_help/ai/index.php

    /**
     * Метод для добавления пользовательского сервиса.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code settings}</b> - Тип AI (см. описание ниже). Необязательный.. <em>С версии:</em> 23.800</li>
     * <li><b>{@code code}</b> - Уникальный код engine</li>
     * <li><b>{@code completions_url}</b> - endpoint для обработки пользовательского запроса.</li>
     * <li><b>{@code name}</b> - Осмысленное и короткое название, которое будет появляться в интерфейсе пользователя.</li>
     * <li><b>{@code category}</b> - Может быть либо text (генерация текста), либо image (генерация картинок), либо audio (распознавание текста).</li>
     * </ul>
     */
    AI_ENGINE_REGISTER("ai.engine.register"),
    /**
     * Метод для получения списка engine.<br>
     */
    AI_ENGINE_LIST("ai.engine.list"),
    /**
     * Метод для удаления engine.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code code}</b> - Код engine</li>
     * </ul>
     */
    AI_ENGINE_UNREGISTER("ai.engine.unregister"),

// Работа с пользовательскими полями: https://dev.1c-bitrix.ru/rest_help/userfieldconfig/userfieldconfig/index.php

    /**
     * Метод добавит новое пользовательское поле.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code field}</b> - Список с полями настройки нового поля: entityId - строковый идентификатор сущности. Обязательное. fieldName - код поля. Должен быть сформирован по шаблону UF_ + {идентификатор сущности} + _ + {произвольная строка в UPPER_CASE}. Код поля не может быть больше 50 символов. Обязательное. userTypeId - строковый идентификатор типа поля Типы полей идентичны полям для главного модуля Подробнее... . Обязательное. xmlId - внешний идентификатор. sort - индекс сортировки. multiple - флаг множественности (N или Y), по умолчанию N. Этот флаг можно указать только при создании поля. mandatory - флаг обязательности (N или Y), по умолчанию N. showFilter - флаг показа поля в фильтре (N или Y), по умолчанию N. showInList - флаг показа поля в списке (N или Y), по умолчанию Y. editInList - флаг разрешения редактирования поля в списке (N или Y), по умолчанию Y. isSearchable - флаг наличия значения поля в полнотекстовом индексе Добавляйте в поиск только нужные поля. На построение индекса уходит время при изменении каждого значения поля, что может существенно замедлить работы при большом количестве таких полей. (N или Y), по умолчанию N. settings - список с дополнительными настройками поля. editFormLabel - список с языкозависимыми названиями поля, где ключ - идентификатор языка, а значение - фраза. enum - массив с вариантами значений для свойств типа "список": value - значение варианта. Обязательное def - флаг значения по умолчанию (N или Y), по умолчанию N. Только один может быть вариантом по умолчанию sort - индекс сортировки. Если не задан, генерируется автоматически на основе порядка передачи вариантов значений xmlId - внешний идентификатор варианта</li>
     * <li><b>{@code moduleId}</b> - Строковый идентификатор модуля. Обязательный.</li>
     * </ul>
     */
    USERFIELDCONFIG_ADD("userfieldconfig.add"),
    /**
     * Метод удалит настройки поля с идентификатором id.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор настроек поля. Обязательный.</li>
     * <li><b>{@code moduleId}</b> - Строковый идентификатор модуля. Обязательный.</li>
     * </ul>
     */
    USERFIELDCONFIG_DELETE("userfieldconfig.delete"),
    /**
     * Метод вернет данные о настройках пользовательского поля с идентификатором id.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор настроек поля. Обязательный.</li>
     * <li><b>{@code moduleId}</b> - Строковый идентификатор модуля. Обязательный.</li>
     * </ul>
     */
    USERFIELDCONFIG_GET("userfieldconfig.get"),
    /**
     * Метод вернет набор доступных типов пользовательских полей для модуля moduleId.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code moduleId}</b> - Идентификатор модуля. Обязательный.</li>
     * </ul>
     */
    USERFIELDCONFIG_GETTYPES("userfieldconfig.getTypes"),
    /**
     * Метод вернет список настроек пользовательских полей.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter}</b> - Список для фильтрации</li>
     * <li><b>{@code select}</b> - Массив с полями, которые надо показать. По умолчанию выводятся все, кроме вариантов для списка и языковых фраз. Чтобы получить фразы в списке, необходимо передать идентификатор языка по ключу language</li>
     * <li><b>{@code moduleId}</b> - Строковый идентификатор модуля. Обязательный.</li>
     * <li><b>{@code order}</b> - Список для определения порядка отображения, где ключ - название поля, а значение - ASC или DESC</li>
     * </ul>
     */
    USERFIELDCONFIG_LIST("userfieldconfig.list"),
    /**
     * Метод изменяет значение поля.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code field}</b> - Список с полями настройки нового поля. Аналогично методу {@link #USERFIELDCONFIG_ADD}, но: fieldName - не может быть изменен userTypeId - не может быть изменен entityId - не может быть изменен editInList - не может быть изменен multiple - не может быть изменен isSearchable - изменение этого флага не вызовет автоматическое перестроение поискового индекса. Перестроение происходит при изменении сущностей, к которым привязаны поля enum - полный список всех вариантов значений для свойства типа "список". Чтобы это поле учитывалось, в fields должен присутствовать userTypeId id - идентификатор варианта. Должен присутствовать, если надо обновить вариант</li>
     * <li><b>{@code id}</b> - Идентификатор настроек поля. Обязательный.</li>
     * <li><b>{@code moduleId}</b> - Строковый идентификатор модуля. Обязательный.</li>
     * </ul>
     */
    USERFIELDCONFIG_UPDATE("userfieldconfig.update"),

// Документы: https://dev.1c-bitrix.ru/rest_help/documentgenerator/documents/index.php

    /**
     * Возвращает информацию о документе по его идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - ID документа</li>
     * </ul>
     */
    DOCUMENTGENERATOR_DOCUMENT_GET("documentgenerator.document.get"),
    /**
     * Возвращает список полей документа с их описанием.<br>
     */
    DOCUMENTGENERATOR_DOCUMENT_GETFIELDS("documentgenerator.document.getfields"),
    /**
     * Возвращает список документов по фильтру.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter}</b> - массив для фильтрации.</li>
     * <li><b>{@code select}</b> - массив полей для вывода.</li>
     * <li><b>{@code start}</b> - offset для постраничной навигации.</li>
     * <li><b>{@code order}</b> - массив для указания порядка вывода {"id": "desc"}.</li>
     * </ul>
     */
    DOCUMENTGENERATOR_DOCUMENT_LIST("documentgenerator.document.list"),
    /**
     * Удаляет документ.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - идентификатор документа.</li>
     * </ul>
     */
    DOCUMENTGENERATOR_DOCUMENT_DELETE("documentgenerator.document.delete"),
    /**
     * Создает новый документ на основании шаблона.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code stampsEnabled}</b> - 1 (поставить), 0 (убрать) печати и подписи.</li>
     * <li><b>{@code values}</b> - Набор значений полей документа. В простом случае это одномерный массив, где ключ - название поля, а значение - строка для вставки в документ.</li>
     * <li><b>{@code templateId}</b> - ID шаблона.</li>
     * <li><b>{@code fields}</b> - Описание полей документа. Данный параметр - массив, где ключ - название поля, а значение - описание. Коды типов простых полей: TYPE — тип поля; FORMAT — формат; PROVIDER — провайдер; TITLE — заголовок; IMAGE — изображение; STAMP — печать / подпись; DATE — дата / время; NAME — имя; PHONE — номер телефона.</li>
     * <li><b>{@code value}</b> - Внешний идентификатор. Параметр value нужен только для интерфейса приложения, как идентификатор внешнего источника. Это строковый параметр, в него можно передать полноценный внешний код. Например, "PARTNER_APP_10_BILL_133”.</li>
     * </ul>
     */
    DOCUMENTGENERATOR_DOCUMENT_ADD("documentgenerator.document.add"),
    /**
     * Обновляет существующий документ с новыми значениями.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code stampsEnabled}</b> - 1 (поставить), 0 (убрать) печати и подписи.</li>
     * <li><b>{@code values}</b> - массив новых значений полей документа.</li>
     * <li><b>{@code id}</b> - идентификатор документа.</li>
     * <li><b>{@code fields}</b> - настройки полей.</li>
     * </ul>
     */
    DOCUMENTGENERATOR_DOCUMENT_UPDATE("documentgenerator.document.update"),
    /**
     * Включает / выключает публичную ссылку на документ.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - идентификатор документа.</li>
     * <li><b>{@code status}</b> - 1 (включить), 0 (выключить) публичную ссылку на документ.</li>
     * </ul>
     */
    DOCUMENTGENERATOR_DOCUMENT_ENABLEPUBLICURL("documentgenerator.document.enablepublicurl"),

// Шаблоны документов: https://dev.1c-bitrix.ru/rest_help/documentgenerator/templates/index.php

    /**
     * Возвращает информацию о шаблоне по его идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - ID шаблона</li>
     * </ul>
     */
    DOCUMENTGENERATOR_TEMPLATE_GET("documentgenerator.template.get"),
    /**
     * Возвращает список полей шаблона с их описанием.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - ID шаблона</li>
     * </ul>
     */
    DOCUMENTGENERATOR_TEMPLATE_GETFIELDS("documentgenerator.template.getfields"),
    /**
     * Возвращает список шаблонов по фильтру.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter}</b> - массив для фильтрации.</li>
     * <li><b>{@code select}</b> - массив полей для вывода. По умолчанию выводит все поля шаблона, кроме users и providers. Чтобы они появились, надо добавить дополнительно. Например, ['*', 'providers', 'users'].</li>
     * <li><b>{@code start}</b> - offset для постраничной навигации.</li>
     * <li><b>{@code order}</b> - массив для указания порядка вывода {"id": "desc"}.</li>
     * </ul>
     */
    DOCUMENTGENERATOR_TEMPLATE_LIST("documentgenerator.template.list"),
    /**
     * Удаляет шаблон.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - идентификатор шаблона</li>
     * </ul>
     */
    DOCUMENTGENERATOR_TEMPLATE_DELETE("documentgenerator.template.delete"),
    /**
     * Добавляет новый шаблон.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - массив полей шаблона, среди которых: fields[name] - название шаблона (обязательное). fields[file] - контент файла, закодированный в base64 (обязательное). Как альтернативу, контент файла можно передать в multipart / form-data. В этом случае его не надо кодировать в base64. fields[code] - символьный код шаблона. fields[numeratorId] - идентификатор нумератора (обязательное). fields[region] - страна (обязательное). fields[users] - массив видимости. По умолчанию пусто. fields[active] - Y/N флаг активности. По умолчанию Y. fields[withStamps] - Y/N ставить печати и подписи. По умолчанию N fields[sort] - индекс сортировки.</li>
     * </ul>
     */
    DOCUMENTGENERATOR_TEMPLATE_ADD("documentgenerator.template.add"),
    /**
     * Обновляет существующий шаблон.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - идентификатор шаблона.</li>
     * <li><b>{@code fields}</b> - массив полей. Аналогично методу documentgenerator.template.add, только здесь все поля необязательные.</li>
     * </ul>
     */
    DOCUMENTGENERATOR_TEMPLATE_UPDATE("documentgenerator.template.update"),

// Нумераторы: https://dev.1c-bitrix.ru/rest_help/documentgenerator/numerators/index.php

    /**
     * Возвращает информацию о нумераторе по его идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - ID нумератора.</li>
     * </ul>
     */
    DOCUMENTGENERATOR_NUMERATOR_GET("documentgenerator.numerator.get"),
    /**
     * Возвращает список нумераторов.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code start}</b> - offset при запросе, для постраничной навигации.</li>
     * </ul>
     */
    DOCUMENTGENERATOR_NUMERATOR_LIST("documentgenerator.numerator.list"),
    /**
     * Добавляет новый нумератор.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code template}</b> - Шаблон</li>
     * <li><b>{@code settings}</b> - Настройки генераторов</li>
     * <li><b>{@code name}</b> - Имя</li>
     * </ul>
     */
    DOCUMENTGENERATOR_NUMERATOR_ADD("documentgenerator.numerator.add"),
    /**
     * Обновляет существующий нумератор с новыми значениями.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ID нумератора}</b> - Массив, аналогичный documentgenerator.numerator.add(), только все поля необязательны.</li>
     * <li><b>{@code id}</b> - ID нумератора</li>
     * </ul>
     */
    DOCUMENTGENERATOR_NUMERATOR_UPDATE("documentgenerator.numerator.update"),
    /**
     * Удаляет нумератор.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - ID нумератора</li>
     * </ul>
     */
    DOCUMENTGENERATOR_NUMERATOR_DELETE("documentgenerator.numerator.delete"),

// Пользовательские страны: https://dev.1c-bitrix.ru/rest_help/documentgenerator/region/index.php

    /**
     * Возвращает информацию о регионе по его идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - ID страны</li>
     * </ul>
     */
    DOCUMENTGENERATOR_REGION_GET("documentgenerator.region.get"),
    /**
     * Возвращает список регионов, как установленных по умолчанию, так и пользовательских.<br>
     */
    DOCUMENTGENERATOR_REGION_LIST("documentgenerator.region.list"),
    /**
     * Удаляет регион.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - ID региона</li>
     * </ul>
     */
    DOCUMENTGENERATOR_REGION_DELETE("documentgenerator.region.delete"),
    /**
     * Добавляет новый регион.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Массив полей страны, среди которых: title - название страны (обязательное) languageId - двухбуквенный идентификатор языка formatDate - формат даты (обязательное) formatDatetime - формат даты времени (обязательное) formatName - формат имени (обязательное)</li>
     * </ul>
     */
    DOCUMENTGENERATOR_REGION_ADD("documentgenerator.region.add"),
    /**
     * Обновляет существующий регион.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - ID региона</li>
     * <li><b>{@code fields}</b> - Массив полей. Аналогично методу {@link #DOCUMENTGENERATOR_REGION_ADD}, только здесь все поля необязательные.</li>
     * </ul>
     */
    DOCUMENTGENERATOR_REGION_UPDATE("documentgenerator.region.update"),

// Роли и их права доступа: https://dev.1c-bitrix.ru/rest_help/documentgenerator/role/index.php

    /**
     * Возвращает информацию о роли и её правах доступа по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор роли</li>
     * </ul>
     */
    DOCUMENTGENERATOR_ROLE_GET("documentgenerator.role.get"),
    /**
     * Возвращает список ролей без их прав доступа.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code start}</b> - Сдвиг для постраничной навигации</li>
     * </ul>
     */
    DOCUMENTGENERATOR_ROLE_LIST("documentgenerator.role.list"),
    /**
     * Удаляет роль.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - ID роли</li>
     * </ul>
     */
    DOCUMENTGENERATOR_ROLE_DELETE("documentgenerator.role.delete"),
    /**
     * Добавляет новую роль.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Массив полей роли, среди которых: name - название роли (обязательное) code - код роли permissions - разрешения роли. Это массив следующего вида:
     * "permissions": {
     * "settings": {
     * "modify" : "X",
     * },
     * "templates": {
     * "modify" : "X",
     * },
     * "documents": {
     * "modify" : "X",
     * "view" : "X",
     * },
     * }
     * Первый ключ - сущность, второй - действие, значение - уровень разрешений. Если передать пустой массив, то у роли будут отсутствовать какие-либо разрешения. Есть следующие уровни: пустое значение - нет разрешения, A - своё, D - своё и коллег по отделу, X - разрешено всё. Уровни A и D имеют значение только для permissions[templates][modify].</li>
     * </ul>
     */
    DOCUMENTGENERATOR_ROLE_ADD("documentgenerator.role.add"),
    /**
     * Обновляет существующую роль.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - ID роли.</li>
     * <li><b>{@code fields}</b> - Массив полей. Аналогично методу documentgenerator.role.add, только здесь все поля необязательные.</li>
     * </ul>
     */
    DOCUMENTGENERATOR_ROLE_UPDATE("documentgenerator.role.update"),
    /**
     * Устанавливает набор ролей и их привязок.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code accesses}</b> - Массив привязок ролей. accesses[roleId] - идентификатор роли. accesses[accessCode] - символьный код для привязки.</li>
     * </ul>
     */
    DOCUMENTGENERATOR_ROLE_FILLACCESSES("documentgenerator.role.fillaccesses"),

// Версии: https://dev.1c-bitrix.ru/rest_help/disk/version/index.php

    /**
     * Возвращает версию по идентификатору<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор версии</li>
     * </ul>
     */
    DISK_VERSION_GET("disk.version.get"),

// Папка: https://dev.1c-bitrix.ru/rest_help/disk/folder/index.php

    /**
     * Возвращает описание полей папки.<br>
     */
    DISK_FOLDER_GETFIELDS("disk.folder.getfields"),
    /**
     * Возвращает папку по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор папки.</li>
     * </ul>
     */
    DISK_FOLDER_GET("disk.folder.get"),
    /**
     * Возвращает список файлов и папок, которые находятся непосредственно в папке.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter}</b> - Необязательный параметр. Поддерживает фильтрацию по полям, которые указаны в {@link #DISK_FOLDER_GETFIELDS} как USE_IN_FILTER: true.</li>
     * <li><b>{@code id}</b> - Идентификатор папки.</li>
     * </ul>
     */
    DISK_FOLDER_GETCHILDREN("disk.folder.getchildren"),
    /**
     * Создает дочернюю папку.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code data}</b> - Массив, описывающий папку. Обязательное поле NAME - имя новой папки.</li>
     * <li><b>{@code id}</b> - Идентификатор папки.</li>
     * </ul>
     */
    DISK_FOLDER_ADDSUBFOLDER("disk.folder.addsubfolder"),
    /**
     * Копирует папку в указанную папку.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code targetFolderId}</b> - Идентификатор папки.</li>
     * <li><b>{@code id}</b> - Идентификатор папки.</li>
     * </ul>
     */
    DISK_FOLDER_COPYTO("disk.folder.copyto"),
    /**
     * Перемещает папку в указанную папку.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code targetFolderId}</b> - Идентификатор папки.</li>
     * <li><b>{@code id}</b> - Идентификатор папки.</li>
     * </ul>
     */
    DISK_FOLDER_MOVETO("disk.folder.moveto"),
    /**
     * Переименовывает папку.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code newName}</b> - Новое имя.</li>
     * <li><b>{@code id}</b> - Идентификатор папки.</li>
     * </ul>
     */
    DISK_FOLDER_RENAME("disk.folder.rename"),
    /**
     * Уничтожает папку и всё её дочерние элементы навсегда.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор папки.</li>
     * </ul>
     */
    DISK_FOLDER_DELETETREE("disk.folder.deletetree"),
    /**
     * Перемещает папку в корзину.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор папки.</li>
     * </ul>
     */
    DISK_FOLDER_MARKDELETED("disk.folder.markdeleted"),
    /**
     * Восстанавливает папку из корзины.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор папки.</li>
     * </ul>
     */
    DISK_FOLDER_RESTORE("disk.folder.restore"),
    /**
     * Загружает новый файл в указанную папку.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code data}</b> - Массив, описывающий файл. Обязательное поле NAME - имя нового файла. Доступно отправка файла в виде строки, закодированной в base64.</li>
     * <li><b>{@code rights}</b> - Необязательный, по умолчанию пустой массив. Массив прав доступа на загружаемый файл.</li>
     * <li><b>{@code generateUniqueName}</b> - Необязательный, по умолчанию false. При указании true, для загружаемого файла будет уникализировано имя, добавлением суффикса (1), (2) Пример: avatar (1).jpg avatar (2).jpg и т.п.</li>
     * <li><b>{@code id}</b> - Идентификатор папки. В текущем API загружать файл по пути к папке невозможно. Необходимо обязательно вычислить ID папки.</li>
     * <li><b>{@code fileContent}</b> - Аналогично 'DETAIL_PICTURE' в примере <a href="https://apidocs.bitrix24.ru/api-reference/bx24-js-sdk/how-to-call-rest-methods/files.html">Обработка файлов</a>.</li>
     * </ul>
     */
    DISK_FOLDER_UPLOADFILE("disk.folder.uploadfile"),
    /**
     * Метод возвращает публичную ссылку.<br>
     */
    DISK_FOLDER_GETEXTERNALLINK("disk.folder.getExternalLink"),

// Права доступа: https://dev.1c-bitrix.ru/rest_help/disk/permissions/index.php

    /**
     * Метод позволяет получить список уровней доступов, которые можно использовать в назначении прав.<br>
     */
    DISK_RIGHTS_GETTASKS("disk.rights.getTasks"),

// Прикреплённый файл: https://dev.1c-bitrix.ru/rest_help/disk/attachedobject/index.php

    /**
     * Возвращает информацию о прикрепленном файле.<br>
     */
    DISK_ATTACHEDOBJECT_GET("disk.attachedObject.get"),

// Файл: https://dev.1c-bitrix.ru/rest_help/disk/file/index.php

    /**
     * Возвращает описание полей файла.<br>
     */
    DISK_FILE_GETFIELDS("disk.file.getfields"),
    /**
     * Возвращает файл по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор файла.</li>
     * </ul>
     */
    DISK_FILE_GET("disk.file.get"),
    /**
     * Переименовывает файл.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code newName}</b> - Новое имя.</li>
     * <li><b>{@code id}</b> - Идентификатор файла.</li>
     * </ul>
     */
    DISK_FILE_RENAME("disk.file.rename"),
    /**
     * Копирует файл в указанную папку.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code targetFolderId}</b> - Идентификатор папки.</li>
     * <li><b>{@code id}</b> - Идентификатор файла.</li>
     * </ul>
     */
    DISK_FILE_COPYTO("disk.file.copyto"),
    /**
     * Перемещает файл в указанную папку.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code targetFolderId}</b> - Идентификатор папки.</li>
     * <li><b>{@code id}</b> - Идентификатор файла.</li>
     * </ul>
     */
    DISK_FILE_MOVETO("disk.file.moveto"),
    /**
     * Уничтожает файл навсегда.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор файла.</li>
     * </ul>
     */
    DISK_FILE_DELETE("disk.file.delete"),
    /**
     * Перемещает файл в корзину.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор файла.</li>
     * </ul>
     */
    DISK_FILE_MARKDELETED("disk.file.markdeleted"),
    /**
     * Восстанавливает файл из корзины.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор файла.</li>
     * </ul>
     */
    DISK_FILE_RESTORE("disk.file.restore"),
    /**
     * Загружает новую версию файла.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор файла.</li>
     * <li><b>{@code fileContent}</b> - Аналогично 'DETAIL_PICTURE' в примере <a href="https://apidocs.bitrix24.ru/api-reference/bx24-js-sdk/how-to-call-rest-methods/files.html">Обработка файлов</a>.</li>
     * </ul>
     */
    DISK_FILE_UPLOADVERSION("disk.file.uploadversion"),
    /**
     * Возвращает список версий файла.<br>
     */
    DISK_FILE_GETVERSIONS("disk.file.getVersions"),
    /**
     * Восстанавливает файл из конкретной версии.<br>
     */
    DISK_FILE_RESTOREFROMVERSION("disk.file.restoreFromVersion"),
    /**
     * Возвращает публичную ссылку на файл.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор файла.</li>
     * </ul>
     */
    DISK_FILE_GETEXTERNALLINK("disk.file.getExternalLink"),

// Хранилище: https://dev.1c-bitrix.ru/rest_help/disk/storage/index.php

    /**
     * Возвращает описание полей хранилища.<br>
     */
    DISK_STORAGE_GETFIELDS("disk.storage.getfields"),
    /**
     * Возвращает хранилище по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор хранилища.</li>
     * </ul>
     */
    DISK_STORAGE_GET("disk.storage.get"),
    /**
     * Переименовывает хранилище. Допустимо переименование только хранилища приложения (см. {@link #DISK_STORAGE_GETFORAPP}).<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code newName}</b> - Новое имя.</li>
     * <li><b>{@code id}</b> - Идентификатор хранилища.</li>
     * </ul>
     */
    DISK_STORAGE_RENAME("disk.storage.rename"),
    /**
     * Возвращает список доступных хранилищ.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter}</b> - Необязательный параметр. Поддерживает фильтрацию по полям, которые указаны в disk.storage.getfields как USE_IN_FILTER: true.</li>
     * </ul>
     */
    DISK_STORAGE_GETLIST("disk.storage.getlist"),
    /**
     * Возвращает список типов хранилищ.<br>
     */
    DISK_STORAGE_GETTYPES("disk.storage.gettypes"),
    /**
     * Создает папку в корне хранилища.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code data}</b> - Массив, описывающий папку. Обязательное поле NAME - имя новой папки.</li>
     * <li><b>{@code id}</b> - Идентификатор хранилища.</li>
     * </ul>
     */
    DISK_STORAGE_ADDFOLDER("disk.storage.addfolder"),
    /**
     * Возвращает список файлов и папок, которые находятся непосредственно в корне хранилища.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter}</b> - Необязательный параметр. Поддерживает фильтрацию по полям, которые указаны в disk.folder.getfields как USE_IN_FILTER: true.</li>
     * <li><b>{@code id}</b> - Идентификатор хранилища.</li>
     * </ul>
     */
    DISK_STORAGE_GETCHILDREN("disk.storage.getchildren"),
    /**
     * Загружает новый файл в корне хранилища.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code data}</b> - Массив, описывающий файл. Обязательное поле NAME - имя нового файла.</li>
     * <li><b>{@code rights}</b> - Необязательный, по умолчанию пустой массив. Массив прав доступа на загружаемый файл.</li>
     * <li><b>{@code generateUniqueName}</b> - Необязательный, по умолчанию false. При указании true, для загружаемого файла будет уникализировано имя, добавлением суффикса (1), (2) Пример: avatar (1).jpg avatar (2).jpg и т.п.</li>
     * <li><b>{@code id}</b> - Идентификатор хранилища.</li>
     * <li><b>{@code fileContent}</b> - Аналогично 'DETAIL_PICTURE' в примере <a href="https://apidocs.bitrix24.ru/api-reference/bx24-js-sdk/how-to-call-rest-methods/files.html">Обработка файлов</a>.</li>
     * </ul>
     */
    DISK_STORAGE_UPLOADFILE("disk.storage.uploadfile"),
    /**
     * Возвращает описание хранилища, с которым может работать приложение для хранения своих данных (файлов и папок).<br>
     */
    DISK_STORAGE_GETFORAPP("disk.storage.getforapp"),

// Методы работы с Живой лентой: https://dev.1c-bitrix.ru/rest_help/log/index.php

    /**
     * Добавляет в Ленту новостей сообщение от имени текущего пользователя.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code POST_TITLE}</b> - Заголовок сообщения (опционально).</li>
     * <li><b>{@code SPERM}</b> - Права на просмотр сообщения (опционально), по умолчанию - array("UA") - всем авторизованным пользователям. Данный параметр поддерживается, но удобнее применять DEST.</li>
     * <li><b>{@code IMPORTANT_DATE_END}</b> - Указывается значение даты/времени, до которого сообщение будет считаться важным.</li>
     * <li><b>{@code IMPORTANT}</b> - По умолчанию N. Сообщение ленты публикуется как "важное".</li>
     * <li><b>{@code USER_ID}</b> - ID автора записи (опционально, по умолчанию - текущий пользователь, другое значение доступно только администратору в коробочной версии).</li>
     * <li><b>{@code POST_MESSAGE}</b> - Текст сообщения.</li>
     * <li><b>{@code FILES}</b> - Файлы, массив значений, описанный по правилам, приведенным тут.</li>
     * <li><b>{@code DEST}</b> - Права на просмотр сообщения (опционально), по умолчанию - array("UA") - всем авторизованным пользователям. Можно использовать значения: SG<X> - рабочая группа, например SG1 - рабочая группа с идентификатором 1; U<X> - пользователь, например U45 - пользователь с идентификатором 45; DR<X> - отдел, включая подразделы, например DR23 - раздел с идентификатором 23; UA - все авторизованные пользователи. G<X> - группа пользователей, например G2 - группа пользователей с идентификатором 2.</li>
     * </ul>
     */
    LOG_BLOGPOST_ADD("log.blogpost.add"),
    /**
     * Отдает массив ID пользователей, прочитавших Важное сообщение.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code POST_ID}</b> - ID поста блога, являющегося Важным сообщением.</li>
     * </ul>
     */
    LOG_BLOGPOST_GETUSERS_IMPORTANT("log.blogpost.getusers.important"),
    /**
     * Возвращает массив с доступными текущему пользователю сообщениями Ленты новостей. Каждое из сообщений представляет собой массив значений полей (включая пользовательские поля).<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code POST_ID}</b> - Числовой ID сообщения для фильтрации (опционально).</li>
     * <li><b>{@code LOG_RIGHTS}</b> - Фильтрация по получателю. Значением фильтра может быть как строка (конкретное значение прав), так и массив. Права на просмотр сообщения (опционально), по умолчанию - array("UA") - всем авторизованным пользователям. Можно использовать значения: SG<X> - рабочая группа с ID=X; U<X> - пользователь с ID=X; DR<X> - отдел с ID=X, включая подразделы; UA - все авторизованные пользователи. G - группа пользователей (например, G2).</li>
     * </ul>
     */
    LOG_BLOGPOST_GET("log.blogpost.get"),
    /**
     * Удаляет сообщение Ленты новостей.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code POST_ID}</b> - Числовой ID сообщения.</li>
     * <li><b>{@code USER_ID}</b> - ID пользователя, который выполняет действие (опционально, по умолчанию - текущий пользователь, другое значение доступно только администратору в коробочной версии)</li>
     * </ul>
     */
    LOG_BLOGPOST_DELETE("log.blogpost.delete"),
    /**
     * Добавляет получателей в сообщение Ленты новостей.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code POST_ID}</b> - ID сообщения Ленты новостей.</li>
     * <li><b>{@code USER_ID}</b> - ID пользователя, добавляющего новых получателей (опционально, по умолчанию - текущий пользователь, другое значение доступно только администратору в коробочной версии).</li>
     * <li><b>{@code DEST}</b> - Права на просмотр сообщения. Можно использовать значения: SG<X> - рабочая группа с ID=X; U<X> - пользователь с ID=X; DR<X> - отдел с ID=X, включая подразделы; UA - все авторизованные пользователи.</li>
     * </ul>
     */
    LOG_BLOGPOST_SHARE("log.blogpost.share"),
    /**
     * Изменяет сообщение Ленты новостей.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code POST_ID}</b> - ID сообщения Ленты новостей.</li>
     * <li><b>{@code POST_TITLE}</b> - Заголовок сообщения (опционально).</li>
     * <li><b>{@code SPERM}</b> - Права на просмотр сообщения (опционально), по умолчанию - array("UA") - всем авторизованным пользователям. Данный параметр поддерживается, но удобнее применять DEST.</li>
     * <li><b>{@code USER_ID}</b> - ID автора записи (опционально, по умолчанию - текущий пользователь, другое значение доступно только администратору в коробочной версии).</li>
     * <li><b>{@code POST_MESSAGE}</b> - Текст сообщения.</li>
     * <li><b>{@code FILES}</b> - Файлы, массив значений, описанный по правилам, приведенным тут.</li>
     * <li><b>{@code DEST}</b> - Права на просмотр сообщения (опционально), по умолчанию - array("UA") - всем авторизованным пользователям. Можно использовать значения: SG<X> - рабочая группа с ID=X; U<X> - пользователь с ID=X; DR<X> - отдел с ID=X, включая подразделы; UA - все авторизованные пользователи.</li>
     * </ul>
     */
    LOG_BLOGPOST_UPDATE("log.blogpost.update"),
    /**
     * Добавляет комментарий к сообщению Ленты новостей.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code $POST_ID}</b> - ID сообщения</li>
     * <li><b>{@code $TEXT}</b> - Текст комментария</li>
     * <li><b>{@code $FILES}</b> - Файлы, массив значений, описанный по правилам, приведенным тут.</li>
     * <li><b>{@code $USER_ID}</b> - Автор комментария. Доступно только для администратора. По умолчанию - текущий пользователь.</li>
     * </ul>
     */
    LOG_BLOGCOMMENT_ADD("log.blogcomment.add"),

// Задачи: https://dev.1c-bitrix.ru/rest_help/tasks/task/tasks/index.php

    /**
     * Создает задачу.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Поля, соответствующие доступному списку полей {@link #TASKS_TASK_GETFIELDS}.</li>
     * </ul>
     */
    TASKS_TASK_ADD("tasks.task.add"),
    /**
     * Позволяет принять задачу.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code taskId}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASKS_TASK_APPROVE("tasks.task.approve"),
    /**
     * Переводит задачу в статус «завершена».<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code taskId}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASKS_TASK_COMPLETE("tasks.task.complete"),
    /**
     * Получает счетчики пользователя.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code groupId}</b> - Идентификатор группы пользователя.</li>
     * <li><b>{@code type}</b> - Роль счетчиков: view_all - все роли; view_role_responsible - роль "Делаю"; view_role_accomplice - роль "Помогаю"; view_role_auditor - роль "Наблюдаю"; view_role_originator - роль "Поручил".</li>
     * <li><b>{@code userId}</b> - Идентификатор пользователя (пространство имен). Если userId не указан, то берется текущий пользователь.</li>
     * </ul>
     */
    TASKS_TASK_COUNTERS_GET("tasks.task.counters.get"),
    /**
     * Переводит задачу в статус «отложена».<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code taskId}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASKS_TASK_DEGER("tasks.task.deger"),
    /**
     * Метод для делегирования задачи.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code userId}</b> - Идентификатор пользователя, на которого необходимо делегировать задачу.</li>
     * <li><b>{@code taskId}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASKS_TASK_DELEGATE("tasks.task.delegate"),
    /**
     * Удаляет задачу.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code taskId}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASKS_TASK_DELETE("tasks.task.delete"),
    /**
     * Позволяет отклонить задачу.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code taskId}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASKS_TASK_DISAPPROVE("tasks.task.disapprove"),
    /**
     * Добавляет задачи в "Избранное".<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code taskId}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASKS_TASK_FAVORITE_ADD("tasks.task.favorite.add"),
    /**
     * Удаляет задачи из "Избранного".<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code taskId}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASKS_TASK_FAVORITE_REMOVE("tasks.task.favorite.remove"),
    /**
     * Прикрепляет загруженный на диск файл к задаче.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code params}</b> - Массив с дополнительными параметрами, по умолчанию пустой. В настоящее время не используется.</li>
     * <li><b>{@code taskId}</b> - Идентификатор задачи.</li>
     * <li><b>{@code fileId}</b> - Идентификатор загруженного на диск файла.</li>
     * </ul>
     */
    TASKS_TASK_FILES_ATTACH("tasks.task.files.attach"),
    /**
     * Возвращает информацию о конкретной задаче.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code select}</b> - Массив полей записей, которые будут возвращены методом. Можно указать только те поля, которые необходимы. Поле может принимать значения: ID - идентификатор задачи; PARENT_ID - идентификатор родительской задачи; TITLE - название задачи; DESCRIPTION - описание; MARK - оценка; PRIORITY - приоритет: 0 - низкий; 1 - средний; 2 - высокий. STATUS - статус; MULTITASK - множественная задача; NOT_VIEWED - непросмотренная задача; REPLICATE - повторяемая задача; GROUP_ID - рабочая группа. STAGE_ID - стадия; CREATED_BY - постановщик; CREATED_DATE - дата создания; RESPONSIBLE_ID - исполнитель; ACCOMPLICE - идентификатор соисполнителя; AUDITOR - идентификатор наблюдателя CHANGED_BY - кем изменена задача; CHANGED_DATE - дата изменения; STATUS_CHANGED_DATE - кто изменил статус; CLOSED_BY - кто закрыл задачу; CLOSED_DATE - дата закрытия задачи; DATE_START - дата начала; DEADLINE - крайний срок; START_DATE_PLAN - плановое начало; END_DATE_PLAN - плановое завершение; GUID - GUID (статистически уникальный 128-битный идентификатор); XML_ID - внешний код; COMMENTS_COUNT - количество комментариев; NEW_COMMENTS_COUNT - количество новых комментариев; TASK_CONTROL - принять в работу; ADD_IN_REPORT - добавить в отчет; FORKED_BY_TEMPLATE_ID - создано автоматически из шаблона; TIME_ESTIMATE - затраченное время; TIME_SPENT_IN_LOGS - затраченное время из истории изменений; MATCH_WORK_TIME - пропустить выходные дни; FORUM_TOPIC_ID - идентификатор темы форума; FORUM_ID - идентификатор форума; SITE_ID - идентификатор сайта; SUBORDINATE - задача подчиненного; FAVORITE - Избранное; VIEWED_DATE - дата последнего просмотра; SORTING - индекс сортировки; DURATION_PLAN - затрачено (план); DURATION_FACT - затрачено (фактически); DURATION_TYPE - Тип продолжительности: 0 - секунды 1 - минуты 2 - часы 3 - дни 4 - недели 5 - месяцы 6 - года UF_CRM_TASK - привязка к элементам CRM. По умолчанию будут возвращены все невычисляемые поля основной таблицы запроса. Для получения пользовательских полей и поля привязки к CRM сущностям (UF_CRM_TASK), их нужно будет напрямую указать в SELECT. Список полей можно уточнить, отправив запрос tasks.task.getFields.</li>
     * <li><b>{@code taskId}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASKS_TASK_GET("tasks.task.get"),
    /**
     * Возвращает все доступные поля.<br>
     */
    TASKS_TASK_GETFIELDS("tasks.task.getFields"),
    /**
     * Метод для проверки доступа к задаче.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code taskId}</b> - Идентификатор задачи.</li>
     * <li><b>{@code users}</b> - Массив ID пользователей , которым требуется проверить доступ. По умолчанию подставляется текущий пользователь.</li>
     * </ul>
     */
    TASKS_TASK_GETACCESS("tasks.task.getaccess"),
    /**
     * Получает историю задачи.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code taskId}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASKS_TASK_HISTORY_LIST("tasks.task.history.list"),
    /**
     * Возвращает массив задач, каждая из которых содержит массив полей.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter}</b> - Массив вида {"фильтруемое_поле": "значение фильтра" [, ...]}. Фильтруемое поле может принимать значения: ID - идентификатор задачи; PARENT_ID - идентификатор родительской задачи; GROUP_ID - идентификатор рабочей группы; CREATED_BY - постановщик; STATUS_CHANGED_BY - пользователь, последним изменивший статус задачи; PRIORITY - приоритет; FORUM_TOPIC_ID - идентификатор темы форума; RESPONSIBLE_ID - исполнитель; TITLE - название задачи (можно искать по шаблону [%_]) ; TAG - тэг; REAL_STATUS - статус задачи. Константы отражающие статусы задач: STATE_NEW = 1; STATE_PENDING = 2; STATE_IN_PROGRESS = 3; STATE_SUPPOSEDLY_COMPLETED = 4; STATE_COMPLETED = 5; STATE_DEFERRED = 6; STATE_DECLINED = 7; STATUS - статус для сортировки. Аналогичен REAL_STATUS, но имеет дополнительно три мета-статуса: -3 - задача почти просрочена; -2 - не просмотренная задача; -1 - просроченная задача. MARK - оценка; SITE_ID - идентификатор сайта; ADD_IN_REPORT - задача в отчете (Y|N); DATE_START - дата начала выполнения; DEADLINE - крайний срок; CREATED_DATE - дата создания; CLOSED_DATE - дата завершения; CHANGED_DATE - дата последнего изменения; ACCOMPLICE - идентификатор соисполнителя; AUDITOR - идентификатор наблюдателя; DEPENDS_ON - идентификатор предыдущей задачи; ONLY_ROOT_TASKS - только задачи, которые не являются подзадачами (корневые задачи), а также подзадачи родительской задачи, к которой текущий пользователь доступа не имеет (Y|N). STAGE_ID - стадия; UF_CRM_TASK - элементы CRM; Перед названием фильтруемого поля может указать тип фильтрации: "!" - не равно "<" - меньше "<=" - меньше либо равно ">" - больше ">=" - больше либо равно "значения фильтра" - одиночное значение или массив. Необязательный. По умолчанию записи не фильтруются.</li>
     * <li><b>{@code select}</b> - Массив полей записей, которые будут возвращены методом. Можно указать только те поля, которые необходимы. Поле сортировки может принимать значения: ID - идентификатор задачи; PARENT_ID - идентификатор родительской задачи; TITLE - название задачи; DESCRIPTION - описание; MARK - оценка; PRIORITY - приоритет: 0 - низкий; 1 - средний; 2 - высокий. STATUS - статус; MULTITASK - множественная задача; NOT_VIEWED - непросмотренная задача; REPLICATE - повторяемая задача; GROUP_ID - рабочая группа. STAGE_ID - стадия; CREATED_BY - постановщик; CREATED_DATE - дата создания; RESPONSIBLE_ID - исполнитель; ACCOMPLICES - идентификатор соисполнителя; AUDITORS - идентификатор аудитора; CHANGED_BY - кем изменена задача; CHANGED_DATE - дата изменения; STATUS_CHANGED_DATE - дата изменения статуса; CLOSED_BY - кто закрыл задачу; CLOSED_DATE - дата закрытия задачи; DATE_START - дата начала; DEADLINE - крайний срок; START_DATE_PLAN - плановое начало; END_DATE_PLAN - плановое завершение; GUID - GUID (статистически уникальный 128-битный идентификатор); XML_ID - внешний код; COMMENTS_COUNT - количество комментариев; NEW_COMMENTS_COUNT - количество новых комментариев; TASK_CONTROL - принять в работу; ADD_IN_REPORT - добавить в отчет; FORKED_BY_TEMPLATE_ID - создано из шаблона; TIME_ESTIMATE - затраченное время; TIME_SPENT_IN_LOGS - затраченное время из истории изменений; MATCH_WORK_TIME - пропустить выходные дни; FORUM_TOPIC_ID - идентификатор темы форума; FORUM_ID - идентификатор форума; SITE_ID - идентификатор сайта; SUBORDINATE - задача подчиненного; FAVORITE - Избранное; VIEWED_DATE - дата последнего просмотра; SORTING - индекс сортировки; DURATION_PLAN - затрачено (план); DURATION_FACT - затрачено (фактически); DURATION_TYPE - тип единицы измерения в планируемой длительности: days, hours или minutes По умолчанию будут возвращены все невычисляемые поля основной таблицы запроса. Список полей можно уточнить, отправив запрос {@link #TASKS_TASK_GETFIELDS}.</li>
     * <li><b>{@code limit}</b> - Число записей. Параметр указывается, если нужно получить число записей более значения по умолчанию (50). Все записи одним запросом вернуть нет возможности, это ограничение всех методов REST API. Вы можете несколькими запросами по 50 записей в ответе получить все лиды. Для этого просто передавайте параметр start со значением, кратным 50. Пример: start=0
     * start=50
     * start=100</li>
     * <li><b>{@code start}</b> - Сколько первых записей пропускать в результате. В связи с техническими ограничениями значение этого параметра всегда должно быть кратно 50. Например, при значении 50 в результате будут отображаться 51-я запись и последующие, а первые 50 записей будут пропущены. При значении -1 будет отключён подсчёт количества.</li>
     * <li><b>{@code order}</b> - Массив для сортировки результата. Массив вида {"поле_сортировки": 'направление сортировки' [, ...]}. Поле для сортировки может принимать значения: ID - идентификатор задачи; TITLE - название задачи; TIME_SPENT_IN_LOGS - затраченное время из истории изменений; DATE_START - дата старта; CREATED_DATE - дата создания; CHANGED_DATE - дата последнего изменения; CLOSED_DATE - дата завершения; START_DATE_PLAN - плановое начало; END_DATE_PLAN - плановое завершение; DEADLINE - крайний срок; REAL_STATUS - статус задачи. Константы отражающие статусы задач: STATE_NEW = 1; STATE_PENDING = 2; STATE_IN_PROGRESS = 3; STATE_SUPPOSEDLY_COMPLETED = 4; STATE_COMPLETED = 5; STATE_DEFERRED = 6; STATE_DECLINED = 7; STATUS_COMPLETE - флаг завершенности задачи; PRIORITY - приоритет; MARK - оценка; CREATED_BY_LAST_NAME - постановщик; RESPONSIBLE_LAST_NAME - исполнитель; GROUP_ID - рабочая группа. TIME_ESTIMATE - затраченное время; ALLOW_CHANGE_DEADLINE - флаг "Разрешить исполнителю менять крайний срок"; ALLOW_TIME_TRACKING - флаг включения учета затраченного времени по задаче; MATCH_WORK_TIME - пропустить выходные дни; FAVORITE - Избранное; SORTING - индекс сортировки; MESSAGE_ID - идентификатор поискового индекса; Примечание: В коробочной версии этот список полей для сортировки можно вернуть методом CTasks::getAvailableOrderFields(). Направление сортировки может принимать значения: asc - по возрастанию; desc - по убыванию; Необязательный. По умолчанию фильтруется по убыванию идентификатора задачи.</li>
     * </ul>
     */
    TASKS_TASK_LIST("tasks.task.list"),
    /**
     * Останавливает выполнение задачи, переводя ее в статус "ждет выполнения".<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code taskId}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASKS_TASK_PAUSE("tasks.task.pause"),
    /**
     * Возобновляет задачу после ее завершения.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code taskId}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASKS_TASK_RENEW("tasks.task.renew"),
    /**
     * Переводит задачу в статус «выполняется».<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code taskId}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASKS_TASK_START("tasks.task.start"),
    /**
     * Позволяет наблюдать за задачей.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code taskId}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASKS_TASK_STARTWATCH("tasks.task.startwatch"),
    /**
     * Останавливает наблюдение за задачей.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code taskId}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASKS_TASK_STOPWATCH("tasks.task.stopwatch"),
    /**
     * Обновляет задачу.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Поля, соответствующие доступному списку полей tasks.task.getfields.</li>
     * <li><b>{@code taskId}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASKS_TASK_UPDATE("tasks.task.update"),

// item: https://dev.1c-bitrix.ru/rest_help/tasks/task/item/index.php

    /**
     * Создает новую задачу.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKDATA}</b> - Массив полей данных по задаче (TITLE, DESCRIPTION и т.д.).</li>
     * </ul>
     */
    TASK_ITEM_ADD("task.item.add"),
    /**
     * Удаляет задачу.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASK_ITEM_DELETE("task.item.delete"),
    /**
     * Возвращает массив данных о задаче.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASK_ITEM_GETDATA("task.item.getdata"),
    /**
     * Показ списка методов.<br>
     */
    TASK_ITEM_GETMANIFEST("task.item.getmanifest"),
    /**
     * Возвращает массив задач, каждая из которых содержит массив полей.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ORDER}</b> - Массив для сортировки результата. Массив вида {"поле_сортировки": 'направление сортировки' [, ...]}. Поле для сортировки может принимать значения: TITLE - название задачи; DATE_START - дата старта; DEADLINE - крайний срок; STATUS - статус; PRIORITY - приоритет; MARK - оценка; CREATED_BY - постановщик; RESPONSIBLE_ID - исполнитель; GROUP_ID - рабочая группа. Направление сортировки может принимать значения: asc - по возрастанию; desc - по убыванию; Необязательный. По умолчанию фильтруется по убыванию идентификатора задачи.</li>
     * <li><b>{@code FILTER}</b> - Массив вида {"фильтруемое_поле": "значение фильтра" [, ...]}. Фильтруемое поле может принимать значения: ID - идентификатор задачи; PARENT_ID - идентификатор родительской задачи; GROUP_ID - идентификатор рабочей группы; CREATED_BY - постановщик; STATUS_CHANGED_BY - пользователь, последним изменивший статус задачи; PRIORITY - приоритет; FORUM_TOPIC_ID - идентификатор темы форума; RESPONSIBLE_ID - исполнитель; TITLE - название задачи (можно искать по шаблону [%_]) ; TAG - тэг; REAL_STATUS - статус задачи. Константы отражающие статусы задач: STATE_NEW = 1; STATE_PENDING = 2; STATE_IN_PROGRESS = 3; STATE_SUPPOSEDLY_COMPLETED = 4; STATE_COMPLETED = 5; STATE_DEFERRED = 6; STATE_DECLINED = 7; STATUS - статус для сортировки. Аналогичен REAL_STATUS, но имеет дополнительно два мета статуса: -2 - не просмотренная задача; -1 - просроченная задача. MARK - оценка; SITE_ID - идентификатор сайта; ADD_IN_REPORT - задача в отчете (Y|N); DATE_START - дата начала выполнения; DEADLINE - крайний срок; CREATED_DATE - дата создания; CLOSED_DATE - дата завершения; CHANGED_DATE - дата последнего изменения; ACCOMPLICE - идентификатор соисполнителя; AUDITOR - идентификатор аудитора; DEPENDS_ON - идентификатор предыдущей задачи; ONLY_ROOT_TASKS - только задачи, которые не являются подзадачами (корневые задачи), а также подзадачи родительской задачи, к которой текущий пользователь доступа не имеет (Y|N). Перед названием фильтруемого поля может указать тип фильтрации: "!" - не равно "<" - меньше "<=" - меньше либо равно ">" - больше ">=" - больше либо равно "значения фильтра" - одиночное значение или массив. Необязательный. По умолчанию записи не фильтруются. Внимание! Для метода {@code #TASK_ITEM_LIST} обязательно нужно указывать сортировку для фильтрации. Фильтрация без сортировки возвращает все задачи.</li>
     * <li><b>{@code PARAMS}</b> - Массив для опций вызова. Элементом является массив NAV_PARAMS вида {"опция вызова": 'значение' [, ...]}, хранящий следующие опции: nPageSize - количество элементов на странице. В целях ограничения нагрузки на постраничную навигацию наложено ограничение в 50 задач. iNumPage - номер страницы при постраничной навигации.</li>
     * <li><b>{@code SELECT}</b> - Массив полей записей, которые будут возвращены методом. Можно указать только те поля, которые необходимы. Если в массиве присутствует значение "*", то будут возвращены все доступные поля. Значение по умолчанию - пустой массив array() - означает, что будут возвращены все поля основной таблицы запроса.</li>
     * </ul>
     */
    TASK_ITEM_LIST("task.item.list"),
    /**
     * Обновляет данные по задаче.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи.</li>
     * <li><b>{@code TASKDATA}</b> - Список полей с новыми значениями.</li>
     * </ul>
     */
    TASK_ITEM_UPDATE("task.item.update"),
    /**
     * Возвращает описание задачи.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи.</li>
     * <li><b>{@code FORMAT}</b> - Допустимые значения: 1 (соответствует PHP-константе CTaskItem::DESCR_FORMAT_RAW) — описание будет возвращено в том формате, в котором хранится в БД (HTML, либо BB-code), обработка санитайзером производиться не будет; 2 (соответствует PHP-константе CTaskItem::DESCR_FORMAT_HTML) — описание будет возвращено в формате HTML, предварительно будет обработано санитайзером (если это включено в настройках модуля задач); 3 (соответствует PHP-константе CTaskItem::DESCR_FORMAT_PLAIN_TEXT) — описание будет возвращено в виде «плоского» текста (без HTML-тегов).</li>
     * </ul>
     */
    TASK_ITEM_GETDESCRIPTION("task.item.getdescription"),
    /**
     * Возвращает массив, содержащий ссылки на файлы, прикрепленные к задаче.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASK_ITEM_GETFILES("task.item.getfiles"),
    /**
     * Возвращает массив, содержащий идентификаторы задач, от которых зависит задача.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASK_ITEM_GETDEPENDSON("task.item.getdependson"),
    /**
     * Возвращает массив, идентификаторов допустимых действий над задачей.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASK_ITEM_GETALLOWEDACTIONS("task.item.getallowedactions"),
    /**
     * Возвращает массив, ключи которого являются названиями действий, а значения показывают, допустимо действие или нет.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASK_ITEM_GETALLOWEDTASKACTIONSASSTRINGS("task.item.getallowedtaskactionsasstrings"),
    /**
     * Проверяет, разрешено ли действие.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи.</li>
     * <li><b>{@code ACTIONID}</b> - Идентификатор проверяемого действия (см. константы метода {@link #TASK_ITEM_GETALLOWEDACTIONS}).</li>
     * </ul>
     */
    TASK_ITEM_ISACTIONALLOWED("task.item.isactionallowed"),
    /**
     * Делегирует задачу новому пользователю.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи.</li>
     * <li><b>{@code USERID}</b> - Идентификатор нового исполнителя (ответственного).</li>
     * </ul>
     */
    TASK_ITEM_DELEGATE("task.item.delegate"),
    /**
     * Переводит задачу в статус «выполняется».<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASK_ITEM_STARTEXECUTION("task.item.startexecution"),
    /**
     * Переводит задачу в статус «отложена».<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASK_ITEM_DEFER("task.item.defer"),
    /**
     * Переводит задачу в статус «завершена» или «условно завершена (ждет контроля исполнителя)».<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASK_ITEM_COMPLETE("task.item.complete"),
    /**
     * Переводит задачу в статус «не выполняется».<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASK_ITEM_RENEW("task.item.renew"),
    /**
     * Переводит задачу, ожидающую контроля, в статус «завершена».<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASK_ITEM_APPROVE("task.item.approve"),
    /**
     * Переводит задачу, ожидающую контроля, в статус «не выполняется».<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASK_ITEM_DISAPPROVE("task.item.disapprove"),
    /**
     * Добавляет задачу в Избранное.<br>
     */
    TASK_ITEM_ADDTOFAVOURITE("task.item.addtofavourite"),
    /**
     * Удаляет задачу из Избранного.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code auth}</b> - Токен авторизации.</li>
     * <li><b>{@code PARAMS}</b> - Параметр содержит ключ AFFECT_CHILDREN. Он указывает, добавлять ли в избранное подзадачи данной задачи.</li>
     * <li><b>{@code TASK_ID}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASK_ITEM_DELETEFROMFAVORITE("task.item.deletefromfavorite"),
    /**
     * Загружает к задаче файл.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code CONTENT}</b> - Содержимое файла в base64.</li>
     * <li><b>{@code TASK_ID}</b> - Идентификатор задачи.</li>
     * <li><b>{@code NAME}</b> - Имя файла.</li>
     * </ul>
     */
    TASK_ITEM_ADDFILE("task.item.addfile"),
    /**
     * Удаляет привязку файла к задаче.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code auth}</b> - Токен авторизации.</li>
     * <li><b>{@code ATTACHMENT_ID}</b> - Идентификатор прикрепленного файла.</li>
     * <li><b>{@code TASK_ID}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASK_ITEM_DELETEFILE("task.item.deletefile"),
    /**
     * Возвращает историю изменений задачи.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ID}</b> - Идентификатор задачи. Обязательный параметр</li>
     * </ul>
     */
    TASK_LOGITEM_LIST("task.logitem.list"),

// commentitem: https://dev.1c-bitrix.ru/rest_help/tasks/task/commentitem/index.php

    /**
     * Возвращает список методов и их описание.<br>
     */
    TASK_COMMENTITEM_GETMANIFEST("task.commentitem.getmanifest"),
    /**
     * Возвращает список комментариев к задаче.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи. Обязательный параметр.</li>
     * <li><b>{@code ORDER}</b> - Массив для сортировки результата. Поле для сортировки может принимать значения: ID - идентификатор комментария; AUTHOR_ID - идентификатор автора комментария; AUTHOR_NAME - имя автора; AUTHOR_EMAIL - почтовый адрес автора; POST_DATE - дата публикации комментария. Направление сортировки может принимать значения: asc - по возрастанию; desc - по убыванию; Необязательный. По умолчанию фильтруется по убыванию идентификатора комментария.</li>
     * <li><b>{@code FILTER}</b> - Массив вида {"фильтруемое_поле": "значение фильтра" [, ...]}. Фильтруемое поле может принимать значения: ID - идентификатор комментария; AUTHOR_ID - идентификатор автора комментария; AUTHOR_NAME - имя автора; POST_DATE - дата публикации комментария. Перед названием фильтруемого поля может указать тип фильтрации: "!" - не равно; "<" - меньше; "<=" - меньше либо равно; ">" - больше; ">=" - больше либо равно. "значения фильтра" - одиночное значение или массив. Необязательный. По умолчанию записи не фильтруются.</li>
     * </ul>
     */
    TASK_COMMENTITEM_GETLIST("task.commentitem.getlist"),
    /**
     * Возвращает комментарий к задаче.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи. Обязательный параметр.</li>
     * <li><b>{@code ITEMID}</b> - Идентификатор комментария. Обязательный параметр.</li>
     * </ul>
     */
    TASK_COMMENTITEM_GET("task.commentitem.get"),
    /**
     * Создает новый комментарий к задаче.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи. Обязательный параметр.</li>
     * <li><b>{@code FIELDS}</b> - Массив полей данных по задаче (POST_MESSAGE). Обязательный параметр.</li>
     * </ul>
     */
    TASK_COMMENTITEM_ADD("task.commentitem.add"),
    /**
     * Обновляет данные комментария.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи. Обязательный параметр.</li>
     * <li><b>{@code FIELDS}</b> - Массив полей данных по комментарию (POST_MESSAGE). Обязательный параметр.</li>
     * <li><b>{@code ITEMID}</b> - Идентификатор комментария. Обязательный параметр.</li>
     * </ul>
     */
    TASK_COMMENTITEM_UPDATE("task.commentitem.update"),
    /**
     * Удаляет комментарий.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи. Обязательный параметр.</li>
     * <li><b>{@code ITEMID}</b> - Идентификатор комментария. Обязательный параметр.</li>
     * </ul>
     */
    TASK_COMMENTITEM_DELETE("task.commentitem.delete"),
    /**
     * Проверяет, разрешено ли действие.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи. Обязательный параметр.</li>
     * <li><b>{@code ITEMID}</b> - Идентификатор комментария. Обязательный параметр.</li>
     * <li><b>{@code ACTIONID}</b> - Идентификатор проверяемого действия: 1 - ACTION_COMMENT_ADD; 2 - ACTION_COMMENT_MODIFY; 3 - ACTION_COMMENT_REMOVE. Обязательный параметр.</li>
     * </ul>
     */
    TASK_COMMENTITEM_ISACTIONALLOWED("task.commentitem.isactionallowed"),

// Зависимости: https://dev.1c-bitrix.ru/rest_help/tasks/task/dependence/index.php

    /**
     * Метод добавляет зависимость<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code taskIdFrom}</b> - Идентификатор задачи от которой создаётся зависимость</li>
     * <li><b>{@code taskIdTo}</b> - Идентификатор задачи для которой создаётся зависимость</li>
     * <li><b>{@code linkType}</b> - Тип зависимости: const LINK_TYPE_START_START =      00; // Связь старт-старт
     * const LINK_TYPE_START_FINISH =     01; // Связь старт-финиш
     * const LINK_TYPE_FINISH_START =     02; // Связь финиш-старт
     * const LINK_TYPE_FINISH_FINISH =    03; // Связь финиш-финиш</li>
     * </ul>
     */
    TASK_DEPENDENCE_ADD("task.dependence.add"),
    /**
     * Метод удаляет зависимость<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code taskIdFrom}</b> - Идентификатор задачи от которой удаляется зависимость</li>
     * <li><b>{@code taskIdTo}</b> - Идентификатор задачи для которой удаляется зависимость</li>
     * <li><b>{@code linkType}</b> - Тип зависимости: const LINK_TYPE_START_START =      0x00; // Связь старт-старт
     * const LINK_TYPE_START_FINISH =     0x01; // Связь старт-финиш
     * const LINK_TYPE_FINISH_START =     0x02; // Связь финиш-старт
     * const LINK_TYPE_FINISH_FINISH =    0x03; // Связь финиш-финиш</li>
     * </ul>
     */
    TASK_DEPENDENCE_DELETE("task.dependence.delete"),

// Kanbanitem: https://dev.1c-bitrix.ru/rest_help/tasks/task/kanban/index.php

    /**
     * Метод добавляет стадии Канбана / Моего плана.<br>
     */
    TASK_STAGES_ADD("task.stages.add"),
    /**
     * Метод определяет, может ли текущий пользователь перемещать задачи в указанной сущности<br>
     */
    TASK_STAGES_CANMOVETASK("task.stages.canmovetask"),
    /**
     * Метод удаляет стадии Канбана / Моего плана.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code isAdmin}</b> - Если установлено true, то проверки прав происходить не будет. При условии, что запрашивающий является админом портала.</li>
     * </ul>
     */
    TASK_STAGES_DELETE("task.stages.delete"),
    /**
     * Метод получает стадии Канбана / Моего плана.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code entityId}</b> - Идентификатор сущности. Если равняется ID группы, то возвращаются стадии Канбана группы. При недостаточном уровне прав выводится ошибка доступа. Если параметр равен 0, то возвращаются стадии Моего плана текущего пользователя.</li>
     * <li><b>{@code isAdmin}</b> - Если установлено true, то проверки прав происходить не будет. При условии, что запрашивающий является админом портала.</li>
     * </ul>
     */
    TASK_STAGES_GET("task.stages.get"),
    /**
     * Метод перемещает задачи из одной стадии в другую.<br>
     */
    TASK_STAGES_MOVETASK("task.stages.movetask"),
    /**
     * Метод обновляет стадии Канбана / Моего плана.<br>
     */
    TASK_STAGES_UPDATE("task.stages.update"),

// checklistitem: https://dev.1c-bitrix.ru/rest_help/tasks/task/checklistitem/index.php

    /**
     * Возвращает список методов и их описание.<br>
     */
    TASK_CHECKLISTITEM_GETMANIFEST("task.checklistitem.getmanifest"),
    /**
     * Возвращает список элементов чек-листа в задаче.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи. Обязательный параметр.</li>
     * <li><b>{@code ORDER}</b> - Массив для сортировки результата. Поле для сортировки может принимать значения: ID - идентификатор элемента чек-листа; CREATED_BY - идентификатор пользователя, создавшего элемент; TOGGLED_BY - идентификатор пользователя, изменившего состояние элемента чек-листа; TOGGLED_DATE - время, когда было изменено состояние элемента чек-листа; TITLE - заголовок элемента чек-листа; SORT_INDEX - индекс сортировки элемента; IS_COMPLETE - элемент отмечен как выполненный; Направление сортировки может принимать значения: asc - по возрастанию; desc - по убыванию; Необязательный. По умолчанию фильтруется по убыванию идентификатора элемента чек-листа.</li>
     * </ul>
     */
    TASK_CHECKLISTITEM_GETLIST("task.checklistitem.getlist"),
    /**
     * Возвращает элемент чек-листа по его идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи. Обязательный параметр.</li>
     * <li><b>{@code ITEMID}</b> - Идентификатор элемента. Обязательный параметр.</li>
     * </ul>
     */
    TASK_CHECKLISTITEM_GET("task.checklistitem.get"),
    /**
     * Добавляет новый элемент чек-листа к задаче.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи. Обязательный параметр.</li>
     * <li><b>{@code FIELDS}</b> - Массив полей элемента чек-листа (TITLE, SORT_INDEX, IS_COMPLETE). Обязательный параметр.</li>
     * </ul>
     */
    TASK_CHECKLISTITEM_ADD("task.checklistitem.add"),
    /**
     * Обновляет данные элемента чек-листа.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи. Обязательный параметр.</li>
     * <li><b>{@code FIELDS}</b> - Массив полей полей элемента чек-листа (TITLE, SORT_INDEX, IS_COMPLETE). Обязательный параметр.</li>
     * <li><b>{@code ITEMID}</b> - Идентификатор элемента чек-листа. Обязательный параметр.</li>
     * </ul>
     */
    TASK_CHECKLISTITEM_UPDATE("task.checklistitem.update"),
    /**
     * Удаляет элемент чек-листа.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи. Обязательный параметр.</li>
     * <li><b>{@code ITEMID}</b> - Идентификатор элемента чек-листа. Обязательный параметр.</li>
     * </ul>
     */
    TASK_CHECKLISTITEM_DELETE("task.checklistitem.delete"),
    /**
     * Отмечает элемент чек-листа как выполненный.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи. Обязательный параметр.</li>
     * <li><b>{@code ITEMID}</b> - Идентификатор элемента чек-листа. Обязательный параметр.</li>
     * </ul>
     */
    TASK_CHECKLISTITEM_COMPLETE("task.checklistitem.complete"),
    /**
     * Отмечает выполненный элемент чек-листа как вновь активный.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи. Обязательный параметр.</li>
     * <li><b>{@code ITEMID}</b> - Идентификатор элемента чек-листа. Обязательный параметр.</li>
     * </ul>
     */
    TASK_CHECKLISTITEM_RENEW("task.checklistitem.renew"),
    /**
     * Помещает элемент чек-листа в списке после указанного.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи. Обязательный параметр.</li>
     * <li><b>{@code AFTERITEMID}</b> - Идентификатор элемента чек-листа, после которого будет помещен заданный элемент. Обязательный параметр.</li>
     * <li><b>{@code ITEMID}</b> - Идентификатор элемента чек-листа. Обязательный параметр.</li>
     * </ul>
     */
    TASK_CHECKLISTITEM_MOVEAFTERITEM("task.checklistitem.moveafteritem"),
    /**
     * Проверяет, разрешено ли действие для элемента чек-листа.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи. Обязательный параметр.</li>
     * <li><b>{@code ITEMID}</b> - Идентификатор элемента чек-листа. Обязательный параметр.</li>
     * <li><b>{@code ACTIONID}</b> - Идентификатор проверяемого действия: 1 - ACTION_ADD; 2 - ACTION_MODIFY; 3 - ACTION_REMOVE; 4 - ACTION_TOGGLE. Обязательный параметр.</li>
     * </ul>
     */
    TASK_CHECKLISTITEM_ISACTIONALLOWED("task.checklistitem.isactionallowed"),

// elapseditem: https://dev.1c-bitrix.ru/rest_help/tasks/task/elapseditem/index.php

    /**
     * Возвращает список методов и их описание.<br>
     */
    TASK_ELAPSEDITEM_GETMANIFEST("task.elapseditem.getmanifest"),
    /**
     * Возвращает список записей о затраченном времени по задаче.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи. Необязательный параметр.</li>
     * <li><b>{@code ORDER}</b> - Массив для сортировки результата. Поле для сортировки может принимать значения: ID - идентификатор записи о затраченном времени; USER_ID - идентификатор пользователя, от имени которого была сделана запись о затраченном времени; MINUTES - затраченное время, минуты; SECONDS - затраченное время, секунды; CREATED_DATE - дата создания записи; DATE_START - дата начала; DATE_STOP - дата конца. Направление сортировки может принимать значения: asc - по возрастанию; desc - по убыванию; Необязательный. По умолчанию фильтруется по убыванию идентификатора записи о затраченном времени.</li>
     * <li><b>{@code FILTER}</b> - Массив вида {"фильтруемое_поле": "значение фильтра" [, ...]}. Фильтруемое поле может принимать значения: ID - идентификатор комментария; USER_ID - идентификатор пользователя, от имени которого была сделана запись о затраченном времени; CREATED_DATE - дата создания записи; Перед названием фильтруемого поля может указать тип фильтрации: "!" - не равно; "<" - меньше; "<=" - меньше либо равно; ">" - больше; ">=" - больше либо равно. "значения фильтра" - одиночное значение или массив. Необязательный. По умолчанию записи не фильтруются.</li>
     * <li><b>{@code PARAMS}</b> - Массив для опций вызова. Элементом является массив NAV_PARAMS вида {"опция вызова": 'значение' [, ...]}, хранящий следующие опции: nPageSize - количество элементов на странице. В целях ограничения нагрузки на постраничную навигацию наложено ограничение в 50 записей. iNumPage - номер страницы при постраничной навигации.</li>
     * <li><b>{@code SELECT}</b> - Массив полей записей, которые будут возвращены методом. Можно указать только те поля, которые необходимы. Если в массиве присутствует значение "*", то будут возвращены все доступные поля. Значение по умолчанию - пустой массив array() - означает, что будут возвращены все поля основной таблицы запроса.</li>
     * </ul>
     */
    TASK_ELAPSEDITEM_GETLIST("task.elapseditem.getlist"),
    /**
     * Возвращает запись о затраченном времени по ее идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи. Обязательный параметр.</li>
     * <li><b>{@code ITEMID}</b> - Идентификатор записи. Обязательный параметр.</li>
     * </ul>
     */
    TASK_ELAPSEDITEM_GET("task.elapseditem.get"),
    /**
     * Добавляет затраченное время к задаче.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи.</li>
     * <li><b>{@code ARFIELDS}</b> - Массив, содержащий записи о пользователе, времени и комментарии (SECONDS , COMMENT_TEXT, USER_ID и CREATED_DATE).</li>
     * </ul>
     */
    TASK_ELAPSEDITEM_ADD("task.elapseditem.add"),
    /**
     * Удаляет запись о затраченном времени.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи.</li>
     * <li><b>{@code ITEMID}</b> - Идентификатор записи о затраченном времени.</li>
     * </ul>
     */
    TASK_ELAPSEDITEM_DELETE("task.elapseditem.delete"),
    /**
     * Проверяет разрешено ли действие.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи.</li>
     * <li><b>{@code ITEMID}</b> - Идентификатор записи о затраченном времени.</li>
     * <li><b>{@code ACTIONID}</b> - Идентификатор действия: 1 - ACTION_ELAPSED_TIME_ADD; 2 - ACTION_ELAPSED_TIME_MODIFY; 3 - ACTION_ELAPSED_TIME_REMOVE.</li>
     * </ul>
     */
    TASK_ELAPSEDITEM_ISACTIONALLOWED("task.elapseditem.isactionallowed"),
    /**
     * Изменяет параметры записи о затраченном времени.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TASKID}</b> - Идентификатор задачи.</li>
     * <li><b>{@code ARFIELDS}</b> - Массив, содержащий записи о времени и комментарии (SECONDS , COMMENT_TEXT и CREATED_DATE). Допустимо использовать MINUTES вместо SECONDS, но нельзя их использовать одновременно.</li>
     * <li><b>{@code ITEMID}</b> - Идентификатор записи о затраченном времени.</li>
     * </ul>
     */
    TASK_ELAPSEDITEM_UPDATE("task.elapseditem.update"),

// planner: https://dev.1c-bitrix.ru/rest_help/tasks/task/planner/index.php

    /**
     * Возвращает массив, содержащий идентификаторы задач в плане на день.<br>
     */
    TASK_PLANNER_GETLIST("task.planner.getlist"),

// task.item.userfield: https://dev.1c-bitrix.ru/rest_help/tasks/task/userfield/index.php

    /**
     * Получение всех доступных полей свойства.<br>
     */
    TASK_ITEM_USERFIELD_GETFIELDS("task.item.userfield.getfields"),
    /**
     * Получение всех доступных типов данных.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code auth}</b> - Токен авторизации.</li>
     * </ul>
     */
    TASK_ITEM_USERFIELD_GETTYPES("task.item.userfield.gettypes"),
    /**
     * Создание нового свойства.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code auth}</b> - Токен авторизации.</li>
     * <li><b>{@code PARAMS}</b> - Массив с параметрами свойства вида array("параметр": 'значение' [, ...]), содержащий следующие параметры: USER_TYPE_ID - тип данных пользовательского поля. Допустимые значения: string (Строка); double (Число); date (Дата); boolean (Да/Нет); FIELD_NAME - код поля; XML_ID - внешний код; EDIT_FORM_LABEL - подпись в форме форматирования (указывается на английском ('en') и русском ('ru") языках; LABEL - заголовок поля.</li>
     * </ul>
     */
    TASK_ITEM_USERFIELD_ADD("task.item.userfield.add"),
    /**
     * Получение свойства по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code auth}</b> - Токен авторизации.</li>
     * <li><b>{@code ID}</b> - Идентификатор пользовательского поля.</li>
     * </ul>
     */
    TASK_ITEM_USERFIELD_GET("task.item.userfield.get"),
    /**
     * Получение списка свойств.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ORDER}</b> - Массив для сортировки результата. Массив вида array("поле сортировки"=>"направление сортировки" [, ...]).</li>
     * <li><b>{@code FILTER}</b> - Массив фильтрации результата вида array("фильтруемое поле"=>"значение фильтра" [, ...]). Обязательный параметр.</li>
     * <li><b>{@code auth}</b> - Токен авторизации.</li>
     * </ul>
     */
    TASK_ITEM_USERFIELD_GETLIST("task.item.userfield.getlist"),
    /**
     * Редактирование параметров свойства.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code auth}</b> - Токен авторизации.</li>
     * <li><b>{@code DATA}</b> - Массив array("поле"=>"значение", ...). Содержит значения редактируемых параметров.</li>
     * <li><b>{@code ID}</b> - Идентификатор пользовательского поля.</li>
     * </ul>
     */
    TASK_ITEM_USERFIELD_UPDATE("task.item.userfield.update"),
    /**
     * Удаление свойства.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code auth}</b> - Токен авторизации.</li>
     * <li><b>{@code ID}</b> - Идентификатор пользовательского поля.</li>
     * </ul>
     */
    TASK_ITEM_USERFIELD_DELETE("task.item.userfield.delete"),

// Бэклог: https://dev.1c-bitrix.ru/rest_help/tasks/task/scrum/backlog/index.php

    /**
     * Метод добавляет бэклог в Скрам.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Поля, соответствующие доступному списку полей {@link #TASKS_API_SCRUM_BACKLOG_GETFIELDS}. Поле groupId обязательное.</li>
     * </ul>
     */
    TASKS_API_SCRUM_BACKLOG_ADD("tasks.api.scrum.backlog.add"),
    /**
     * Метод удаляет бэклог.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор бэклога. Обязательный параметр.</li>
     * </ul>
     */
    TASKS_API_SCRUM_BACKLOG_DELETE("tasks.api.scrum.backlog.delete"),
    /**
     * Метод возвращает значения полей бэклога по id Скрама.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code groupId}</b> - Идентификатор Скрама.</li>
     * </ul>
     */
    TASKS_API_SCRUM_BACKLOG_GET("tasks.api.scrum.backlog.get"),
    /**
     * Метод возвращает доступные поля бэклога.<br>
     */
    TASKS_API_SCRUM_BACKLOG_GETFIELDS("tasks.api.scrum.backlog.getFields"),
    /**
     * Метод изменяет бэклог.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор бэклога. Обязательный параметр.</li>
     * <li><b>{@code fields}</b> - Поля, соответствующие доступному списку полей {@link #TASKS_API_SCRUM_BACKLOG_GETFIELDS}.</li>
     * </ul>
     */
    TASKS_API_SCRUM_BACKLOG_UPDATE("tasks.api.scrum.backlog.update"),

// Спринты: https://dev.1c-bitrix.ru/rest_help/tasks/task/scrum/sprint/index.php

    /**
     * Метод добавляет спринт в Скрам.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Поля, соответствующие доступному списку полей {@link #TASKS_API_SCRUM_SPRINT_GETFIELDS}. Поле groupId обязательное. Доступные значения для полей дат dateStart и dateEnd: ('ISO 8601', timestamp). Доступные значения для поля status: ('active', 'planned', 'completed').</li>
     * </ul>
     */
    TASKS_API_SCRUM_SPRINT_ADD("tasks.api.scrum.sprint.add"),
    /**
     * Метод завершает активный спринт выбранного Скрама.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор Скрама. Обязательный параметр.</li>
     * </ul>
     */
    TASKS_API_SCRUM_SPRINT_COMPLETE("tasks.api.scrum.sprint.complete"),
    /**
     * Метод удаляет спринт.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор спринта. Обязательный параметр.</li>
     * </ul>
     */
    TASKS_API_SCRUM_SPRINT_DELETE("tasks.api.scrum.sprint.delete"),
    /**
     * Метод возвращает значения полей спринта по его id.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code sprintId}</b> - Идентификатор спринта.</li>
     * </ul>
     */
    TASKS_API_SCRUM_SPRINT_GET("tasks.api.scrum.sprint.get"),
    /**
     * Метод возвращает доступные поля спринта.<br>
     */
    TASKS_API_SCRUM_SPRINT_GETFIELDS("tasks.api.scrum.sprint.getFields"),
    /**
     * Метод возвращает список спринтов.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter}</b> - Массив вида {"фильтруемое_поле": "значение фильтра" [, ...]}. Доступные поля описаны в таблице ниже.</li>
     * <li><b>{@code select}</b> - Массив полей записей, которые будут возвращены методом. Можно указать только те поля, которые необходимы. Если в массиве присутствует значение "*", то будут возвращены все доступные поля. Значение по умолчанию - пустой массив array() - означает, что будут возвращены все поля основной таблицы запроса.</li>
     * <li><b>{@code start}</b> - Номер страницы вывода. Работает для https запросов.</li>
     * <li><b>{@code order}</b> - Массив для сортировки результата. Массив вида {"поле_сортировки": 'направление сортировки' [, ...]}. Доступные поля описаны в таблице ниже. Направление сортировки может принимать значения: asc - по возрастанию; desc - по убыванию;</li>
     * </ul>
     */
    TASKS_API_SCRUM_SPRINT_LIST("tasks.api.scrum.sprint.list"),
    /**
     * Метод запускает спринт.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор спринта. Обязательный параметр.</li>
     * </ul>
     */
    TASKS_API_SCRUM_SPRINT_START("tasks.api.scrum.sprint.start"),
    /**
     * Метод изменяет спринт.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Поля, соответствующие доступному списку полей tasks.api.scrum.sprint.getFields. Доступные значения для полей дат dateStart и dateEnd: ('ISO 8601', timestamp). Доступные значения для поля status: ('active', 'planned', 'completed').</li>
     * </ul>
     */
    TASKS_API_SCRUM_SPRINT_UPDATE("tasks.api.scrum.sprint.update"),

// Эпики: https://dev.1c-bitrix.ru/rest_help/tasks/task/scrum/epic/index.php

    /**
     * Метод добавляет эпик в Скрам.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Поля, соответствующие доступному списку полей tasks.api.scrum.epic.getFields. Поля name и groupId обязательные. В поле files можно передать массив значений с идентификаторами файлов, указав префикс n.</li>
     * </ul>
     */
    TASKS_API_SCRUM_EPIC_ADD("tasks.api.scrum.epic.add"),
    /**
     * Метод удаляет эпик.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор эпика. Обязательный параметр.</li>
     * </ul>
     */
    TASKS_API_SCRUM_EPIC_DELETE("tasks.api.scrum.epic.delete"),
    /**
     * Метод возвращает значения полей эпика по его id.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code epicId}</b> - Идентификатор эпика.</li>
     * </ul>
     */
    TASKS_API_SCRUM_EPIC_GET("tasks.api.scrum.epic.get"),
    /**
     * Метод возвращает доступные поля эпика.<br>
     */
    TASKS_API_SCRUM_EPIC_GETFIELDS("tasks.api.scrum.epic.getFields"),
    /**
     * Метод возвращает список эпиков.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter}</b> - Массив вида {"фильтруемое_поле": "значение фильтра" [, ...]}. Доступные поля описаны в таблице ниже.</li>
     * <li><b>{@code select}</b> - Массив полей записей, которые будут возвращены методом. Можно указать только те поля, которые необходимы. Если в массиве присутствует значение "*", то будут возвращены все доступные поля. Значение по умолчанию - пустой массив array() - означает, что будут возвращены все поля основной таблицы запроса.</li>
     * <li><b>{@code start}</b> - Номер страницы вывода. Работает для https запросов.</li>
     * <li><b>{@code order}</b> - Массив для сортировки результата. Массив вида {"поле_сортировки": 'направление сортировки' [, ...]}. Доступные поля описаны в таблице ниже. Направление сортировки может принимать значения: asc - по возрастанию; desc - по убыванию;</li>
     * </ul>
     */
    TASKS_API_SCRUM_EPIC_LIST("tasks.api.scrum.epic.list"),
    /**
     * Метод изменяет эпик в Скраме.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор эпика.</li>
     * <li><b>{@code fields}</b> - Поля, соответствующие доступному списку полей {@link #TASKS_API_SCRUM_EPIC_GETFIELDS}. В поле files можно передать массив значений с идентификаторами файлов, указав префикс n. Если в files передать пустой массив, файлы удалятся.</li>
     * </ul>
     */
    TASKS_API_SCRUM_EPIC_UPDATE("tasks.api.scrum.epic.update"),

// Задачи скрама: https://dev.1c-bitrix.ru/rest_help/tasks/task/scrum/task/index.php

    /**
     * Метод возвращает значения полей задачи Скрама по её id.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор задачи.</li>
     * </ul>
     */
    TASKS_API_SCRUM_TASK_GET("tasks.api.scrum.task.get"),
    /**
     * Метод возвращает доступные поля задачи Скрама.<br>
     */
    TASKS_API_SCRUM_TASK_GETFIELDS("tasks.api.scrum.task.getFields"),
    /**
     * Метод создает или изменяет задачу Скрама.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор задачи.</li>
     * <li><b>{@code fields}</b> - Поля, соответствующие доступному списку полей {@link #TASKS_API_SCRUM_TASK_GETFIELDS}.</li>
     * </ul>
     */
    TASKS_API_SCRUM_TASK_UPDATE("tasks.api.scrum.task.update"),

// Канбан: https://dev.1c-bitrix.ru/rest_help/tasks/task/scrum/kanban/index.php

    /**
     * Метод создаёт стадию канбана Скрама.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Поля, соответствующие доступному списку полей {@link #TASKS_API_SCRUM_KANBAN_GETFIELDS}. Поля name и sprintId обязательные. Поле sort кратно 100. Доступные значения для поля type: (NEW, WORK, FINISH).</li>
     * </ul>
     */
    TASKS_API_SCRUM_KANBAN_ADDSTAGE("tasks.api.scrum.kanban.addStage"),
    /**
     * Метод добавляет задачу в канбан Скрама.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code sprintId}</b> - Идентификатор спринта. Обязательный параметр.</li>
     * <li><b>{@code taskId}</b> - Идентификатор задачи. Обязательный параметр.</li>
     * <li><b>{@code stageId}</b> - Идентификатор стадии. Обязательный параметр.</li>
     * </ul>
     */
    TASKS_API_SCRUM_KANBAN_ADDTASK("tasks.api.scrum.kanban.addTask"),
    /**
     * Метод удаляет стадию.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code stageId}</b> - Идентификатор стадии.</li>
     * </ul>
     */
    TASKS_API_SCRUM_KANBAN_DELETESTAGE("tasks.api.scrum.kanban.deleteStage"),
    /**
     * Метод удаляет задачу из канбана Скрама.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code sprintId}</b> - Идентификатор спринта. Обязательный параметр.</li>
     * <li><b>{@code taskId}</b> - Идентификатор задачи. Обязательный параметр.</li>
     * </ul>
     */
    TASKS_API_SCRUM_KANBAN_DELETETASK("tasks.api.scrum.kanban.deleteTask"),
    /**
     * Метод возвращает доступные поля стадии канбана.<br>
     */
    TASKS_API_SCRUM_KANBAN_GETFIELDS("tasks.api.scrum.kanban.getFields"),
    /**
     * Метод возвращает стадии канбана по id спринта.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code sprintId}</b> - Идентификатор спринта.</li>
     * </ul>
     */
    TASKS_API_SCRUM_KANBAN_GETSTAGES("tasks.api.scrum.kanban.getStages"),
    /**
     * Метод изменяет стадию канбана Скрама.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Поля, соответствующие доступному списку полей {@link #TASKS_API_SCRUM_KANBAN_GETFIELDS}. Доступные для обновления поля: (name, sprintId, sort, type, color). Необновляемые поля можно не передавать. Поле sort кратно 100. Доступные значения поля для type: (NEW, WORK, FINISH).</li>
     * <li><b>{@code stageId}</b> - Идентификатор стадии.</li>
     * </ul>
     */
    TASKS_API_SCRUM_KANBAN_UPDATESTAGE("tasks.api.scrum.kanban.updateStage"),

// Импорт отраслевых решений: https://dev.1c-bitrix.ru/rest_help/configuration_import/index.php

    /**
     * Регистрация импорта.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code data}</b> - Массив ссылок на файлы из экспортированного архива.</li>
     * </ul>
     */
    CONFIGURATION_IMPORT_REGISTER("configuration.import.register"),
    /**
     * Отмена зарегистрированного импорта.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code processId}</b> - Идентификатор процесса.</li>
     * </ul>
     */
    CONFIGURATION_IMPORT_UNREGISTER("configuration.import.unregister"),
    /**
     * Получение информации о текущем шаге импорта.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code processId}</b> - Идентификатор процесса.</li>
     * </ul>
     */
    CONFIGURATION_IMPORT_GET("configuration.import.get"),

// Вариант свойства: https://dev.1c-bitrix.ru/rest_help/sale/propertyvariant/index.php

    /**
     * Добавляет вариант свойства.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * </ul>
     */
    SALE_PROPERTYVARIANT_ADD("sale.propertyVariant.add"),
    /**
     * Удаляет вариант свойства.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: string}</b> - Номер варианта свойства.</li>
     * </ul>
     */
    SALE_PROPERTYVARIANT_DELETE("sale.propertyVariant.delete"),
    /**
     * Метод для доступа к полям варианта свойства.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: string}</b> - Номер варианта свойств.</li>
     * </ul>
     */
    SALE_PROPERTYVARIANT_GET("sale.propertyVariant.get"),
    /**
     * Возвращает поля варианта свойства.<br>
     */
    SALE_PROPERTYVARIANT_GETFIELDS("sale.propertyVariant.getFields"),
    /**
     * Получает список вариантов свойств.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code order: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code select: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code navigation: string}</b> - Номер страницы вывода.</li>
     * </ul>
     */
    SALE_PROPERTYVARIANT_LIST("sale.propertyVariant.list"),
    /**
     * Метод для обновления полей варианта свойства.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: string}</b> - Номер варианта свойства.</li>
     * <li><b>{@code fields: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * </ul>
     */
    SALE_PROPERTYVARIANT_UPDATE("sale.propertyVariant.update"),

// Группы свойств: https://dev.1c-bitrix.ru/rest_help/sale/propertygroup/index.php

    /**
     * Добавляет группу свойств.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * </ul>
     */
    SALE_PROPERTYGROUP_ADD("sale.propertygroup.add"),
    /**
     * Удаляет группу свойств.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code propertyGroupsId: string}</b> - Номер группы свойств.</li>
     * </ul>
     */
    SALE_PROPERTYGROUP_DELETE("sale.propertygroup.delete"),
    /**
     * Метод для доступа к полям группы свойств.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code propertyGroupsId: string}</b> - Номер группы свойств.</li>
     * </ul>
     */
    SALE_PROPERTYGROUP_GET("sale.propertygroup.get"),
    /**
     * Возвращает поля группы свойств.<br>
     */
    SALE_PROPERTYGROUP_GETFIELDS("sale.propertygroup.getFields"),
    /**
     * Получает список групп свойств.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code order: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code select: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code navigation: string}</b> - Номер страницы вывода.</li>
     * </ul>
     */
    SALE_PROPERTYGROUP_LIST("sale.propertygroup.list"),
    /**
     * Метод для обновления полей группы свойств.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code propertyGroupsId: string}</b> - Номер группы свойств.</li>
     * <li><b>{@code fields: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * </ul>
     */
    SALE_PROPERTYGROUP_UPDATE("sale.propertygroup.update"),

// Заказ: https://dev.1c-bitrix.ru/rest_help/sale/order/index.php

    /**
     * Добавляет заказ.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * </ul>
     */
    SALE_ORDER_ADD("sale.order.add"),
    /**
     * Удаляет заказ и связанные сущности.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: string}</b> - Номер заказа.</li>
     * </ul>
     */
    SALE_ORDER_DELETE("sale.order.delete"),
    /**
     * Метод для доступа к полям заказа и полям связанных сущностей.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: string}</b> - Номер заказа.</li>
     * </ul>
     */
    SALE_ORDER_GET("sale.order.get"),
    /**
     * Возвращает поля заказа.<br>
     */
    SALE_ORDER_GETFIELDS("sale.order.getFields"),
    /**
     * Получает список заказов.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code order: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code select: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code navigation: string}</b> - Номер страницы вывода.</li>
     * </ul>
     */
    SALE_ORDER_LIST("sale.order.list"),
    /**
     * Добавляет заказ без сохранения заказа.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * </ul>
     */
    SALE_ORDER_TRYADD("sale.order.tryadd"),
    /**
     * Метод для обновления полей заказа без сохранения заказа.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: string}</b> - Номер заказа.</li>
     * <li><b>{@code fields: object}</b> - Поля, соответствующие доступному списку полей fields .</li>
     * </ul>
     */
    SALE_ORDER_TRYUPDATE("sale.order.tryupdate"),
    /**
     * Метод для обновления полей заказа.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: string}</b> - Номер заказа.</li>
     * <li><b>{@code fields: object}</b> - Поля, соответствующие доступному списку полей fields .</li>
     * </ul>
     */
    SALE_ORDER_UPDATE("sale.order.update"),

// Заказы из внешних источников: https://dev.1c-bitrix.ru/rest_help/sale/tradebinding/index.php

    /**
     * Возвращает поля заказов из внешних источников.<br>
     */
    SALE_TRADEBINDING_GETFIELDS("sale.tradeBinding.getFields"),
    /**
     * Метод для получения списка заказов из внешних источников.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter: object}</b> - Поля, соответствующие доступному списку полей getFields.</li>
     * <li><b>{@code order: object}</b> - Поля, соответствующие доступному списку полей getFields.</li>
     * <li><b>{@code select: object}</b> - Поля, соответствующие доступному списку полей getFields.</li>
     * <li><b>{@code navigation: string}</b> - Номер страницы вывода.</li>
     * </ul>
     */
    SALE_TRADEBINDING_LIST("sale.tradeBinding.list"),

// Значения свойства: https://dev.1c-bitrix.ru/rest_help/sale/propertyvalue/index.php

    /**
     * Удаляет значения свойства.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code propertyValueId: string}</b> - Номер значения свойства.</li>
     * </ul>
     */
    SALE_PROPERTYVALUE_DELETE("sale.propertyvalue.delete"),
    /**
     * Метод для доступа к полям значений свойств заказа.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code propertyValueId: string}</b> - Номер значения свойства.</li>
     * </ul>
     */
    SALE_PROPERTYVALUE_GET("sale.propertyvalue.get"),
    /**
     * Возвращает поля значения свойства.<br>
     */
    SALE_PROPERTYVALUE_GETFIELDS("sale.propertyvalue.getFields"),
    /**
     * Получает список значений свойств.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code order: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code start: string}</b> - Сколько первых записей пропускать в результате. Значение должно быть кратно 50 В связи с техническими ограничениями значение этого параметра всегда должно быть кратно 50. Например, при значении 50 в результате будут отображаться 51-я запись и последующие, а первые 50 записей будут пропущены. . При значении -1 будет отключён подсчёт количества.</li>
     * <li><b>{@code select: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code navigation: string}</b> - Номер страницы вывода.</li>
     * </ul>
     */
    SALE_PROPERTYVALUE_LIST("sale.propertyvalue.list"),
    /**
     * Метод для изменения значения свойства.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields.order.id: int}</b> - Номер заказа.</li>
     * <li><b>{@code fields.order.propertyValues[]: list}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * </ul>
     */
    SALE_PROPERTYVALUE_MODIFY("sale.propertyvalue.modify"),

// Кассы: https://dev.1c-bitrix.ru/rest_help/sale/cashbox/index.php

    /**
     * Добавляет REST-обработчик кассы.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code CODE}</b> - Обязательный. Код REST-обработчика. Должен быть уникальным среди всех обработчиков.</li>
     * <li><b>{@code SUPPORTS_FFD105}</b> - Поддерживает ли касса формат фискальных данных версии 1.05 (по умолчанию N).</li>
     * <li><b>{@code SORT}</b> - Сортировка (по умолчанию 100).</li>
     * <li><b>{@code SETTINGS}</b> - Обязательный. Настройки обработчика (все параметры обязательные): PRINT_URL - адрес, на который отправляются данные для печати чека; CHECK_URL - адрес, по которому происходит проверка статуса чека; HTTP_VERSION - версия протокола HTTP, используемая для запросов. Возможные значения: 1.0, 1.1. Если параметр не заполнен, то для запросов используется HTTP 1.0. Параметр доступен с версии sale 22.0.100; CONFIG - структура настроек, которые пользователь сможет устанавливать и изменять на странице редактирования кассы. Каждый ключ в этом параметре задаёт один раздел на странице настроек: LABEL - заголовок раздела; ITEMS - список настроек раздела: TYPE - тип настройки; LABEL - название настройки; REQUIRED - является ли настройка обязательной.</li>
     * <li><b>{@code NAME}</b> - Обязательный. Название REST-обработчика.</li>
     * </ul>
     */
    SALE_CASHBOX_HANDLER_ADD("sale.cashbox.handler.add"),
    /**
     * Удаляет REST-обработчик кассы.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ID}</b> - Обязательный. ID обработчика.</li>
     * </ul>
     */
    SALE_CASHBOX_HANDLER_DELETE("sale.cashbox.handler.delete"),
    /**
     * Обновляет данные REST-обработчика кассы.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code FIELDS}</b> - Обязательный. Значения обновляемых полей.</li>
     * <li><b>{@code ID}</b> - Обязательный. ID обновляемого обработчика.</li>
     * </ul>
     */
    SALE_CASHBOX_HANDLER_UPDATE("sale.cashbox.handler.update"),
    /**
     * Метод для получения списка доступных REST-обработчиков касс.<br>
     */
    SALE_CASHBOX_HANDLER_LIST("sale.cashbox.handler.list"),
    /**
     * Добавляет кассу.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ACTIVE}</b> - Активность кассы (по умолчанию N).</li>
     * <li><b>{@code USE_OFFLINE}</b> - Используется ли касса офлайн (по умолчанию N).</li>
     * <li><b>{@code SORT}</b> - Сортировка (по умолчанию 100).</li>
     * <li><b>{@code NUMBER_KKM}</b> - Внешний идентификатор кассы (по умолчанию пуст).</li>
     * <li><b>{@code REST_CODE}</b> - Обязательный. Код REST-обработчика кассы.</li>
     * <li><b>{@code SETTINGS}</b> - Настройки кассы в соответствии со структурой настроек (по умолчанию пусты).</li>
     * <li><b>{@code EMAIL}</b> - Обязательный. Указывается email, на который будут отправляться уведомления в случае возникновения ошибок при печати чеков.</li>
     * <li><b>{@code OFD}</b> - Код обработчика ОФД (по умолчанию - без ОФД). Доступные обработчики ОФД: bx_firstofd bx_platformaofd bx_yarusofd bx_taxcomofd bx_ofdruofd bx_tenzorofd bx_conturofd</li>
     * <li><b>{@code KKM_ID}</b> - Марка ККМ (по умолчанию пуста).</li>
     * <li><b>{@code NAME}</b> - Обязательный. Название кассы.</li>
     * <li><b>{@code OFD_SETTINGS}</b> - Настройки ОФД (по умолчанию - пустой массив).</li>
     * </ul>
     */
    SALE_CASHBOX_ADD("sale.cashbox.add"),
    /**
     * Обновляет существующую кассу.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code FIELDS}</b> - Обязательный. Значения обновляемых полей.</li>
     * <li><b>{@code ID}</b> - Обязательный. ID обновляемой кассы.</li>
     * </ul>
     */
    SALE_CASHBOX_UPDATE("sale.cashbox.update"),
    /**
     * Удаляет кассу.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ID}</b> - Обязательный. ID удаляемой кассы.</li>
     * </ul>
     */
    SALE_CASHBOX_DELETE("sale.cashbox.delete"),
    /**
     * Возвращает список настроенных касс.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ORDER}</b> - Параметры сортировки. Формат: {поле: направление (ASC, DESC)}.</li>
     * <li><b>{@code FILTER}</b> - Список фильтров. Формат такой же, как у фильтров ORM (к примеру, в getList Чтобы новое API выглядело для разработчика менее пугающим и более знакомым, сохранено имя самого популярного метода: getList. Но если раньше каждый getList имел свой набор параметров и зашитое непрозрачное поведение, то теперь этот метод един для всех сущностей и подчиняется одним законам. Даже при желании у разработчика сущности сделать "костыль" в getList ничего не выйдет. Подробнее... ).</li>
     * <li><b>{@code SELECT}</b> - Список выбираемых полей. Доступные для выбора поля: ID - ID кассы; NAME - название кассы; HANDLER - обработчик; OFD - код обработчика ОФД; EMAIL - email, на который будут отправляться уведомления в случае возникновения ошибок при печати чеков; DATE_CREATE - дата создания; DATE_LAST_CHECK - дата последней проверки; NUMBER_KKM - внешний идентификатор кассы; KKM_ID - марка ККМ; ACTIVE - активность кассы; SORT - сортировка; USE_OFFLINE - используется ли касса офлайн; ENABLED - доступность.</li>
     * </ul>
     */
    SALE_CASHBOX_LIST("sale.cashbox.list"),
    /**
     * Сохраняет результат печати чека, напечатанного на REST-кассе.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code FISCAL_RECEIPT_NUMBER}</b> - Фискальный номер чека.</li>
     * <li><b>{@code REG_NUMBER_KKT}</b> - Регистрационный номер ККТ.</li>
     * <li><b>{@code FISCAL_DOC_NUMBER}</b> - Номер фискального документа.</li>
     * <li><b>{@code SHIFT_NUMBER}</b> - Номер смены.</li>
     * <li><b>{@code UUID}</b> - Обязательный. UUID чека.</li>
     * <li><b>{@code FISCAL_DOC_ATTR}</b> - Фискальный признак документа.</li>
     * <li><b>{@code PRINT_END_TIME}</b> - Время окончания печати чека.</li>
     * <li><b>{@code FN_NUMBER}</b> - Номер фискального накопителя.</li>
     * </ul>
     */
    SALE_CASHBOX_CHECK_APPLY("sale.cashbox.check.apply"),

// Корзина: https://dev.1c-bitrix.ru/rest_help/sale/basketitem/index.php

    /**
     * Добавляет в коллекцию элемент корзины.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * </ul>
     */
    SALE_BASKETITEM_ADD("sale.basketitem.add"),
    /**
     * Возвращает поля элемента корзины.<br>
     */
    SALE_BASKETITEM_GETFIELDS("sale.basketitem.getFields"),
    /**
     * Добавляет в коллекцию элемент корзины.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: string}</b> - Номер элемента коллекции корзины.</li>
     * <li><b>{@code fields: object}</b> - Поля, соответствующие доступному списку полей {@code #SALE_BASKETITEM_GETFIELDSCATALOGPRODUCT}.</li>
     * </ul>
     */
    SALE_BASKETITEM_ADDCATALOGPRODUCT("sale.basketitem.addCatalogProduct"),
    /**
     * Возвращает поля элемента корзины.<br>
     */
    SALE_BASKETITEM_GETCATALOGPRODUCTFIELDS("sale.basketItem.getCatalogProductFields"),
    /**
     * Получает список элементов коллекции корзины.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code order: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code select: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code navigation: string}</b> - Номер страницы вывода.</li>
     * </ul>
     */
    SALE_BASKETITEM_LIST("sale.basketItem.list"),
    /**
     * Удаляет элемент коллекции корзины.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code basketId: string}</b> - Номер элемента коллекции корзины.</li>
     * </ul>
     */
    SALE_BASKETITEM_DELETE("sale.basketitem.delete"),
    /**
     * Метод для доступа к полям элемент коллекции корзины и полям связанных сущностей.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code basketId: string}</b> - Номер элемента коллекции корзины.</li>
     * </ul>
     */
    SALE_BASKETITEM_GET("sale.basketitem.get"),
    /**
     * Метод для обновления полей элемента коллекции корзины.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: string}</b> - Номер элемента коллекции корзины.</li>
     * <li><b>{@code fields: object}</b> - Поля, соответствующие доступному списку полей getFields .</li>
     * </ul>
     */
    SALE_BASKETITEM_UPDATE("sale.basketitem.update"),

// Локализация статусов: https://dev.1c-bitrix.ru/rest_help/sale/statusLang/index.php

    /**
     * Добавляет локализацию.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields: object}</b> - Поля, соответствующие доступному списку полей getFields.</li>
     * </ul>
     */
    SALE_STATUSLANG_ADD("sale.statusLang.add"),
    /**
     * Удаляет локализацию.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields: object}</b> - Поля, соответствующие доступному списку полей getFields.</li>
     * </ul>
     */
    SALE_STATUSLANG_DELETEBYFILTER("sale.statusLang.deleteByFilter"),
    /**
     * Метод для получения списка языков для локализации.<br>
     */
    SALE_STATUSLANG_GETLISTLANGS("sale.statusLang.getListLangs"),
    /**
     * Возвращает поля локализации статусов.<br>
     */
    SALE_STATUSLANG_GETFIELDS("sale.statusLang.getFields"),
    /**
     * Метод для получения списка локализаций статусов.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code order: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code start: string}</b> - Сколько первых записей пропускать в результате. Значение должно быть кратно 50 В связи с техническими ограничениями значение этого параметра всегда должно быть кратно 50. Например, при значении 50 в результате будут отображаться 51-я запись и последующие, а первые 50 записей будут пропущены. . При значении -1 будет отключён подсчёт количества.</li>
     * <li><b>{@code select: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code navigation: string}</b> - Номер страницы вывода.</li>
     * </ul>
     */
    SALE_STATUSLANG_LIST("sale.statusLang.list"),

// Оплаты: https://dev.1c-bitrix.ru/rest_help/sale/payment/index.php

    /**
     * Добавляет элемент коллекции оплат.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields.orderId: object}</b> - Номер заказа.</li>
     * <li><b>{@code fields.payment: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * </ul>
     */
    SALE_PAYMENT_ADD("sale.payment.add"),
    /**
     * Удаляет элемент коллекции оплат.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: string}</b> - Номер элемента коллекции оплат.</li>
     * </ul>
     */
    SALE_PAYMENT_DELETE("sale.payment.delete"),
    /**
     * Метод для доступа к полям элемента коллекции оплат.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: string}</b> - Номер элемента коллекции оплат.</li>
     * </ul>
     */
    SALE_PAYMENT_GET("sale.payment.get"),
    /**
     * Возвращает поля оплаты.<br>
     */
    SALE_PAYMENT_GETFIELDS("sale.payment.getFields"),
    /**
     * Получает список элементов коллекции оплат.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code order: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code select: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code navigation: string}</b> - Номер страницы вывода.</li>
     * </ul>
     */
    SALE_PAYMENT_LIST("sale.payment.list"),
    /**
     * Метод для обновления полей элемента коллекции оплат.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: string}</b> - Номер элемента коллекции оплат.</li>
     * <li><b>{@code fields: object}</b> - Поля, соответствующие доступному списку полей fields .</li>
     * </ul>
     */
    SALE_PAYMENT_UPDATE("sale.payment.update"),

// Отгрузки: https://dev.1c-bitrix.ru/rest_help/sale/shipment/index.php

    /**
     * Добавляет элемент коллекции отгрузок.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * </ul>
     */
    SALE_SHIPMENT_ADD("sale.shipment.add"),
    /**
     * Удаляет элемент коллекции отгрузок.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code shipmentId: string}</b> - Номер элемента коллекции отгрузок.</li>
     * </ul>
     */
    SALE_SHIPMENT_DELETE("sale.shipment.delete"),
    /**
     * Метод для доступа к полям отгрузки заказа и полям связанных сущностей.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code shipmentId: string}</b> - Номер элемента коллекции отгрузок.</li>
     * </ul>
     */
    SALE_SHIPMENT_GET("sale.shipment.get"),
    /**
     * Возвращает поля отгрузки.<br>
     */
    SALE_SHIPMENT_GETFIELDS("sale.shipment.getFields"),
    /**
     * Получает список элементов коллекции отгрузок.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code order: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code select: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code navigation: string}</b> - Номер страницы вывода.</li>
     * </ul>
     */
    SALE_SHIPMENT_LIST("sale.shipment.list"),
    /**
     * Метод для обновления полей элемента коллекции отгрузок.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code Id: string}</b> - Номер элемента коллекции отгрузок.</li>
     * </ul>
     */
    SALE_SHIPMENT_UPDATE("sale.shipment.update"),

// Привязка оплат к корзине: https://dev.1c-bitrix.ru/rest_help/sale/paymentitembasket/index.php

    /**
     * Метод добавляет привязку оплаты к корзине.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * </ul>
     */
    SALE_PAYMENTITEMBASKET_ADD("sale.paymentItemBasket.add"),
    /**
     * Метод удаляет привязку оплаты к корзине.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: integer}</b> - Идентификатор привязки оплаты к корзине.</li>
     * </ul>
     */
    SALE_PAYMENTITEMBASKET_DELETE("sale.paymentItemBasket.delete"),
    /**
     * Метод для доступа к значению полей привязки оплаты к корзине по ID.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: integer}</b> - Идентификатор привязки оплаты к корзине.</li>
     * </ul>
     */
    SALE_PAYMENTITEMBASKET_GET("sale.paymentItemBasket.get"),
    /**
     * Метод возвращает поля привязки оплаты к корзине.<br>
     */
    SALE_PAYMENTITEMBASKET_GETFIELDS("sale.paymentItemBasket.getFields"),
    /**
     * Метод получает список привязок оплат к корзине по фильтру.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code order: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code select: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * </ul>
     */
    SALE_PAYMENTITEMBASKET_LIST("sale.paymentItemBasket.list"),
    /**
     * Метод для обновления полей привязки оплаты к корзине.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: integer}</b> - Идентификатор привязки оплаты к корзине.</li>
     * <li><b>{@code fields: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * </ul>
     */
    SALE_PAYMENTITEMBASKET_UPDATE("sale.paymentItemBasket.update"),

// Привязка оплат к отгрузкам: https://dev.1c-bitrix.ru/rest_help/sale/paymentitemshipment/index.php

    /**
     * Метод добавляет привязку оплаты к отгрузке.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * </ul>
     */
    SALE_PAYMENTITEMSHIPMENT_ADD("sale.paymentItemShipment.add"),
    /**
     * Метод удаляет привязку оплаты к отгрузке.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: integer}</b> - Идентификатор привязки оплаты к отгрузке.</li>
     * </ul>
     */
    SALE_PAYMENTITEMSHIPMENT_DELETE("sale.paymentItemShipment.delete"),
    /**
     * Метод для доступа к значению полей привязки оплаты к отгрузке по ID.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: integer}</b> - Идентификатор привязки оплаты к отгрузке.</li>
     * </ul>
     */
    SALE_PAYMENTITEMSHIPMENT_GET("sale.paymentItemShipment.get"),
    /**
     * Метод возвращает поля привязки оплаты к отгрузке.<br>
     */
    SALE_PAYMENTITEMSHIPMENT_GETFIELDS("sale.paymentItemShipment.getFields"),
    /**
     * Метод получает список привязок оплат к отгрузкам по фильтру.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code order: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code select: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * </ul>
     */
    SALE_PAYMENTITEMSHIPMENT_LIST("sale.paymentItemShipment.list"),
    /**
     * Метод для обновления полей привязки оплаты к отгрузке.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: integer}</b> - Идентификатор привязки оплаты к отгрузке.</li>
     * <li><b>{@code fields: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * </ul>
     */
    SALE_PAYMENTITEMSHIPMENT_UPDATE("sale.paymentItemShipment.update"),

// Привязка свойства: https://dev.1c-bitrix.ru/rest_help/sale/propertyrelation/index.php

    /**
     * Добавляет привязку свойства.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields: object}</b> - Поля, соответствующие доступному списку полей getFields.</li>
     * </ul>
     */
    SALE_PROPERTYRELATION_ADD("sale.propertyRelation.add"),
    /**
     * Удаляет привязку свойства.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields: object}</b> - Поля, соответствующие доступному списку полей getFields.</li>
     * </ul>
     */
    SALE_PROPERTYRELATION_DELETEBYFILTER("sale.propertyRelation.deleteByFilter"),
    /**
     * Возвращает поля привязки свойства.<br>
     */
    SALE_PROPERTYRELATION_GETFIELDS("sale.propertyRelation.getFields"),
    /**
     * Получает список привязок свойства.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code order: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code start: string}</b> - Сколько первых записей пропускать в результате. Значение должно быть кратно 50 В связи с техническими ограничениями значение этого параметра всегда должно быть кратно 50. Например, при значении 50 в результате будут отображаться 51-я запись и последующие, а первые 50 записей будут пропущены. . При значении -1 будет отключён подсчёт количества.</li>
     * <li><b>{@code select: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code navigation: string}</b> - Номер страницы вывода.</li>
     * </ul>
     */
    SALE_PROPERTYRELATION_LIST("sale.propertyRelation.list"),

// Свойства заказа: https://dev.1c-bitrix.ru/rest_help/sale/property/index.php

    /**
     * Добавляет свойство заказа.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields: nested object}</b> - Поля, соответствующие доступному списку полей getFieldsByType.</li>
     * </ul>
     */
    SALE_PROPERTY_ADD("sale.property.add"),
    /**
     * Удаляет свойство заказа.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code propertyId: string}</b> - Номер свойства заказа.</li>
     * </ul>
     */
    SALE_PROPERTY_DELETE("sale.property.delete"),
    /**
     * Метод для доступа к полям и настройкам свойства заказа.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: int}</b> - Номер свойства заказа.</li>
     * </ul>
     */
    SALE_PROPERTY_GET("sale.property.get"),
    /**
     * Возвращает поля и настройки свойства заказа для определенного типа свойства.<br>
     */
    SALE_PROPERTY_GETFIELDSBYTYPE("sale.property.getFieldsByType"),
    /**
     * Получает список свойств заказа.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code order: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code select: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code navigation: string}</b> - Номер страницы вывода.</li>
     * </ul>
     */
    SALE_PROPERTY_LIST("sale.property.list"),
    /**
     * Метод для обновления полей свойства заказа.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields: nested object}</b> - Поля, соответствующие доступному списку полей getFieldsByType.</li>
     * </ul>
     */
    SALE_PROPERTY_UPDATE("sale.property.update"),

// Свойства корзины: https://dev.1c-bitrix.ru/rest_help/sale/basketproperties/index.php

    /**
     * Метод для доступа к полям элемента коллекции свойств табличной части корзины.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: string}</b> - Номер элемента коллекции свойств табличной части корзины.</li>
     * </ul>
     */
    SALE_BASKETPROPERTIES_GET("sale.basketProperties.get"),
    /**
     * Добавляет элемент коллекции свойств табличной части корзины.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields.basketproperties: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * </ul>
     */
    SALE_BASKETPROPERTIES_ADD("sale.basketproperties.add"),
    /**
     * Удаляет элемент коллекции свойств табличной части корзины.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: string}</b> - Номер элемента коллекции свойств табличной части корзины.</li>
     * </ul>
     */
    SALE_BASKETPROPERTIES_DELETE("sale.basketproperties.delete"),
    /**
     * Возвращает поля элемента свойств корзины.<br>
     */
    SALE_BASKETPROPERTIES_GETFIELDS("sale.basketproperties.getFields"),
    /**
     * Получает список элементов свойств коллекции корзины.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code order: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code select: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code navigation: string}</b> - Номер страницы вывода.</li>
     * </ul>
     */
    SALE_BASKETPROPERTIES_LIST("sale.basketproperties.list"),
    /**
     * Метод для обновления элемента коллекции свойств табличной части корзины.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: string}</b> - Номер элемента коллекции свойств табличной части корзины.</li>
     * <li><b>{@code fields: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * </ul>
     */
    SALE_BASKETPROPERTIES_UPDATE("sale.basketproperties.update"),

// Свойства отгрузки: https://dev.1c-bitrix.ru/rest_help/sale/shipmentproperty/index.php

    /**
     * Добавляет свойство отгрузки.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields: nested object}</b> - Поля, соответствующие доступному списку полей getFieldsByType.</li>
     * </ul>
     */
    SALE_SHIPMENTPROPERTY_ADD("sale.shipmentproperty.add"),
    /**
     * Удаляет свойство отгрузки.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code propertyId: string}</b> - Номер свойства отгрузки.</li>
     * </ul>
     */
    SALE_SHIPMENTPROPERTY_DELETE("sale.shipmentproperty.delete"),
    /**
     * Метод для доступа к полям и настройкам свойства отгрузки.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: int}</b> - Номер свойства отгрузки.</li>
     * </ul>
     */
    SALE_SHIPMENTPROPERTY_GET("sale.shipmentproperty.get"),
    /**
     * Возвращает поля и настройки свойства отгрузки для определенного типа свойства.<br>
     */
    SALE_SHIPMENTPROPERTY_GETFIELDSBYTYPE("sale.shipmentproperty.getFieldsByType"),
    /**
     * Получает список свойств отгрузки.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code order: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code start: string}</b> - Сколько первых записей пропускать в результате. Значение должно быть кратно 50 В связи с техническими ограничениями значение этого параметра всегда должно быть кратно 50. Например, при значении 50 в результате будут отображаться 51-я запись и последующие, а первые 50 записей будут пропущены. . При значении -1 будет отключён подсчёт количества.</li>
     * <li><b>{@code select: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code navigation: string}</b> - Номер страницы вывода.</li>
     * </ul>
     */
    SALE_SHIPMENTPROPERTY_LIST("sale.shipmentproperty.list"),
    /**
     * Метод для обновления полей свойства отгрузки.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields: nested object}</b> - Поля, соответствующие доступному списку полей getFieldsByType.</li>
     * </ul>
     */
    SALE_SHIPMENTPROPERTY_UPDATE("sale.shipmentproperty.update"),

// Обработчики служб доставки: https://dev.1c-bitrix.ru/rest_help/sale/delivery/saledeliveryhandler/index.php

    /**
     * Метод добавляет обработчик служб доставки.<br>
     */
    SALE_DELIVERY_HANDLER_ADD("sale.delivery.handler.add"),
    /**
     * Метод удаляет обработчик служб доставки.<br>
     */
    SALE_DELIVERY_HANDLER_DELETE("sale.delivery.handler.delete"),
    /**
     * Метод для получения списка обработчиков служб доставки.<br>
     */
    SALE_DELIVERY_HANDLER_LIST("sale.delivery.handler.list"),
    /**
     * Метод выполняет обновление обработчика служб доставки.<br>
     */
    SALE_DELIVERY_HANDLER_UPDATE("sale.delivery.handler.update"),

// Службы доставки: https://dev.1c-bitrix.ru/rest_help/sale/delivery/saledelivery/index.php

    /**
     * Метод добавляет службу доставки.<br>
     */
    SALE_DELIVERY_ADD("sale.delivery.add"),
    /**
     * Метод позволяет получить информацию о службе доставки по её ID.<br>
     */
    SALE_DELIVERY_CONFIG_GET("sale.delivery.config.get"),
    /**
     * Метод для обновления службы доставки.<br>
     */
    SALE_DELIVERY_CONFIG_UPDATE("sale.delivery.config.update"),
    /**
     * Метод удаляет службу доставки.<br>
     */
    SALE_DELIVERY_DELETE("sale.delivery.delete"),
    /**
     * Метод для получения списка доступных служб доставки.<br>
     */
    SALE_DELIVERY_GETLIST("sale.delivery.getList"),
    /**
     * Метод для редактирования службы доставки.<br>
     */
    SALE_DELIVERY_UPDATE("sale.delivery.update"),

// Дополнительные услуги: https://dev.1c-bitrix.ru/rest_help/sale/delivery/saledeliveryextraservice/index.php

    /**
     * Метод для добавления дополнительной услуги службы доставки.<br>
     */
    SALE_DELIVERY_EXTRA_SERVICE_ADD("sale.delivery.extra.service.add"),
    /**
     * Метод удаляет дополнительную услугу службы доставки.<br>
     */
    SALE_DELIVERY_EXTRA_SERVICE_DELETE("sale.delivery.extra.service.delete"),
    /**
     * Метод позволяет получить дополнительную услугу службы доставки по ID этой услуги.<br>
     */
    SALE_DELIVERY_EXTRA_SERVICE_GET("sale.delivery.extra.service.get"),
    /**
     * Метод для обновления дополнительной услуги службы доставки.<br>
     */
    SALE_DELIVERY_EXTRA_SERVICE_UPDATE("sale.delivery.extra.service.update"),

// Транспортные заявки: https://dev.1c-bitrix.ru/rest_help/sale/delivery/saledeliveryrequest/index.php

    /**
     * Метод удаляет транспортную заявку.<br>
     */
    SALE_DELIVERY_REQUEST_DELETE("sale.delivery.request.delete"),
    /**
     * Метод для отправки сообщений о доставке.<br>
     */
    SALE_DELIVERY_REQUEST_SENDMESSAGE("sale.delivery.request.sendmessage"),
    /**
     * Метод для обновления транспортной заявки.<br>
     */
    SALE_DELIVERY_REQUEST_UPDATE("sale.delivery.request.update"),

// Соответствие физ. и юр. лицам: https://dev.1c-bitrix.ru/rest_help/sale/businessvaluepersondomain/index.php

    /**
     * Добавляет элемент соответствия физическим и юридическим лицам.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields.businessvaluepersondomain: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * </ul>
     */
    SALE_BUSINESSVALUEPERSONDOMAIN_ADD("sale.businessValuePersonDomain.add"),
    /**
     * Удаляет элемент соответствия физическим и юридическим лицам.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields: object}</b> - Поля, соответствующие доступному списку полей getFields.</li>
     * </ul>
     */
    SALE_BUSINESSVALUEPERSONDOMAIN_DELETEBYFILTER("sale.businessValuePersonDomain.deleteByFilter"),
    /**
     * Возвращает поля элемента соответствия физическим и юридическим лицам.<br>
     */
    SALE_BUSINESSVALUEPERSONDOMAIN_GETFIELDS("sale.businessValuePersonDomain.getFields"),
    /**
     * Получает список элементов соответствия физическим и юридическим лицам.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code order: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code select: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code navigation: string}</b> - Номер страницы вывода.</li>
     * </ul>
     */
    SALE_BUSINESSVALUEPERSONDOMAIN_LIST("sale.businessValuePersonDomain.list"),

// Статусы: https://dev.1c-bitrix.ru/rest_help/sale/status/index.php

    /**
     * Создает статус.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code type: string}</b> - Тип статуса.</li>
     * <li><b>{@code id: string}</b> - Код статуса.</li>
     * </ul>
     */
    SALE_STATUS_ADD("sale.status.add"),
    /**
     * Удаляет статус.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: string}</b> - Номер статуса.</li>
     * </ul>
     */
    SALE_STATUS_DELETE("sale.status.delete"),
    /**
     * Метод для доступа к полям статуса.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: string}</b> - Код статуса.</li>
     * </ul>
     */
    SALE_STATUS_GET("sale.status.get"),
    /**
     * Возвращает поля статуса.<br>
     */
    SALE_STATUS_GETFIELDS("sale.status.getFields"),
    /**
     * Получает список статусов.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code order: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code select: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code navigation: string}</b> - Номер страницы вывода.</li>
     * </ul>
     */
    SALE_STATUS_LIST("sale.status.list"),
    /**
     * Метод для обновления статуса.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: string}</b> - Код статуса.</li>
     * </ul>
     */
    SALE_STATUS_UPDATE("sale.status.update"),

// Табличная часть отгрузки: https://dev.1c-bitrix.ru/rest_help/sale/shipmentitem/index.php

    /**
     * Добавляет элемент коллекции табличной части отгрузки.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields.shipmentitem: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * </ul>
     */
    SALE_SHIPMENTITEM_ADD("sale.shipmentitem.add"),
    /**
     * Удаляет элемент коллекции табличной части отгрузки.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: string}</b> - Номер элемента коллекции табличной части отгрузки.</li>
     * </ul>
     */
    SALE_SHIPMENTITEM_DELETE("sale.shipmentitem.delete"),
    /**
     * Метод для доступа к полям элемента табличной части отгрузки.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: string}</b> - Номер элемента коллекции оплат.</li>
     * </ul>
     */
    SALE_SHIPMENTITEM_GET("sale.shipmentitem.get"),
    /**
     * Возвращает поля табличной части отгрузки.<br>
     */
    SALE_SHIPMENTITEM_GETFIELDS("sale.shipmentitem.getFields"),
    /**
     * Получает список элементов табличной части отгрузки.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code order: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code select: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code navigation: string}</b> - Номер страницы вывода.</li>
     * </ul>
     */
    SALE_SHIPMENTITEM_LIST("sale.shipmentitem.list"),
    /**
     * Метод для обновления элемента коллекции табличной части отгрузки.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields: object}</b> - Поля, соответствующие доступному списку полей fields .</li>
     * <li><b>{@code Id: string}</b> - Номер элемента коллекции табличной части отгрузки.</li>
     * </ul>
     */
    SALE_SHIPMENTITEM_UPDATE("sale.shipmentitem.update"),

// Типы плательщиков: https://dev.1c-bitrix.ru/rest_help/sale/persontype/index.php

    /**
     * Добавляет тип плательщика.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * </ul>
     */
    SALE_PERSONTYPE_ADD("sale.persontype.add"),
    /**
     * Удаляет тип плательщика.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: string}</b> - Номер типа плательщика.</li>
     * </ul>
     */
    SALE_PERSONTYPE_DELETE("sale.persontype.delete"),
    /**
     * Метод для доступа к полям типа плательщика.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: string}</b> - Номер типа плательщика.</li>
     * </ul>
     */
    SALE_PERSONTYPE_GET("sale.persontype.get"),
    /**
     * Возвращает поля типа плательщика.<br>
     */
    SALE_PERSONTYPE_GETFIELDS("sale.persontype.getFields"),
    /**
     * Получает список типов плательщика.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code order: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code select: object}</b> - Поля, соответствующие доступному списку полей fields.</li>
     * <li><b>{@code navigation: string}</b> - Номер страницы вывода.</li>
     * </ul>
     */
    SALE_PERSONTYPE_LIST("sale.persontype.list"),
    /**
     * Метод для обновления полей типа плательщика.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id: string}</b> - Номер типа плательщика.</li>
     * <li><b>{@code fields: object}</b> - Поля, соответствующие доступному списку полей fields .</li>
     * </ul>
     */
    SALE_PERSONTYPE_UPDATE("sale.persontype.update"),

// Торговые платформы: https://dev.1c-bitrix.ru/rest_help/sale/tradeplatform/index.php

    /**
     * Возвращает поля торговых платформ статусов.<br>
     */
    SALE_TRADEPLATFORM_GETFIELDS("sale.tradePlatform.getFields"),
    /**
     * Метод для получения списка торговых платформ.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter: object}</b> - Поля, соответствующие доступному списку полей getFields.</li>
     * <li><b>{@code order: object}</b> - Поля, соответствующие доступному списку полей getFields.</li>
     * <li><b>{@code select: object}</b> - Поля, соответствующие доступному списку полей getFields.</li>
     * <li><b>{@code navigation: string}</b> - Номер страницы вывода.</li>
     * </ul>
     */
    SALE_TRADEPLATFORM_LIST("sale.tradePlatform.list"),

// REST API для инфоблоков: https://dev.1c-bitrix.ru/api_d7/bitrix/iblock/rest/index.php

    /**
     * Получение элемента инфоблока по его идентификатору ID.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code elementId}</b> - Идентификатор ID элемента. Обязательный параметр.</li>
     * <li><b>{@code select}</b> - Набор полей и свойств для выборки. Можно получить поля 'ID', 'NAME', 'IBLOCK_SECTION_ID' из метода getElementEntityAllowedList и все свойства инфоблока. Примечание Если нужно получить другие поля, то можно создать собственный контроллер.</li>
     * <li><b>{@code iblockId}</b> - Идентификатор ID инфоблока. Обязательный параметр.</li>
     * </ul>
     */
    IBLOCK_ELEMENT_GET("iblock.Element.get"),
    /**
     * Получение элементов инфоблока по заданному фильтру.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter}</b> - Массив с параметрами фильтрации, принимаемый методом \Bitrix\Main\ORM\Query\Filter\ConditionTree::createFromArray. Формат такого фильтра описан в курсе Разработчик Bitrix Framework.</li>
     * <li><b>{@code select}</b> - Набор полей и свойств для выборки. Можно получить поля 'ID', 'NAME', 'IBLOCK_SECTION_ID' из метода getElementEntityAllowedList и все свойства инфоблока. Примечание Если нужно получить другие поля, то можно создать собственный контроллер.</li>
     * <li><b>{@code pageNavigation}</b> - Штатная постраничка REST на основе \Bitrix\Main\UI\PageNavigation.</li>
     * <li><b>{@code iblockId}</b> - Идентификатор ID инфоблока. Обязательный параметр.</li>
     * <li><b>{@code order}</b> - Массив сортировки формата ['FIELD1' => 'ASC', 'FIELD2' => 'DESC'].</li>
     * </ul>
     */
    IBLOCK_ELEMENT_LIST("iblock.Element.list"),

// Календарь: https://dev.1c-bitrix.ru/rest_help/calendar/index.php

    /**
     * Возвращает занятость пользователей из списка.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code * to}</b> - Дата окончания периода для определения занятости.</li>
     * <li><b>{@code * users}</b> - Список id пользователей.</li>
     * <li><b>{@code * from}</b> - Дата начала периода для определения занятости.</li>
     * </ul>
     */
    CALENDAR_ACCESSIBILITY_GET("calendar.accessibility.get"),
    /**
     * Добавляет новое событие.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code * section}</b> - Идентификатор раздела.</li>
     * <li><b>{@code * name}</b> - Наименование события.</li>
     * <li><b>{@code * to}</b> - Дата окончания выборки.</li>
     * <li><b>{@code color}</b> - Цвет фона события. При передачи цвета добавляемого события символ # необходимо передавать в unicode, как %23.</li>
     * <li><b>{@code accessibility}</b> - Доступность на время события: busy (занят); absent (отсутствую); quest (под вопросом); free (свободен).</li>
     * <li><b>{@code importance}</b> - Важность события: high (высокая); normal (средняя); low (низкая).</li>
     * <li><b>{@code attendees}</b> - Список участников события (если is_meeting == "Y").</li>
     * <li><b>{@code from_ts}</b> - Может быть установлен вместо from.</li>
     * <li><b>{@code description}</b> - Описание события.</li>
     * <li><b>{@code remind}</b> - Напоминание о событии: type - временной тип напоминания (min, hour, day); count - числовое значение временного промежутка.</li>
     * <li><b>{@code rrule}</b> - Повторяемость события.</li>
     * <li><b>{@code skip_time}</b> - [Y|N] Указывает, что значение даты передается без времени. Формат даты по стандарту ISO-8601.</li>
     * <li><b>{@code * type}</b> - Тип календаря: user; group.</li>
     * <li><b>{@code to_ts}</b> - Может быть установлен вместо to.</li>
     * <li><b>{@code is_meeting}</b> - [Y|N] Признак встречи с участниками события.</li>
     * <li><b>{@code timezone_from}</b> - Часовой пояс даты и времени начала события. Значение по умолчанию - таймзона текущего пользователя. Указывается в строковом виде, например: Europe/Riga.</li>
     * <li><b>{@code timezone_to}</b> - Часовой пояс даты и времени окончания события. Значение по умолчанию - таймзона текущего пользователя. Указывается в строковом виде, например: Europe/Riga.</li>
     * <li><b>{@code host}</b> - Организатор события (если is_meeting == "Y").</li>
     * <li><b>{@code * ownerId}</b> - Идентификатор владельца календаря.</li>
     * <li><b>{@code private_event}</b> - [Y|N] Отметка частного события.</li>
     * <li><b>{@code location}</b> - Место проведения.</li>
     * <li><b>{@code text_color}</b> - Цвет текста события. При передачи цвета добавляемого события символ # необходимо передавать в unicode, как %23.</li>
     * <li><b>{@code meeting}</b> - Массив параметров, включающий в себя: text - текст приглашения; open - признак открытой встречи; notify - флаг оповещения о подтверждении\отказе участников; reinvite - флаг запроса повторного подтверждения участия (при редактировании события).</li>
     * <li><b>{@code * from}</b> - Дата начала выборки.</li>
     * </ul>
     */
    CALENDAR_EVENT_ADD("calendar.event.add"),
    /**
     * Удаляет событие.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code * id}</b> - Идентификатор события.</li>
     * <li><b>{@code * type}</b> - Тип календаря: user; group.</li>
     * <li><b>{@code * ownerId}</b> - Идентификатор владельца календаря.</li>
     * </ul>
     */
    CALENDAR_EVENT_DELETE("calendar.event.delete"),
    /**
     * Возвращает список событий календаря.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code * type}</b> - Тип календаря: user; group.</li>
     * <li><b>{@code from}</b> - Дата начала выборки. Значение по умолчанию - месяц до текущей даты.</li>
     * <li><b>{@code section}</b> - Массив разделов.</li>
     * <li><b>{@code to}</b> - Дата окончания выборки. Значение по умолчанию - три месяца после текущей даты.</li>
     * <li><b>{@code ownerId}</b> - Идентификатор владельца календаря.</li>
     * </ul>
     */
    CALENDAR_EVENT_GET("calendar.event.get"),
    /**
     * Возвращает список будущих событий для текущего пользователя.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code forCurrentUser}</b> - Вывод списка событий для текущего пользователя.</li>
     * <li><b>{@code days}</b> - Число дней для выборки (по умолчанию - 60).</li>
     * <li><b>{@code detailUrl}</b> - url для календаря.</li>
     * <li><b>{@code type}</b> - Тип календаря: user; group.</li>
     * <li><b>{@code ownerId}</b> - Идентификатор владельца календаря.</li>
     * <li><b>{@code maxEventsCount}</b> - Максимальное число выводимых событий.</li>
     * </ul>
     */
    CALENDAR_EVENT_GET_NEAREST("calendar.event.get.nearest"),
    /**
     * Редактирует существующее событие.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code * id}</b> - Идентификатор события.</li>
     * <li><b>{@code color}</b> - Цвет фона события.</li>
     * <li><b>{@code accessibility}</b> - Доступность на время события: busy (занят); absent (отсутствую); quest (под вопросом); free (свободен).</li>
     * <li><b>{@code importance}</b> - Важность события: high (высокая); normal (средняя); low (низкая).</li>
     * <li><b>{@code description}</b> - Описание события.</li>
     * <li><b>{@code remind}</b> - Напоминание о событии: type - временной тип напоминания (min, hour, day); count - числовое значение временного промежутка.</li>
     * <li><b>{@code rrule}</b> - Повторяемость события.</li>
     * <li><b>{@code skip_time}</b> - [Y|N] Указывает, что значение даты передается без времени.</li>
     * <li><b>{@code * type}</b> - Тип календаря.</li>
     * <li><b>{@code to_ts}</b> - Может быть установлен вместо to.</li>
     * <li><b>{@code timezone_to}</b> - Часовой пояс даты и времени окончания события. Значение по умолчанию - таймзона текущего пользователя.</li>
     * <li><b>{@code host}</b> - Организатор события (если is_meeting == "Y").</li>
     * <li><b>{@code from}</b> - Дата начала выборки.</li>
     * <li><b>{@code private_event}</b> - [Y|N] Отметка частного события.</li>
     * <li><b>{@code meeting}</b> - Массив параметров, включающий в себя: text - текст приглашения; open - признак открытой встречи; notify - флаг оповещения о подтверждении\отказе участников; reinvite - флаг запроса повторного подтверждения участия (при редактировании события).</li>
     * <li><b>{@code * section}</b> - Идентификатор раздела.</li>
     * <li><b>{@code * name}</b> - Наименование события.</li>
     * <li><b>{@code attendees}</b> - Список участников события (если is_meeting == "Y").</li>
     * <li><b>{@code from_ts}</b> - Может быть установлен вместо from.</li>
     * <li><b>{@code is_meeting}</b> - [Y|N] Признак встречи с участниками события.</li>
     * <li><b>{@code timezone_from}</b> - Часовой пояс даты и времени начала события. Значение по умолчанию - таймзона текущего пользователя.</li>
     * <li><b>{@code * ownerId}</b> - Идентификатор владельца календаря.</li>
     * <li><b>{@code location}</b> - Место проведения.</li>
     * <li><b>{@code to}</b> - Дата окончания выборки.</li>
     * <li><b>{@code text_color}</b> - Цвет текста события.</li>
     * </ul>
     */
    CALENDAR_EVENT_UPDATE("calendar.event.update"),
    /**
     * Устанавливает параметры события для текущего пользователя.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code eventId}</b> - Идентификатор события.</li>
     * <li><b>{@code accessibility}</b> - Доступность на время события: busy (занят); absent (отсутствую); quest (под вопросом); free (свободен).</li>
     * <li><b>{@code remind}</b> - Напоминание о событии: type - временной тип напоминания (min, hour, day); count - числовое значение временного промежутка.</li>
     * </ul>
     */
    CALENDAR_MEETING_PARAMS_SET("calendar.meeting.params.set"),
    /**
     * Возвращает статус участия текущего пользователя в событии.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code * eventId}</b> - Идентификатор события</li>
     * </ul>
     */
    CALENDAR_MEETING_STATUS_GET("calendar.meeting.status.get"),
    /**
     * Устанавливает статус участия в событии для текущего пользователя.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code eventId}</b> - Идентификатор события</li>
     * <li><b>{@code status}</b> - Статус: Y - подтвердил участие; N - отказался; Q - под вопросом.</li>
     * </ul>
     */
    CALENDAR_MEETING_STATUS_SET("calendar.meeting.status.set"),
    /**
     * Возвращает список (массив) всех ресурсов.<br>
     */
    CALENDAR_RESOURCE_LIST("calendar.resource.list"),
    /**
     * Добавляет новый ресурс.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code * name}</b> - Наименование ресурса (строка).</li>
     * </ul>
     */
    CALENDAR_RESOURCE_ADD("calendar.resource.add"),
    /**
     * Изменяет ресурс.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code * name}</b> - Имя ресурса.</li>
     * <li><b>{@code resourceId}</b> - Идентификатор ресурса.</li>
     * </ul>
     */
    CALENDAR_RESOURCE_UPDATE("calendar.resource.update"),
    /**
     * Удаляет ресурс.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code * resourceId}</b> - Идентификатор ресурса.</li>
     * </ul>
     */
    CALENDAR_RESOURCE_DELETE("calendar.resource.delete"),
    /**
     * Предоставляет возможность выбрать бронирования ресурсов.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code * filter}</b> - Поля фильтра.</li>
     * </ul>
     */
    CALENDAR_RESOURCE_BOOKING_LIST("calendar.resource.booking.list"),
    /**
     * Добавляет новый календарь.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code * name}</b> - Название календаря.</li>
     * <li><b>{@code access}</b> - Массив данных доступа к календарю.</li>
     * <li><b>{@code color}</b> - Цвет календаря.</li>
     * <li><b>{@code * type}</b> - Тип календаря: user; group.</li>
     * <li><b>{@code * ownerId}</b> - Идентификатор владельца календаря.</li>
     * <li><b>{@code description}</b> - Описание календаря.</li>
     * <li><b>{@code text_color}</b> - Цвет текста в календаре.</li>
     * <li><b>{@code export}</b> - Список параметров: ALLOW - разрешить экспорт календаря; SET - устанавливается период, за который производить экспорт.</li>
     * </ul>
     */
    CALENDAR_SECTION_ADD("calendar.section.add"),
    /**
     * Удаляет календарь.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code * id}</b> - Идентификатор календаря.</li>
     * <li><b>{@code * type}</b> - Тип календаря: user; group.</li>
     * <li><b>{@code * ownerId}</b> - Идентификатор владельца календаря.</li>
     * </ul>
     */
    CALENDAR_SECTION_DELETE("calendar.section.delete"),
    /**
     * Возвращает список календарей.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code * type}</b> - Тип календаря: user group company_calendar location другие типы, в том числе пользовательские.</li>
     * <li><b>{@code * ownerId}</b> - Идентификатор владельца календаря.</li>
     * </ul>
     */
    CALENDAR_SECTION_GET("calendar.section.get"),
    /**
     * Обновляет календарь.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code * id}</b> - Идентификатор календаря.</li>
     * <li><b>{@code access}</b> - Массив данных доступа к календарю.</li>
     * <li><b>{@code color}</b> - Цвет календаря.</li>
     * <li><b>{@code * type}</b> - Тип календаря: user; group.</li>
     * <li><b>{@code name}</b> - Название календаря.</li>
     * <li><b>{@code * ownerId}</b> - Идентификатор владельца календаря.</li>
     * <li><b>{@code description}</b> - Описание календаря.</li>
     * <li><b>{@code text_color}</b> - Цвет текста в календаре.</li>
     * <li><b>{@code export}</b> - Список параметров: ALLOW - разрешить экспорт календаря; SET - устанавливается период, за который производить экспорт.</li>
     * </ul>
     */
    CALENDAR_SECTION_UPDATE("calendar.section.update"),
    /**
     * Возвращает основные настройки календаря.<br>
     */
    CALENDAR_SETTINGS_GET("calendar.settings.get"),
    /**
     * Сохраняет пользовательские настройки календаря.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code * settings}</b> - Список пользовательских настроек.</li>
     * </ul>
     */
    CALENDAR_USER_SETTINGS_SET("calendar.user.settings.set"),
    /**
     * Возвращает событие календаря по идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Обязательный параметр, число. Возвращает массив с полями сущности события или null</li>
     * </ul>
     */
    CALENDAR_EVENT_GETBYID("calendar.event.getbyid"),

// Операторы: https://dev.1c-bitrix.ru/rest_help/imopenlines/operator/index.php

    /**
     * Метод для перевода диалога текущим оператором на другого оператора/линию.<br>
     */
    IMOPENLINES_OPERATOR_TRANSFER("imopenlines.operator.transfer"),
    /**
     * Метод для пометки диалога как спам текущим оператором.<br>
     */
    IMOPENLINES_OPERATOR_SPAM("imopenlines.operator.spam"),
    /**
     * Метод для пропуска диалога текущим оператором.<br>
     */
    IMOPENLINES_OPERATOR_SKIP("imopenlines.operator.skip"),
    /**
     * Метод для завершения диалога текущим оператором.<br>
     */
    IMOPENLINES_OPERATOR_FINISH("imopenlines.operator.finish"),
    /**
     * Метод для завершения диалога другого оператора.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code CHAT_ID}</b> - Идентификатор чата.. <em>Обязательный:</em> Да</li>
     * </ul>
     */
    IMOPENLINES_OPERATOR_ANOTHER_FINISH("imopenlines.operator.another.finish"),
    /**
     * Метод для приема диалога текущим оператором.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code CHAT_ID}</b> - Идентификатор чата, на который отвечает текущий оператор.</li>
     * </ul>
     */
    IMOPENLINES_OPERATOR_ANSWER("imopenlines.operator.answer"),

// Сессия: https://dev.1c-bitrix.ru/rest_help/imopenlines/session/index.php

    /**
     * Метод для старта сессии.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code CHAT_ID}</b> - Идентификатор чата.. <em>Обязательный:</em> Да</li>
     * </ul>
     */
    IMOPENLINES_SESSION_START("imopenlines.session.start"),
    /**
     * Метод позволяет присоединиться к сессии.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code CHAT_ID}</b> - Идентификатор чата.. <em>Обязательный:</em> Да</li>
     * </ul>
     */
    IMOPENLINES_SESSION_JOIN("imopenlines.session.join"),
    /**
     * Метод возвращает идентификатор чата по USER_CODE.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code USER_CODE}</b> - Код чата, можно найти в ENTITY_ID.. <em>Обязательный:</em> Да</li>
     * </ul>
     */
    IMOPENLINES_SESSION_OPEN("imopenlines.session.open"),
    /**
     * Метод для включения и выключения режима скрытой переписки.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ACTIVATE}</b> - Флаг активации.. <em>Обязательный:</em> Нет</li>
     * <li><b>{@code CHAT_ID}</b> - Идентификатор чата.. <em>Обязательный:</em> Да</li>
     * </ul>
     */
    IMOPENLINES_SESSION_MODE_SILENT("imopenlines.session.mode.silent"),
    /**
     * Метод закрепляет или открепляет диалог за текущим оператором.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ACTIVATE}</b> - Флаг активации.. <em>Обязательный:</em> Нет</li>
     * <li><b>{@code CHAT_ID}</b> - Идентификатор чата.. <em>Обязательный:</em> Да</li>
     * </ul>
     */
    IMOPENLINES_SESSION_MODE_PIN("imopenlines.session.mode.pin"),
    /**
     * Метод получает историю сессии.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code CHAT_ID}</b> - Идентификатор чата.. <em>Обязательный:</em> Да</li>
     * <li><b>{@code SESSION_ID}</b> - Идентификатор сессии.. <em>Обязательный:</em> Да</li>
     * </ul>
     */
    IMOPENLINES_SESSION_HISTORY_GET("imopenlines.session.history.get"),
    /**
     * Метод для оценки диалога руководителем.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code RATING}</b> - Количество звёзд от 1 до 5.. <em>Обязательный:</em> Нет</li>
     * <li><b>{@code SESSION_ID}</b> - Идентификатор сессии.. <em>Обязательный:</em> Да</li>
     * <li><b>{@code COMMENT}</b> - Комментарий руководителя.. <em>Обязательный:</em> Нет</li>
     * </ul>
     */
    IMOPENLINES_SESSION_HEAD_VOTE("imopenlines.session.head.vote"),
    /**
     * Метод для того, чтобы текущий оператор забрал диалог у которого уже есть другой оператор.<br>
     */
    IMOPENLINES_SESSION_INTERCEPT("imopenlines.session.intercept"),
    /**
     * Закрепление всех диалогов за текущим оператором.<br>
     */
    IMOPENLINES_SESSION_MODE_PINALL("imopenlines.session.mode.pinAll"),
    /**
     * Открепление всех диалогов от текущего оператора.<br>
     */
    IMOPENLINES_SESSION_MODE_UNPINAL("imopenlines.session.mode.unpinAl"),

// Сообщения: https://dev.1c-bitrix.ru/rest_help/imopenlines/message/index.php

    /**
     * Метод для старта сессии с переносом сообщения.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code MESSAGE_ID}</b> - Идентификатор сообщения.. <em>Обязательный:</em> Да</li>
     * <li><b>{@code CHAT_ID}</b> - Идентификатор чата.. <em>Обязательный:</em> Да</li>
     * </ul>
     */
    IMOPENLINES_MESSAGE_SESSION_START("imopenlines.message.session.start"),
    /**
     * Метод для сохранения сообщения в быстрые ответы.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code MESSAGE_ID}</b> - Идентификатор сообщения.. <em>Обязательный:</em> Да</li>
     * <li><b>{@code CHAT_ID}</b> - Идентификатор чата.. <em>Обязательный:</em> Да</li>
     * </ul>
     */
    IMOPENLINES_MESSAGE_QUICK_SAVE("imopenlines.message.quick.save"),

// CRM: https://dev.1c-bitrix.ru/rest_help/imopenlines/crm/index.php

    /**
     * Метод создаёт лида для CRM.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code CHAT_ID}</b> - Идентификатор чата.. <em>Обязательный:</em> Да</li>
     * </ul>
     */
    IMOPENLINES_CRM_LEAD_CREATE("imopenlines.crm.lead.create"),
    /**
     * Получение активных чатов для сущности CRM.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code CRM_ENTITY}</b> - Идентификатор CRM сущности.. <em>Обязательный:</em> да</li>
     * <li><b>{@code CRM_ENTITY_TYPE}</b> - Тип CRM сущности (lead/deal/company/contact).. <em>Обязательный:</em> да</li>
     * </ul>
     */
    IMOPENLINES_CRM_CHAT_GET("imopenlines.crm.chat.get"),
    /**
     * Добавление пользователя в чат сущности CRM.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code CRM_ENTITY_ID}</b> - Идентификатор CRM сущности.. <em>Обязательный:</em> да</li>
     * <li><b>{@code CHAT_ID}</b> - Идентификатор чата. Если не указан, будет использован чат, последний привязанный к сущности CRM.. <em>Обязательный:</em> нет</li>
     * <li><b>{@code USER_ID}</b> - Идентификатор пользователя или бота, которого мы хотим добавить в чат.. <em>Обязательный:</em> да</li>
     * <li><b>{@code CRM_ENTITY_TYPE}</b> - Тип CRM сущности (lead/deal/company/contact).. <em>Обязательный:</em> да</li>
     * </ul>
     */
    IMOPENLINES_CRM_CHAT_USER_ADD("imopenlines.crm.chat.user.add"),
    /**
     * Удаление пользователя из чата сущности CRM.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code CHAT_ID}</b> - Идентификатор чата. Если не указан, будет использован чат, последний привязанный к сущности CRM.. <em>Обязательный:</em> нет</li>
     * <li><b>{@code USER_ID}</b> - Идентификатор пользователя или бота, которого мы хотим добавить в чат.. <em>Обязательный:</em> да</li>
     * <li><b>{@code CRM_ENTITY}</b> - Идентификатор CRM сущности.. <em>Обязательный:</em> да</li>
     * <li><b>{@code CRM_ENTITY_TYPE}</b> - Тип CRM сущности (lead/deal/company/contact).. <em>Обязательный:</em> да</li>
     * </ul>
     */
    IMOPENLINES_CRM_CHAT_USER_DELETE("imopenlines.crm.chat.user.delete"),
    /**
     * Отправка сообщения от имени пользователя в чат сущности CRM.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code MESSAGE}</b> - Текст сообщения.. <em>Обязательный:</em> да</li>
     * <li><b>{@code CRM_ENTITY_ID}</b> - Идентификатор CRM сущности.. <em>Обязательный:</em> да</li>
     * <li><b>{@code CHAT_ID}</b> - Идентификатор чата.. <em>Обязательный:</em> да</li>
     * <li><b>{@code USER_ID}</b> - Идентификатор пользователя или бота, которого мы хотим добавить в чат.. <em>Обязательный:</em> да</li>
     * <li><b>{@code CRM_ENTITY_TYPE}</b> - Тип CRM сущности (lead/deal/company/contact).. <em>Обязательный:</em> да</li>
     * </ul>
     */
    IMOPENLINES_CRM_MESSAGE_ADD("imopenlines.crm.message.add"),
    /**
     * Метод получает список коннекторов.<br>
     */
    IMOPENLINES_LIST("imopenlines.list"),

// Платёжные системы: https://dev.1c-bitrix.ru/rest_help/paysystem/index.php

    /**
     * Метод добавляет рест-обработчик.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей(массив вида array("поле":"значение"[, ...])), содержащий значения, описывающие обработчик. Доступные поля: NAME - Название обработчика CODE - Уникальный код обработчика в системе SETTINGS - Настройки обработчика SORT - Сортировка</li>
     * </ul>
     */
    SALE_PAYSYSTEM_HANDLER_ADD("sale.paysystem.handler.add"),
    /**
     * Метод удаляет рест-обработчик.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор обработчика</li>
     * </ul>
     */
    SALE_PAYSYSTEM_HANDLER_DELETE("sale.paysystem.handler.delete"),
    /**
     * Метод для получения списка рест-обработчиков.<br>
     */
    SALE_PAYSYSTEM_HANDLER_LIST("sale.paysystem.handler.list"),
    /**
     * Метод выполняет обновление рест-обработчика.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор обработчика</li>
     * <li><b>{@code fields}</b> - Набор полей(массив вида array("поле":"значение"[, ...])), содержащий значения, описывающие обработчик. Доступные поля: NAME - Название обработчика CODE - Уникальный код обработчика в системе SETTINGS - Настройки обработчика SORT - Сортировка</li>
     * </ul>
     */
    SALE_PAYSYSTEM_HANDLER_UPDATE("sale.paysystem.handler.update"),
    /**
     * Метод добавляет платежную систему.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Набор полей (массив вида array("поле":"значение"[, ...])), содержащий значения, описывающие платежную систему. Доступные поля: NAME - Название системы. DESCRIPTION - описание платёжной системы. XML_ID - Символьный код. PERSON_TYPE_ID - ID типа плательщика. BX_REST_HANDLER - Код обработчика в системе. ACTIVE - Флаг активности платежной системы. ENTITY_REGISTRY_TYPE - Привязка платежной системы (значение для магазина: ORDER; значение для счетов crm: CRM_INVOICE) LOGOTYPE - Логотип платёжной системы (картинка в формате Base64 Base64 — стандарт кодирования двоичных данных при помощи только 64 символов ASCII. Алфавит кодирования содержит текстово-цифровые латинские символы A-Z, a-z и 0-9 (62 знака) и 2 дополнительных символа, зависящих от системы реализации. Каждые 3 исходных байта кодируются 4 символами (увеличение на ¹⁄₃). Подробнее... ). Поле доступно с версии 20.0.550 NEW_WINDOW - Поле, отвечающее за настройку "Открывать в новом окне" (по умолчанию значение N). Доступно с версии 20.100.0</li>
     * </ul>
     */
    SALE_PAYSYSTEM_ADD("sale.paysystem.add"),
    /**
     * Метод для оплаты заказа с использованием конкретной платёжной системы.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code payment_id}</b> - ID оплаты.</li>
     * <li><b>{@code pay_system_id}</b> - ID платёжной системы.</li>
     * </ul>
     */
    SALE_PAYSYSTEM_PAY_PAYMENT("sale.paysystem.pay.payment"),
    /**
     * Метод удаляет платежную систему.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор платежной системы</li>
     * </ul>
     */
    SALE_PAYSYSTEM_DELETE("sale.paysystem.delete"),
    /**
     * Метод для получения списка платежных систем.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code params}</b> - Массив параметров Список доступных полей идентичен полям метода {@link #SALE_PAYSYSTEM_ADD} для выборки (select, order, filter) (необязательный).</li>
     * </ul>
     */
    SALE_PAYSYSTEM_LIST("sale.paysystem.list"),
    /**
     * Метод возвращает настройки платежной системы.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code PERSON_TYPE_ID* sale_person_type.id}</b> - Идентификатор типа плательщика, для которого нужно получить настройки. Для получения настроек по умолчанию передайте 0</li>
     * <li><b>{@code ID* sale_paysystem.ID}</b> - Идентификатор платежной системы, для которой нужно получить настройки</li>
     * </ul>
     */
    SALE_PAYSYSTEM_SETTINGS_GET("sale.paysystem.settings.get"),
    /**
     * Метод обновляет настройки платежной системы.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code SETTINGS* object}</b> - Настройки, которые нужно обновить. Ключами выступают названия настроек, значениями — объекты, структура которых описана ниже</li>
     * <li><b>{@code ID* sale_paysystem.ID}</b> - Идентификатор платежной системы, для которой нужно получить настройки</li>
     * <li><b>{@code PERSON_TYPE_ID sale_person_type.id}</b> - Идентификатор типа плательщика, для которого нужно получить настройки</li>
     * </ul>
     */
    SALE_PAYSYSTEM_SETTINGS_UPDATE("sale.paysystem.settings.update"),
    /**
     * Метод для редактирования платежной системы.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор платежной системы, обязательный</li>
     * <li><b>{@code fields}</b> - Набор полей (массив вида array("поле":"значение"[, ...])), содержащий значения, описывающие платежную систему. Доступные поля: NAME - Название системы PERSON_TYPE_ID - ID типа плательщика, обязательный. BX_REST_HANDLER - Код обработчика в системе, обязательный. ACTIVE - Флаг активности платежной системы. LOGOTYPE - Логотип платёжной системы (картинка в формате Base64 Base64 — стандарт кодирования двоичных данных при помощи только 64 символов ASCII. Алфавит кодирования содержит текстово-цифровые латинские символы A-Z, a-z и 0-9 (62 знака) и 2 дополнительных символа, зависящих от системы реализации. Каждые 3 исходных байта кодируются 4 символами (увеличение на ¹⁄₃). Подробнее... ). Поле доступно с версии 20.0.550. NEW_WINDOW - Поле, отвечающее за настройку "Открывать в новом окне" (по умолчанию значение N). Доступно с версии 20.100.0. DESCRIPTION - Описание платёжной системы. Доступно с версии 22.600.0.</li>
     * </ul>
     */
    SALE_PAYSYSTEM_UPDATE("sale.paysystem.update"),
    /**
     * Метод для оплаты счета с использованием конкретной платёжной системы.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code invoice_id}</b> - ID счета.</li>
     * <li><b>{@code pay_system_id}</b> - ID платёжной системы.</li>
     * </ul>
     */
    SALE_PAYSYSTEM_PAY_INVOICE("sale.paysystem.pay.invoice"),
    /**
     * Метод для получения настроек платежной системы для конкретного счета.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code PAY_SYSTEM_ID}</b> - Идентификатор платёжной системы.</li>
     * <li><b>{@code invoice_id}</b> - Идентификатор счета</li>
     * <li><b>{@code bx_rest_handler}</b> - Код рест обработчика. Если платёжных систем несколько, то вместо этого параметра используйте PAY_SYSTEM_ID.</li>
     * </ul>
     */
    SALE_PAYSYSTEM_SETTINGS_INVOICE_GET("sale.paysystem.settings.invoice.get"),
    /**
     * Метод для получения настроек платежной системы для конкретной оплаты.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code PAY_SYSTEM_ID}</b> - Идентификатор платёжной системы.</li>
     * <li><b>{@code payment_id}</b> - Идентификатор оплаты.</li>
     * </ul>
     */
    SALE_PAYSYSTEM_SETTINGS_PAYMENT_GET("sale.paysystem.settings.payment.get"),

// Почтовые сервисы: https://dev.1c-bitrix.ru/rest_help/mailservice/index.php

    /**
     * Возвращает описание полей почтового сервиса.<br>
     */
    MAILSERVICE_FIELDS("mailservice.fields"),
    /**
     * Возвращает список всех почтовых сервисов.<br>
     */
    MAILSERVICE_LIST("mailservice.list"),
    /**
     * Возвращает параметры указанного почтового сервиса.<br>
     */
    MAILSERVICE_GET("mailservice.get"),
    /**
     * Добавляет почтовый сервис.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ENCRYPTION}</b> - Необходимость шифрования (Y / N)</li>
     * <li><b>{@code ACTIVE}</b> - Активность сервиса (Y / N)</li>
     * <li><b>{@code PORT}</b> - Номер порта</li>
     * <li><b>{@code SERVER}</b> - Адрес добавляемого сервера</li>
     * <li><b>{@code SORT}</b> - Индекс сортировки</li>
     * <li><b>{@code LINK}</b> - Ссылка на почтовый сервис</li>
     * <li><b>{@code NAME}</b> - Имя добавляемого почтового сервиса</li>
     * </ul>
     */
    MAILSERVICE_ADD("mailservice.add"),
    /**
     * Обновляет параметры почтового сервиса.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ENCRYPTION}</b> - Необходимость шифрования (Y / N)</li>
     * <li><b>{@code ACTIVE}</b> - Активность сервиса (Y / N)</li>
     * <li><b>{@code PORT}</b> - Номер порта</li>
     * <li><b>{@code SERVER}</b> - Адрес добавляемого сервера</li>
     * <li><b>{@code SORT}</b> - Индекс сортировки</li>
     * <li><b>{@code LINK}</b> - Ссылка на почтовый сервис</li>
     * <li><b>{@code ID}</b> - Идентификатор почтового сервиса</li>
     * <li><b>{@code NAME}</b> - Имя добавляемого почтового сервиса</li>
     * </ul>
     */
    MAILSERVICE_UPDATE("mailservice.update"),
    /**
     * Удаляет почтовый сервис.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ID}</b> - Идентификатор почтового сервиса</li>
     * </ul>
     */
    MAILSERVICE_DELETE("mailservice.delete"),

// Методы работы с подразделениями: https://dev.1c-bitrix.ru/rest_help/departments/index.php

    /**
     * Создает подразделение.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code PARENT}</b> - идентификатор родительского подразделения.</li>
     * <li><b>{@code SORT}</b> - параметр сортировки подразделения</li>
     * <li><b>{@code NAME}</b> - наименование подразделения (обязательный)</li>
     * <li><b>{@code UF_HEAD}</b> - идентификатор руководителя подразделения</li>
     * </ul>
     */
    DEPARTMENT_ADD("department.add"),
    /**
     * Изменяет подразделение.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code PARENT}</b> - идентификатор родительского подразделения.</li>
     * <li><b>{@code SORT}</b> - параметр сортировки подразделения</li>
     * <li><b>{@code ID}</b> - идентификатор подразделения (обязательный)</li>
     * <li><b>{@code NAME}</b> - наименование подразделения (обязательный)</li>
     * <li><b>{@code UF_HEAD}</b> - идентфикатор руководителя подразделения</li>
     * </ul>
     */
    DEPARTMENT_UPDATE("department.update"),
    /**
     * Получение фильтрованного списка подразделений.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code PARENT}</b> - фильтр по родительскому подразделению</li>
     * <li><b>{@code sort}</b> - поле, по которому сортируются результаты</li>
     * <li><b>{@code ID}</b> - фильтр по идентификатору подразделения</li>
     * <li><b>{@code order}</b> - направление сортировки ASC - по возрастанию DESC - по убыванию</li>
     * <li><b>{@code NAME}</b> - фильтр по имени подразделения</li>
     * <li><b>{@code UF_HEAD}</b> - фильтр по руководителю подразделения</li>
     * </ul>
     */
    DEPARTMENT_GET("department.get"),
    /**
     * Получение списка названий полей подразделения.<br>
     */
    DEPARTMENT_FIELDS("department.fields"),
    /**
     * Удаляет подразделение.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ID}</b> - идентификатор подразделения (обязательный)</li>
     * </ul>
     */
    DEPARTMENT_DELETE("department.delete"),

// Работа с пользователями: https://dev.1c-bitrix.ru/rest_help/users/index.php

    /**
     * Получение списка названий полей пользователя.<br>
     */
    USER_FIELDS("user.fields"),
    /**
     * Получение информации о текущем пользователе.<br>
     */
    USER_CURRENT("user.current"),
    /**
     * Приглашает пользователя.<br>
     */
    USER_ADD("user.add"),
    /**
     * Обновляет данные пользователя.<br>
     */
    USER_UPDATE("user.update"),
    /**
     * Получение фильтрованного списка пользователей.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code FILTER}</b> - Дополнительно можно указывать любые параметры из {@link #USER_FIELDS} для фильтрации по их значениям. Кроме основных полей, доступны дополнительные: UF_DEPARTMENT - принадлежность к структуре компании; UF_PHONE_INNER - внутренний телефонный номер; IS_ONLINE - [Y/N] - позволяет показать только авторизованных или нет пользователей. NAME_SEARCH - быстрый поиск по персональным данным. USER_TYPE - тип пользователя. Может принимать следующие значения: employee - сотрудник, extranet - пользователь экстранета, email - почтовый пользователь ACTIVE - при значении true исключает из запроса уволенных пользователей. Параметры фильтрации могут принимать значение массивов.</li>
     * <li><b>{@code sort}</b> - поле, по которому сортируются результаты</li>
     * <li><b>{@code ADMIN_MODE}</b> - Ключ для работы 'ADMIN_MODE': 'True' в режиме администратора, служит для получения данных о любых пользователях.</li>
     * <li><b>{@code order}</b> - направление сортировки ASC - по возрастанию. DESC - по убыванию</li>
     * </ul>
     */
    USER_GET("user.get"),
    /**
     * Получение списка пользователей с ускоренным поиском по персональным данным.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code FILTER}</b> - Массив может содержать поля в любом сочетании: NAME - имя LAST_NAME - фамилия WORK_POSITION - должность UF_DEPARTMENT_NAME - название подразделения USER_TYPE - тип пользователя. Может принимать следующие значения: employee - сотрудник, extranet - пользователь экстранета, email - почтовый пользователь Или FIND - поле которое будет искать во всех перечисленных полях (Это аналог режима старого CUser::GetList в котором можно было задать фильтр NAME_SEARCH и получить результат) Метод может работать либо с фильтрацией с помощью ключа FIND или со всеми другими полями. Одновременно использовать FIND и любое другое поле - нельзя.</li>
     * </ul>
     */
    USER_SEARCH("user.search"),

// Пользовательские поля: https://dev.1c-bitrix.ru/rest_help/users/userfield/index.php

    /**
     * Добавляет пользовательское поле<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code USER_TYPE_ID}</b> - Тип пользовательского поля. Возможны значения: string - строка; integer - целое число; double - число; date - дата; datetime - дата со временем; boolean - Да / Нет; file - файл; enumeration - список; url - ссылка; address - адрес Google карты; money - деньги; iblock_section - Привязка к разделу инфоблока; iblock_element - Привязка к элементу инфоблока; employee - Привязка к пользователю; crm - Привязка к элементу CRM; crm_status - Привязка к справочнику CRM. У некоторых типов есть свои дополнительные настройки.</li>
     * </ul>
     */
    USER_USERFIELD_ADD("user.userfield.add"),
    /**
     * Обновляет пользовательское поле<br>
     */
    USER_USERFIELD_UPDATE("user.userfield.update"),
    /**
     * Удаляет пользовательское поле<br>
     */
    USER_USERFIELD_DELETE("user.userfield.delete"),
    /**
     * Получает список пользовательских полей<br>
     */
    USER_USERFIELD_LIST("user.userfield.list"),
    /**
     * Получает файл из пользовательского поля<br>
     */
    USER_USERFIELD_FILE_GET("user.userfield.file.get"),

// Работа с соглашениями: https://dev.1c-bitrix.ru/rest_help/userconsent/index.php

    /**
     * Получение списка соглашений.<br>
     */
    USERCONSENT_AGREEMENT_LIST("userconsent.agreement.list"),
    /**
     * Получение текста соглашения.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code replace}</b> - Массив: button_caption - название кнопки; fields - массив названий полей формы.</li>
     * <li><b>{@code id}</b> - Код соглашения.</li>
     * </ul>
     */
    USERCONSENT_AGREEMENT_TEXT("userconsent.agreement.text"),
    /**
     * Сохранение полученного согласия пользователя.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code agreement_id}</b> - Код соглашения.</li>
     * <li><b>{@code originator_id}</b> - Уникальный код в рамках источника, к примеру e-mail.</li>
     * <li><b>{@code ip}</b> - ip-адрес пользователя.</li>
     * <li><b>{@code origin_id}</b> - Источник, к примеру, my_contact_form.</li>
     * <li><b>{@code url}</b> - Страница, на которой получено согласие.</li>
     * </ul>
     */
    USERCONSENT_CONSENT_ADD("userconsent.consent.add"),

// Методы работы с группами соцсети: https://dev.1c-bitrix.ru/rest_help/sonet_group/index.php

    /**
     * Создает группу соцсети, используя метод API CSocNetGroup::CreateGroup(), указывая владельцем группы текущего пользователя.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code arFields}</b> - Массив параметров новой группы. Допустимые ключи массива: NAME - название группы (обязательное поле), DESCRIPTION - описание группы, VISIBLE - флаг Y/N - видна ли группа в списке групп, OPENED - флаг Y/N - открыта ли группа для свободного вступления, KEYWORDS - ключевые слова, INITIATE_PERMS - кто имеет право на приглашение пользователей в группу (обязательное поле): A - только владелец группы, E - владелец группы и модераторы группы, K - все члены группы. CLOSED - флаг Y/N - является ли группа архивной, SPAM_PERMS - кто имеет право на отправку сообщений в группу (обязательное поле). Значения аналогичны параметру INITIATE_PERMS. PROJECT - флаг Y/N - является ли группа проектом или нет. по умолчанию - не является. (С версии 18.0.0) PROJECT_DATE_FINISH - задаётся окончание проекта. (С версии 18.0.0) PROJECT_DATE_START - задаётся начало проекта. (С версии 18.0.0) SCRUM_MASTER_ID - если заполнен идентификатором пользователя, то этот проект станет скрамом. (С версии 22.300)</li>
     * <li><b>{@code bAutoSubscribe}</b> - Автоподписывание на созданную тему. Необязательный параметр. По умолчанию имеет значение True.. <em>С версии:</em> 10.0.0</li>
     * </ul>
     */
    SONET_GROUP_CREATE("sonet_group.create"),
    /**
     * Удаляет группу соцсети.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code GROUP_ID}</b> - ID группы, которую необходимо удалить.</li>
     * </ul>
     */
    SONET_GROUP_DELETE("sonet_group.delete"),
    /**
     * Проверяет, имеет ли текущий пользователь право на совершение операции в группе соцсети, осуществляя вызов функции CSocNetFeaturesPerms::CurrentUserCanPerformOperation()<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code OPERATION}</b> - Cимвольный код операции.</li>
     * <li><b>{@code FEATURE}</b> - Cимвольный код функционала.</li>
     * <li><b>{@code GROUP_ID}</b> - ID группы соцсети.</li>
     * </ul>
     */
    SONET_GROUP_FEATURE_ACCESS("sonet_group.feature.access"),
    /**
     * Возвращает массив групп соцсети, каждая из которых содержит массив полей, осуществляя вызов CSocNetGroup::GetList(). При этом возвращаются только те группы, которые доступны пользователю по правам.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ORDER}</b> - Cоответствует параметру arOrder метода CSocNetGroup::GetList().</li>
     * <li><b>{@code IS_ADMIN}</b> - При передаче Y, проверяется, является ли текущий пользователь администратором соцсети и, если да, отключается проверка прав при выборке групп.</li>
     * <li><b>{@code FILTER}</b> - Cоответствует параметру arFilter метода CSocNetGroup::GetList().</li>
     * </ul>
     */
    SONET_GROUP_GET("sonet_group.get"),
    /**
     * Изменяет владельца группы.<br>
     */
    SONET_GROUP_SETOWNER("sonet_group.setowner"),
    /**
     * Изменяет параметры группы соцсети, используя метод API CSocNetGroup::Update()<br>
     */
    SONET_GROUP_UPDATE("sonet_group.update"),
    /**
     * Добавляет пользователей в качестве участников рабочей группы (без приглашения и подтверждения).<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code USER_ID}</b> - ID пользователя (или массив ID), который/ые добавляются в участники группы.</li>
     * <li><b>{@code GROUP_ID}</b> - ID рабочей группы.</li>
     * </ul>
     */
    SONET_GROUP_USER_ADD("sonet_group.user.add"),
    /**
     * Удаляет пользователей из рабочей группы.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code USER_ID}</b> - ID пользователя (или массив ID), который/ые удаляются из группы.</li>
     * <li><b>{@code GROUP_ID}</b> - ID рабочей группы.</li>
     * </ul>
     */
    SONET_GROUP_USER_DELETE("sonet_group.user.delete"),
    /**
     * Возвращает массив участников группы соцсети, осуществляя вызов CSocNetUserToGroup::GetList(), при этом проверяются права на доступ текущего пользователя к группе.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ID}</b> - ID группы, участников которой необходимо получить.</li>
     * </ul>
     */
    SONET_GROUP_USER_GET("sonet_group.user.get"),
    /**
     * Возвращает массив групп соцсети текущего пользователя, осуществляя вызов CSocNetUserToGroup::GetList().<br>
     */
    SONET_GROUP_USER_GROUPS("sonet_group.user.groups"),
    /**
     * Выполняет приглашение пользователей в группу соцсети от лица текущего пользователя, при этом проверяются права на доступ текущего пользователя к группе.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code MESSAGE}</b> - Текст приглашения.</li>
     * <li><b>{@code USER_ID}</b> - ID пользователя (или массив ID пользователей), который приглашается (которые приглашаются) в группу</li>
     * <li><b>{@code GROUP_ID}</b> - ID группы, в которую происходит приглашение.</li>
     * </ul>
     */
    SONET_GROUP_USER_INVITE("sonet_group.user.invite"),
    /**
     * Отправляет запрос текущего пользователя на вступление в группу соцсети, при этом проверяются права на доступ текущего пользователя к группе.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code MESSAGE}</b> - Текст запроса</li>
     * <li><b>{@code GROUP_ID}</b> - ID группы, в которую отправляется запрос</li>
     * </ul>
     */
    SONET_GROUP_USER_REQUEST("sonet_group.user.request"),
    /**
     * Изменяет роль пользователей в рабочей группе.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ROLE}</b> - код новой роли участника группы (доступны значения E - модератор и K - участник).</li>
     * <li><b>{@code USER_ID}</b> - ID пользователя (или массив ID), которому/которым меняется роль.</li>
     * <li><b>{@code GROUP_ID}</b> - ID рабочей группы.</li>
     * </ul>
     */
    SONET_GROUP_USER_UPDATE("sonet_group.user.update"),
    /**
     * Метод возвращает список групп.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter}</b> - Cоответствует параметру arFilter для метода API CSocNetGroup::getList.</li>
     * <li><b>{@code IS_ADMIN}</b> - При передаче Y, проверяется, является ли текущий пользователь администратором соцсети и, если да, отключается проверка прав при выборке групп.</li>
     * <li><b>{@code select}</b> - Массив, задающий выбираемые поля. Содержит список полей, которые должны быть возвращены методом. Если массив пустой, то выбираются поля ID, SITE_ID, NAME, DESCRIPTION, DATE_CREATE, DATE_UPDATE, DATE_ACTIVITY, ACTIVE, VISIBLE, OPENED, CLOSED, SUBJECT_ID, OWNER_ID, KEYWORDS, IMAGE_ID, NUMBER_OF_MEMBERS, INITIATE_PERMS, SPAM_PERMS, SUBJECT_NAME. В массиве допустимы любые поля из списка полей.</li>
     * </ul>
     */
    SOCIALNETWORK_API_WORKGROUP_LIST("socialnetwork.api.workgroup.list"),
    /**
     * Метод возвращает данные по рабочей группе.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code groupId}</b> - Идентификатор группы. Обязательный параметр, целое число.</li>
     * </ul>
     */
    SOCIALNETWORK_API_WORKGROUP_GET("socialnetwork.api.workgroup.get"),

// Методы для работы с сущностью Сайт: https://dev.1c-bitrix.ru/rest_help/landing/site/methods/index.php

    /**
     * Метод для добавления сайта.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Поля сущности</li>
     * </ul>
     */
    LANDING_SITE_ADD("landing.site.add"),
    /**
     * Метод добавляет папку в сайт.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code siteId}</b> - Идентификатор сайта. Внимание: Требуются права на запись в указанный сайт.</li>
     * <li><b>{@code fields}</b> - Поля папки: ACTIVE – активность папки (Y/N). По умолчанию создается не активной; TITLE – заголовок (наименование) папки; CODE – символьный код папки (часть URL страницы папки). По умолчанию транслитерируется из названия папки.</li>
     * </ul>
     */
    LANDING_SITE_ADDFOLDER("landing.site.addFolder"),
    /**
     * Метод для удаления сайта.<br>
     */
    LANDING_SITE_DELETE("landing.site.delete"),
    /**
     * Метод экспортирует сайт и всего его страницы в специальный массив.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор сайта.</li>
     * <li><b>{@code params}</b> - Опциональный массив, ключи которого описаны в примере ниже.</li>
     * </ul>
     */
    LANDING_SITE_FULLEXPORT("landing.site.fullExport"),
    /**
     * Метод получает папки сайта.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code filter}</b> - Опциональный фильтр. Может принимать поля: ACTIVE – активность папки (Y/N). По умолчанию создается не активной; DELETED – папка удалена (Y/N). По умолчанию возвращаются не удаленные папки; PARENT_ID – идентификатор родительской папки; TITLE – заголовок папки; INDEX_ID – идентификатор индексной страницы папки; CODE – символьный код папки; CREATED_BY_ID – идентификатор пользователя, создавшего папку; MODIFIED_BY_ID – идентификатор пользователя, изменившего папку;</li>
     * <li><b>{@code siteId}</b> - Идентификатор сайта. Внимание: Требуются права на запись в указанный сайт.</li>
     * </ul>
     */
    LANDING_SITE_GETFOLDERS("landing.site.getFolders"),
    /**
     * Метод для получения списка сайтов<br>
     */
    LANDING_SITE_GETLIST("landing.site.getList"),
    /**
     * Метод возвращает URL изображения-превью сайта (превью индексной страницы).<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор сайта.</li>
     * </ul>
     */
    LANDING_SITE_GETPREVIEW("landing.site.getPreview"),
    /**
     * Метод возвращает полный URL сайта (сайтов).<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор сайта. Может быть также массивом идентификаторов, в таком случае в ответе будет массив URL сайтов.</li>
     * </ul>
     */
    LANDING_SITE_GETPUBLICURL("landing.site.getPublicUrl"),
    /**
     * Метод для получения дополнительных полей сайта.<br>
     */
    LANDING_SITE_GETADDITIONALFIELDS("landing.site.getadditionalfields"),
    /**
     * Метод помечает сайт как удаленный.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор сайта.</li>
     * </ul>
     */
    LANDING_SITE_MARKDELETE("landing.site.markDelete"),
    /**
     * Метод помечает папку как удаленную (помещенную в корзину).<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор папки. Права на доступ к сайту папки должны быть на удаление.</li>
     * </ul>
     */
    LANDING_SITE_MARKFOLDERDELETE("landing.site.markFolderDelete"),
    /**
     * Метод помечает папку как не удаленную (возвращает из корзины).<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор папки. Права на доступ к сайту папки должны быть на удаление.</li>
     * </ul>
     */
    LANDING_SITE_MARKFOLDERUNDELETE("landing.site.markFolderUnDelete"),
    /**
     * Метод помечает сайт как не удаленный.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ID}</b> - Идентификатор страницы</li>
     * </ul>
     */
    LANDING_SITE_MARKUNDELETE("landing.site.markUnDelete"),
    /**
     * Метод публикует сайт (и все его страницы).<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code $id}</b> - Идентификатор сайта.</li>
     * </ul>
     */
    LANDING_SITE_PUBLICATION("landing.site.publication"),
    /**
     * Метод публикует папку сайта.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code folderId}</b> - Идентификатор папки.</li>
     * </ul>
     */
    LANDING_SITE_PUBLICATIONFOLDER("landing.site.publicationFolder"),
    /**
     * Метод cнимает с публикации папку сайта.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code folderId}</b> - Идентификатор папки.</li>
     * </ul>
     */
    LANDING_SITE_UNPUBLICFOLDER("landing.site.unPublicFolder"),
    /**
     * Метод снимает с публикации сайт (и все его страницы).<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code $id}</b> - Идентификатор сайта.</li>
     * </ul>
     */
    LANDING_SITE_UNPUBLIC("landing.site.unpublic"),
    /**
     * Метод для изменения сайта.<br>
     */
    LANDING_SITE_UPDATE("landing.site.update"),
    /**
     * Метод изменяет папку в сайте.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code siteId}</b> - Идентификатор сайта. Внимание: Требуются права на запись в указанный сайт.</li>
     * <li><b>{@code fields}</b> - Поля папки: ACTIVE – активность папки (Y/N). По умолчанию создается не активной; TITLE – заголовок (наименование) папки; INDEX_ID –– идентификатор страницы внутри папки, которую требуется сделать индексной страницей папки; CODE – символьный код папки (часть URL страницы папки). По умолчанию транслитерируется из названия папки.</li>
     * <li><b>{@code folderId}</b> - Идентификатор папки в сайте.</li>
     * </ul>
     */
    LANDING_SITE_UPDATEFOLDER("landing.site.updateFolder"),

// Методы для работы с сущностью Страница: https://dev.1c-bitrix.ru/rest_help/landing/page/methods/index.php

    /**
     * Метод для добавления страницы.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code fields}</b> - Поля сущности</li>
     * </ul>
     */
    LANDING_LANDING_ADD("landing.landing.add"),
    /**
     * Метод для добавления Страницы по шаблону.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code code}</b> - Идентификатор шаблона для создания. Список шаблонов вы можете получить методом {@link #LANDING_DEMOS_GETPAGELIST}.</li>
     * <li><b>{@code siteId}</b> - ID сайта, в котором требуется создать страницу.</li>
     * <li><b>{@code fields}</b> - Необязательный. Можно передать массив полей для создаваемой страницы. Пока поддерживается только ключ TITLE и DESCRIPTION.</li>
     * </ul>
     */
    LANDING_LANDING_ADDBYTEMPLATE("landing.landing.addByTemplate"),
    /**
     * Метод копирует указанную страницу.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code toSiteId}</b> - Не обязательный параметр, идентификатор сайта. Если указан, копирование произойдет в указанный сайт.</li>
     * <li><b>{@code toFolderId}</b> - Не обязательный параметр, идентификатор папки. Если указан, то копирование произойдет в указанную папку (при ее существовании и наличии туда доступа). В ином случае копирование произойдет в те же папку, в которой находится страница, либо в корень, в случае если источник также в корне.. <em>С версии:</em> 18.7.500</li>
     * <li><b>{@code lid}</b> - Идентификатор страницы.</li>
     * </ul>
     */
    LANDING_LANDING_COPY("landing.landing.copy"),
    /**
     * Метод для удаления страницы.<br>
     */
    LANDING_LANDING_DELETE("landing.landing.delete"),
    /**
     * Метод для получения дополнительных полей страницы<br>
     */
    LANDING_LANDING_GETADDITIONALFIELDS("landing.landing.getadditionalfields"),
    /**
     * Метод для получения списка страниц.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code params}</b> - Опциональный массив, с опциональными ключами: select, filter, order, group, которые содержат значения таблицы основных полей сущности. Дополнительно можно передать флаги get_preview = 1 (вернуть превью страниц), get_urls = 1 (вернуть публичные адреса страниц), check_area (вернуть флаг IS_AREA является ли страница включаемой областью).</li>
     * </ul>
     */
    LANDING_LANDING_GETLIST("landing.landing.getlist"),
    /**
     * Метод возвращает путь до превью страницы.<br>
     */
    LANDING_LANDING_GETPREVIEW("landing.landing.getpreview"),
    /**
     * Метод возвращает веб-адрес страницы.<br>
     */
    LANDING_LANDING_GETPUBLICURL("landing.landing.getpublicurl"),
    /**
     * Метод помечает страницу как удаленную.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code $lid}</b> - Идентификатор страницы.</li>
     * </ul>
     */
    LANDING_LANDING_MARKDELETE("landing.landing.markDelete"),
    /**
     * Метод помечает страницу как не удаленную.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code $lid}</b> - Идентификатор страницы.</li>
     * </ul>
     */
    LANDING_LANDING_MARKUNDELETE("landing.landing.markUnDelete"),
    /**
     * Метод перемещает страницу в другой сайт и/или папку.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code toSiteId}</b> - Идентификатор сайта, куда надо переместить страницу. Должны быть права на запись в данный сайт.</li>
     * <li><b>{@code toFolderId}</b> - Идентификатор папки сайта, куда надо переместить страницу. Папка должна находиться в указанном сайте. Для перемещения в корень сайта параметр следует опустить. (для перемещения в текущем сайте - опустить и параметр toSiteId).</li>
     * <li><b>{@code lid}</b> - Идентификатор страницы, которую надо переместить.</li>
     * </ul>
     */
    LANDING_LANDING_MOVE("landing.landing.move"),
    /**
     * Метод для публикации страницы.<br>
     */
    LANDING_LANDING_PUBLICATION("landing.landing.publication"),
    /**
     * Метод удаляет связанные сущности лендинга.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code data}</b> - Ассоциативный массив, где в ключе blocks содержатся блоки на удаление, а в ключе images пары блок-картинка, в которых требуется удалить изображения (блоки в таком случае не удаляются).</li>
     * <li><b>{@code lid}</b> - Идентификатор лендинга</li>
     * </ul>
     */
    LANDING_LANDING_REMOVEENTITIES("landing.landing.removeEntities"),
    /**
     * Метод по переданному относительному URL страницы возвращает идентификатор страницы.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code siteId}</b> - Идентификатор сайта.</li>
     * <li><b>{@code landingUrl}</b> - Относительный URL страницы.</li>
     * </ul>
     */
    LANDING_LANDING_RESOLVEIDBYPUBLICURL("landing.landing.resolveIdByPublicUrl"),
    /**
     * Метод для снятия с публикации страницы.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code lid}</b> - Идентификатор страницы</li>
     * </ul>
     */
    LANDING_LANDING_UNPUBLIC("landing.landing.unpublic"),
    /**
     * Метод для изменения страницы.<br>
     */
    LANDING_LANDING_UPDATE("landing.landing.update"),

// Методы для работы с Блоками на Странице: https://dev.1c-bitrix.ru/rest_help/landing/page/methods_block/index.php

    /**
     * Метод для добавления нового блока на страницу.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code lid}</b> - Идентификатор страницы</li>
     * <li><b>{@code fields}</b> - Массив полей блока, где из поддерживаемого пока только следующие значения: CODE - символьный код блока. Код блока можно получить из метода {@link #LANDING_BLOCK_GETREPOSITORY}. Если добавляется блок, который был зарегистрирован партнером через {@link #LANDING_REPO_REGISTER}, то необходимо передавать для CODE значение repo_<ID>, где <ID> - идентификатор такого блока. AFTER_ID - после какого блока (его ID) надо добавить новый блок (если не указано, блок добавится в начало) ACTIVE - активность блока (Y / N) CONTENT - полностью иное содержимое блока (см. замечания для метода landing.block.updatecontent)</li>
     * </ul>
     */
    LANDING_LANDING_ADDBLOCK("landing.landing.addblock"),
    /**
     * Метод для копирования блока со страницы на страницу.<br>
     */
    LANDING_LANDING_COPYBLOCK("landing.landing.copyblock"),
    /**
     * Метод для удаления блока со страницы.<br>
     */
    LANDING_LANDING_DELETEBLOCK("landing.landing.deleteblock"),
    /**
     * Метод для опускания блока на одну позицию вниз на странице.<br>
     */
    LANDING_LANDING_DOWNBLOCK("landing.landing.downblock"),
    /**
     * Метод сохраняет имеющийся на странице блок в "Мои блоки".<br>
     */
    LANDING_LANDING_FAVORITEBLOCK("landing.landing.favoriteBlock"),
    /**
     * Метод скрывает блок со страницы.<br>
     */
    LANDING_LANDING_HIDEBLOCK("landing.landing.hideblock"),
    /**
     * Метод помечает блок как удаленный, но не удаляет его физически.<br>
     */
    LANDING_LANDING_MARKDELETEDBLOCK("landing.landing.markdeletedblock"),
    /**
     * Метод восстанавливает блока из помеченных как удаленный<br>
     */
    LANDING_LANDING_MARKUNDELETEDBLOCK("landing.landing.markundeletedblock"),
    /**
     * Метод для переноса блока со страницы на страницу.<br>
     */
    LANDING_LANDING_MOVEBLOCK("landing.landing.moveblock"),
    /**
     * Метод для показа блока со страницы.<br>
     */
    LANDING_LANDING_SHOWBLOCK("landing.landing.showblock"),
    /**
     * Метод удаляет блок, который был сохранен в "Мои блоки".<br>
     */
    LANDING_LANDING_UNFAVORITEBLOCK("landing.landing.unFavoriteBlock"),
    /**
     * Метод для поднятия блока на одну позицию вверх на странице.<br>
     */
    LANDING_LANDING_UPBLOCK("landing.landing.upblock"),

// Методы для работы с сущностью Блоки: https://dev.1c-bitrix.ru/rest_help/landing/block/blocks/index.php

    /**
     * Метод для клонирования карточки блока.<br>
     */
    LANDING_BLOCK_CLONECARD("landing.block.clonecard"),
    /**
     * Метод для удаления блока<br>
     */
    LANDING_BLOCK_REMOVECARD("landing.block.removecard"),
    /**
     * Метод для изменения контента блока.<br>
     */
    LANDING_BLOCK_UPDATENODES("landing.block.updatenodes"),
    /**
     * Метод изменяет название тега.<br>
     */
    LANDING_BLOCK_CHANGENODENAME("landing.block.changeNodeName"),
    /**
     * Метод для изменения атрибутов ноды блока.<br>
     */
    LANDING_BLOCK_UPDATEATTRS("landing.block.updateattrs"),
    /**
     * Метод для изменения стилей блока.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code data}</b> - В параметре передается массива ключ-значение, где ключом идет селектор, а каждым значением указывается два массива:: classList - какие классы добавить в изменяемый селектор. affect - передаются стили, которые надо обнулить у всех дочерних нод. Например, передаётся класс, который окрашивает элемент в цвет (color). Значит в affect надо передать массив [color], чтобы система обнулила все color у дочерних. Иначе будет такая ситуация - цвет родителя стоит красный, а текст внутри останется прежним. Селектор может передаваться как без указания позиции (например, .landing-block-node-text), тогда будут изменены все карточки по данному селектору. Так и с указанием позиции (например, .landing-block-node-text@2), тогда будет изменена только карточка на указанной позиции (отсчет с нуля). Селектор можно передавать в виде #wrapper, тогда влияние будет происходить на стили блока (его оболочки).</li>
     * <li><b>{@code lid}</b> - Идентификатор страницы</li>
     * <li><b>{@code block}</b> - Идентификатор блока</li>
     * </ul>
     */
    LANDING_BLOCK_UPDATESTYLES("landing.block.updateStyles"),
    /**
     * Метод для получения контента блока.<br>
     */
    LANDING_BLOCK_GETCONTENT("landing.block.getcontent"),
    /**
     * Метод для получение списка блоков страницы.<br>
     */
    LANDING_BLOCK_GETLIST("landing.block.getlist"),
    /**
     * Метод для получения блока по его идентификатору.<br>
     */
    LANDING_BLOCK_GETBYID("landing.block.getbyid"),
    /**
     * Метод для получения манифеста конкретного блока, уже размещенного на странице.<br>
     */
    LANDING_BLOCK_GETMANIFEST("landing.block.getmanifest"),
    /**
     * Метод для получения манифеста блока из репозитория.<br>
     */
    LANDING_BLOCK_GETMANIFESTFILE("landing.block.getmanifestfile"),
    /**
     * Метод возвращает список блоков из репозитория.<br>
     */
    LANDING_BLOCK_GETREPOSITORY("landing.block.getrepository"),
    /**
     * Метод загружает картинку и привязывает ее к указанному блоку.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code block}</b> - ID блока</li>
     * <li><b>{@code picture}</b> - Варианты: Путь до картинки, размещенной по веб-адресу. document.getElementById('file') в случае работы через JS API. Массив имя + содержимое {
     * 0: 'name.jpg',
     * 1: 'base64-содержимое файла'
     * }</li>
     * </ul>
     */
    LANDING_BLOCK_UPLOADFILE("landing.block.uploadfile"),
    /**
     * Метод обновляет содержимое уже размещенного на странице блока на любой произвольный.<br>
     */
    LANDING_BLOCK_UPDATECONTENT("landing.block.updatecontent"),
    /**
     * Метод полностью повторяет работу {@link #LANDING_BLOCK_CLONECARD} но дает возможность вставить карточку сразу с измененным контентом.<br>
     */
    LANDING_BLOCK_ADDCARD("landing.block.addcard"),
    /**
     * Метод для массового изменения карточек блока.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code data}</b> - Массив для изменения. Для пояснения смотрите пример. Опционально можно передавать пресеты карточек. Обратите внимание, селекторы формируются по похожему методу формирования в {@link #LANDING_BLOCK_UPDATENODES}.</li>
     * <li><b>{@code lid}</b> - Идентификатор страницы.</li>
     * <li><b>{@code block}</b> - Идентификатор блока.</li>
     * </ul>
     */
    LANDING_BLOCK_UPDATECARDS("landing.block.updateCards"),
    /**
     * Метод изменяет символьный код якоря.<br>
     */
    LANDING_BLOCK_CHANGEANCHOR("landing.block.changeAnchor"),
    /**
     * Метод получает контент блока из репозитория "как есть" до добавления блока на какую-либо страницу.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code code}</b> - код блока</li>
     * </ul>
     */
    LANDING_BLOCK_GETCONTENTFROMREPOSITORY("landing.block.getContentFromRepository"),

// Методы для работы с сущностью Шаблон: https://dev.1c-bitrix.ru/rest_help/landing/template/methods/index.php

    /**
     * Метод для получения списка шаблонов.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code params}</b> - Опциональный массив, с опциональными ключами: select, filter, order, group, которые содержат значения таблицы основных полей сущности.</li>
     * </ul>
     */
    LANDING_TEMPLATE_GETLIST("landing.template.getlist"),

// Партнёрские блоки: https://dev.1c-bitrix.ru/rest_help/landing/partners_blocks/index.php

    /**
     * Метод для получения списка блоков текущего приложения.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code params}</b> - Опциональный массив, с опциональными ключами: select, filter, order, group, которые содержат значения таблицы основных полей сущности. Таблица размещена ниже.</li>
     * </ul>
     */
    LANDING_REPO_GETLIST("landing.repo.getList"),
    /**
     * Метод добавления блока в репозиторий.<br>
     */
    LANDING_REPO_REGISTER("landing.repo.register"),
    /**
     * Метод удаления блока.<br>
     */
    LANDING_REPO_UNREGISTER("landing.repo.unregister"),
    /**
     * Метод проверяет контент на опасные подстроки.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code splitter}</b> - Необязательный параметр для разделения опасных подстрок. По-умолчанию равен #SANITIZE#.</li>
     * <li><b>{@code content}</b> - Содержимое для тестирования.</li>
     * </ul>
     */
    LANDING_REPO_CHECKCONTENT("landing.repo.checkContent"),

// Партнерские шаблоны: https://dev.1c-bitrix.ru/rest_help/landing/demos/index.php

    /**
     * Метод регистрирует шаблон в мастере создания сайта и страницы.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code data}</b> - Результат метода {@link #LANDING_SITE_FULLEXPORT} как есть.</li>
     * <li><b>{@code params}</b> - Может содержать следующие ключи (только для коробочных версий): site_template_id - привязка блока к определенному шаблону сайта (главного модуля).</li>
     * </ul>
     */
    LANDING_DEMOS_REGISTER("landing.demos.register"),
    /**
     * Метод удаляет зарегистрированный партнерский шаблон.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code code}</b> - Символьный код шаблона.</li>
     * </ul>
     */
    LANDING_DEMOS_UNREGISTER("landing.demos.unregister"),
    /**
     * Метод для получения списка доступных партнерских шаблонов текущего приложения.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code params}</b> - Опциональный массив, с опциональными ключами: select filter order group которые содержат значения таблицы основных полей сущности. Таблица размещена ниже.</li>
     * </ul>
     */
    LANDING_DEMOS_GETLIST("landing.demos.getList"),
    /**
     * Метод для получения списка доступных шаблонов для создания сайтов.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code type}</b> - Тип шаблона (page: обычные сайты, store: магазины)</li>
     * </ul>
     */
    LANDING_DEMOS_GETSITELIST("landing.demos.getSiteList"),
    /**
     * Метод для получения списка доступных шаблонов для создания страниц.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code type}</b> - Тип шаблона (page: обычные сайты, store: магазины).</li>
     * </ul>
     */
    LANDING_DEMOS_GETPAGELIST("landing.demos.getPageList"),

// Расширенная модель: https://dev.1c-bitrix.ru/rest_help/landing/rights/expantion_model/index.php

    /**
     * Метод вернет права текущего пользователя.<br>
     */
    LANDING_SITE_GETRIGHTS("landing.site.getRights"),
    /**
     * Устанавливает права доступа для сайта.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code rights}</b> - Объект с правами, ключами которого являются уникальные идентификаторы (пользователя, отдела, группы, ...), а значениями допустимые операции: denied – доступ закрыт (при установке данного права даже в составе других, другие права сбрасываются для конкретного объекта) read – чтение (право автоматически ставится системой дополнительно при указании любого другого отличного от denied) edit – изменение (содержимого страниц) sett – изменение настроек public – публикация delete – удаление (в корзину, и восстановление из корзины) Права независимы и могут даваться точечно. Например, пользователь может обладать только правом публикации без возможности любого изменения. В качестве ключей можно использовать значения: SG<X> - рабочая группа, например SG1 - рабочая группа с идентификатором 2; U<X> - пользователь, например U45 - пользователь с идентификатором 45; DR<X> - отдел, включая подразделы, например DR23 - раздел с идентификатором 23; UA - все авторизованные пользователи. G<X> - группа пользователей, например G2 - группа пользователей с идентификатором 2.</li>
     * <li><b>{@code id}</b> - Идентификатор сайта.</li>
     * </ul>
     */
    LANDING_SITE_SETRIGHTS("landing.site.setRights"),

// Ролевая модель: https://dev.1c-bitrix.ru/rest_help/landing/rights/role_model/index.php

    /**
     * Метод позволяет получить список ролей.<br>
     */
    LANDING_ROLE_GETLIST("landing.role.getList"),
    /**
     * Метод позволяет получить список сайтов, права на которые установлены в рамках роли.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор роли.</li>
     * </ul>
     */
    LANDING_ROLE_GETRIGHTS("landing.role.getRights"),
    /**
     * Метод устанавливает для роли коды доступа, для которых будет действовать данная роль.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code codes}</b> - Массив кодов доступа.</li>
     * <li><b>{@code id}</b> - Идентификатор роли.</li>
     * </ul>
     */
    LANDING_ROLE_SETACCESSCODES("landing.role.setAccessCodes"),
    /**
     * Метод устанавливает необходимые права в рамках роли для списков сайта.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code rights}</b> - Массив сайтов для привязки прав. См. пример.</li>
     * <li><b>{@code additional}</b> - Опционально может быть передан массив с дополнительными правами, кому разрешено в рамках роли: menu24 – показывать ли для данной роли пункт меню "Сайты" / "Магазины" в облачном Битрикс24 create – разрешать ли в рамках роли создавать сайты</li>
     * <li><b>{@code id}</b> - Идентификатор роли.</li>
     * </ul>
     */
    LANDING_ROLE_SETRIGHTS("landing.role.setRights"),

// Служба SMS сообщений: https://dev.1c-bitrix.ru/rest_help/messageservice/index.php

    /**
     * Метод регистрирует новый SMS-провайдер<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code CODE}</b> - Внутренний идентификатор провайдера. Допустимые символы a-z, A-Z, 0-9, точка, дефис и нижнее подчеркивание.</li>
     * <li><b>{@code DESCRIPTION}</b> - Описание провайдера. Может быть строкой или ассоциативным массивом локализированных строк.</li>
     * <li><b>{@code HANDLER}</b> - URL приложения, на который будут отправлены данные.</li>
     * <li><b>{@code TYPE}</b> - Тип провайдера.</li>
     * <li><b>{@code NAME}</b> - Название провайдера. Может быть строкой или ассоциативным массивом локализированных строк.</li>
     * </ul>
     */
    MESSAGESERVICE_SENDER_ADD("messageservice.sender.add"),
    /**
     * Метод удаляет зарегистрированного SMS-провайдера<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code CODE}</b> - Идентификатор провайдера.</li>
     * </ul>
     */
    MESSAGESERVICE_SENDER_DELETE("messageservice.sender.delete"),
    /**
     * Метод возвращает список зарегистрированных приложением SMS-провайдеров<br>
     */
    MESSAGESERVICE_SENDER_LIST("messageservice.sender.list"),
    /**
     * Метод для управления статусами SMS для приложений.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code CODE}</b> - Код провайдера. Обязательный.</li>
     * <li><b>{@code STATUS}</b> - Статус сообщения. Обязательный. Допустимые статусы: delivered - доставлено undelivered - не доставлено failed - ошибка доставки</li>
     * <li><b>{@code MESSAGE_ID}</b> - Идентификатор сообщения. Обязательный.</li>
     * </ul>
     */
    MESSAGESERVICE_MESSAGE_STATUS_UPDATE("messageservice.message.status.update"),

// telephony: https://dev.1c-bitrix.ru/rest_help/scope_telephony/telephony/index.php

    /**
     * Регистрирует звонок в Битрикс24<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code CRM_CREATED_LEAD: int}</b> - Идентификатор созданного лида (создается, если в CRM не найден объект по входящему номеру)</li>
     * <li><b>{@code LEAD_CREATION_ERROR: string}</b> - Текст ошибки, возникшей при попытке создания лида в CRM.</li>
     * <li><b>{@code CRM_CREATED_ENTITIES: array}</b> - Массив автоматически созданных в CRM сущностей при регистрации звонка. Формат: ENTITY_TYPE - тип созданной сущности ENTITY_ID - идентификатор созданной сущности</li>
     * <li><b>{@code CALL_ID: string}</b> - Идентификатор звонка внутри Битрикс24.</li>
     * <li><b>{@code CRM_ENTITY_TYPE: string}</b> - Тип найденного в CRM объекта по входящему номеру CONTACT | COMPANY | LEAD.</li>
     * <li><b>{@code CRM_ENTITY_ID: int}</b> - Идентификатор найденного в CRM объекта.</li>
     * </ul>
     */
    TELEPHONY_EXTERNALCALL_REGISTER("telephony.externalcall.register"),
    /**
     * Завершает звонок<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code USER_ID: int}</b> - Идентификатор пользователя. Обязательный. Ответственный в лиде будет изменен на переданный USER_ID. Ответственный будет меняться только для лида, созданного автоматически при вызове метода {@link #TELEPHONY_EXTERNALCALL_REGISTER}. Для существующего лида ответственный не меняется.</li>
     * <li><b>{@code STATUS_CODE: string}</b> - Код вызова (см. таблицу кодов вызова).</li>
     * <li><b>{@code COST_CURRENCY: string}</b> - Валюта, в которой указана стоимость звонка. Список валют можно получить методом {@link #CRM_CURRENCY_LIST}.</li>
     * <li><b>{@code DURATION: int}</b> - Длительность в сек. Обязательный.</li>
     * <li><b>{@code FAILED_REASON: string}</b> - Причина несостоявшегося звонка.</li>
     * <li><b>{@code RECORD_URL: string}</b> - URL файла (желательно mp3, возможен flac) с записью звонка. Портал осуществит две попытки скачать запись по указанному адресу. В случае неудачи, запись приложена не будет и никакого уведомления об ошибке отправлено не будет. Данный параметр является устаревшим и оставлен исключительно для обратной совместимости. Использовать его крайне не рекомендуется. Для загрузки записи звонка используйте метод {@link #TELEPHONY_EXTERNALCALL_ATTACHRECORD}.</li>
     * <li><b>{@code VOTE: int}</b> - Оценка звонка пользователем (если АТС поддерживает функционал оценки разговора).</li>
     * <li><b>{@code COST: double}</b> - Стоимость звонка.</li>
     * <li><b>{@code CALL_ID: string}</b> - Идентификатор звонка из метода {@link #TELEPHONY_EXTERNALCALL_REGISTER}. Обязательный.</li>
     * <li><b>{@code ADD_TO_CHAT: int}</b> - Добавлять ли сообщение о совершенном звонке сотруднику Б24 в чат (Возможные значения 0 или 1, по умолчанию 0).</li>
     * </ul>
     */
    TELEPHONY_EXTERNALCALL_FINISH("telephony.externalcall.finish"),
    /**
     * Показывает карточку звонка пользователю<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code USER_ID: int}</b> - Идентификатор, либо массив идентификаторов пользователей В стандартном для PHP формате: USER_ID[0]=11&USER_ID[1]=24&USER_ID[2]=31 .</li>
     * <li><b>{@code CALL_ID: string}</b> - Идентификатор звонка из метода telephony.externalcall.register. Обязательный.</li>
     * </ul>
     */
    TELEPHONY_EXTERNALCALL_SHOW("telephony.externalcall.show"),
    /**
     * Скрывает карточку звонка у пользователя<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code USER_ID: int}</b> - Идентификатор, либо массив идентификаторов пользователей, у которых надо скрыть звонок, если карточка показывается не у одного пользователя. Обязательный.</li>
     * <li><b>{@code CALL_ID: string}</b> - Идентификатор звонка из метода telephony.externalcall.register. Обязательное.</li>
     * </ul>
     */
    TELEPHONY_EXTERNALCALL_HIDE("telephony.externalcall.hide"),
    /**
     * Метод прикрепляет запись к звонку и к делу звонка.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code FILE_CONTENT: string}</b> - base64-кодированное содержимое файла. Необязательный. Если параметр не указать, метод вернет параметр uploadUrl - урл, на который можно за'upload'ить содержимое файла.</li>
     * <li><b>{@code FILENAME: string}</b> - Имя файла, обязательный. Имя файла должно заканчиваться на wav или mp3.</li>
     * <li><b>{@code RECORD_URL: string}</b> - Ссылка на запись на сервере клиента. Если указано, то будет осуществлена попытка скачать запись по указанному адресу, вместо ожидания загрузки записи на портал клиента. Во время выполнения метода, портал осуществит одну попытку скачать запись по указанному адресу. В случае неудачи, метод вернет ошибку. Так как возможность скачивания зависит от множества независящих от портала факторов, использование данного параметра не рекомендуется.</li>
     * <li><b>{@code CALL_ID: string}</b> - Идентификатор звонка из метода telephony.externalcall.register. Обязательный.</li>
     * </ul>
     */
    TELEPHONY_EXTERNALCALL_ATTACHRECORD("telephony.externalCall.attachRecord"),
    /**
     * Метод добавляет расшифровку записи к звонку.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code MESSAGES: }</b> - расшифровка звонка. Массив объектов типа TranscriptMessage.</li>
     * <li><b>{@code COST: float}</b> - Стоимость расшифровки</li>
     * <li><b>{@code COST_CURRENCY: string}</b> - валюта стоимости расшифровки</li>
     * <li><b>{@code CALL_ID: string}</b> - Идентификатор звонка</li>
     * </ul>
     */
    TELEPHONY_CALL_ATTACHTRANSCRIPTION("telephony.call.attachTranscription"),
    /**
     * Метод добавляет внешнюю линию.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code NUMBER: string}</b> - Номер внешней линии (Например: 79117654321)</li>
     * <li><b>{@code NAME: string}</b> - Название внешней линии. Необязательный.</li>
     * <li><b>{@code CRM_AUTO_CREATE: boolean}</b> - Данный параметр отвечает за создание CRM-сущностей (сделка или лид, в зависимости от режима работы CRM) при исходящих звонках из интерфейса Битрикса (например, номеронабиратель в панели чата). Принимает значение Y|N. По-умолчанию Y. <em>С версии:</em> С обновления voximplant 23.0.0</li>
     * </ul>
     */
    TELEPHONY_EXTERNALLINE_ADD("telephony.externalLine.add"),
    /**
     * Метод позволяет изменить название внешней линии.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code NUMBER: string}</b> - Номер внешней линии</li>
     * <li><b>{@code NAME: string}</b> - Название внешней линии</li>
     * <li><b>{@code CRM_AUTO_CREATE: boolean}</b> - Данный параметр отвечает за создание CRM-сущностей (сделка или лид, в зависимости от режима работы CRM) при исходящих звонках из интерфейса Битрикса (например, номеронабиратель в панели чата). Принимает значение Y|N. По-умолчанию Y. <em>С версии:</em> С обновления voximplant 23.0.0</li>
     * </ul>
     */
    TELEPHONY_EXTERNALLINE_UPDATE("telephony.externalLine.update"),
    /**
     * Метод для удаления внешней линии.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code NUMBER: string}</b> - Номер внешней линии</li>
     * </ul>
     */
    TELEPHONY_EXTERNALLINE_DELETE_("telephony.externalLine.delete."),
    /**
     * Метод позволяет получить список внешних линий приложения.<br>
     */
    TELEPHONY_EXTERNALLINE_GET("telephony.externalLine.get"),
    /**
     * Метод позволяет получить одним запросом по номеру телефона информацию о клиенте из CRM.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code PHONE_NUMBER}</b> - Номер клиента. Обязательный.</li>
     * </ul>
     */
    TELEPHONY_EXTERNALCALL_SEARCHCRMENTITIES("telephony.externalCall.searchCrmEntities"),

// voximplant: https://dev.1c-bitrix.ru/rest_help/scope_telephony/voximplant/index.php

    /**
     * Возвращает набор ссылок для навигации по страницам телефонии.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code edit_config}</b> - Страница для настройки подключенной линии (SIP-номера), #CONFIG_ID# нужно заменить на необходимый идентификатор настройки.</li>
     * <li><b>{@code detail_statistics}</b> - Страница детальной статистики (таблица).</li>
     * <li><b>{@code buy_connector}</b> - Страница для покупки SIP коннектора.</li>
     * </ul>
     */
    VOXIMPLANT_URL_GET("voximplant.url.get"),
    /**
     * Возвращает список всех sip-линии (созданных приложением).<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ORDER}</b> - Порядок сортировки (ASC/DESC).</li>
     * <li><b>{@code FILTER}</b> - Поля для сортировки.</li>
     * <li><b>{@code SORT}</b> - По какому полю производится сортировка.</li>
     * </ul>
     */
    VOXIMPLANT_SIP_GET("voximplant.sip.get"),
    /**
     * Создает новую sip-линию с привязкой к приложению. После создания данная линия становится исходящей линией по-умолчанию.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code PASSWORD}</b> - Пароль для сервера.</li>
     * <li><b>{@code SERVER}</b> - Адрес сервера sip-регистрации.</li>
     * <li><b>{@code TITLE}</b> - Название подключения.</li>
     * <li><b>{@code LOGIN}</b> - Логин для сервера.</li>
     * <li><b>{@code TYPE}</b> - Тип АТС (см. список типов АТС, необязательный параметр, по умолчанию: Облачная АТС)</li>
     * </ul>
     */
    VOXIMPLANT_SIP_ADD("voximplant.sip.add"),
    /**
     * Обновляет существующую sip-линию (созданную приложением).<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code PASSWORD}</b> - Пароль для сервера (необязательное поле).</li>
     * <li><b>{@code SERVER}</b> - Адрес сервера sip-регистрации (необязательное поле).</li>
     * <li><b>{@code TITLE}</b> - Название подключения (необязательное поле).</li>
     * <li><b>{@code LOGIN}</b> - Логин для сервера (необязательное поле).</li>
     * <li><b>{@code CONFIG_ID}</b> - Идентификатор настройки sip-линии.</li>
     * <li><b>{@code TYPE}</b> - Тип АТС (см. список типов АТС, необязательный параметр, по умолчанию - Облачная АТС).</li>
     * </ul>
     */
    VOXIMPLANT_SIP_UPDATE("voximplant.sip.update"),
    /**
     * Удаляет существующую sip-линию (созданную приложением).<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code CONFIG_ID}</b> - Идентификатор настройки sip-линии.</li>
     * </ul>
     */
    VOXIMPLANT_SIP_DELETE("voximplant.sip.delete"),
    /**
     * Возвращает текущий статус sip-регистрации (только для облачных АТС).<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code REG_ID}</b> - Идентификатор sip-регистрации.</li>
     * </ul>
     */
    VOXIMPLANT_SIP_STATUS("voximplant.sip.status"),
    /**
     * Возвращает текущий статус SIP-Коннектора.<br>
     */
    VOXIMPLANT_SIP_CONNECTOR_STATUS("voximplant.sip.connector.status"),
    /**
     * Установка выбранной sip-линии в качестве исходящей линии по-умолчанию.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code CONFIG_ID}</b> - Идентификатор настройки sip-линии.</li>
     * </ul>
     */
    VOXIMPLANT_LINE_OUTGOING_SIP_SET("voximplant.line.outgoing.sip.set"),
    /**
     * Возвращает список всех доступных исходящих линий.<br>
     */
    VOXIMPLANT_LINE_GET("voximplant.line.get"),
    /**
     * Установка выбранной линии в качестве исходящей линии по-умолчанию.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code LINE_ID}</b> - Идентификатор линии, полученный от метода voximplant.line.get или {@link #VOXIMPLANT_LINE_OUTGOING_GET}.</li>
     * </ul>
     */
    VOXIMPLANT_LINE_OUTGOING_SET("voximplant.line.outgoing.set"),
    /**
     * Возвращает текущую выбранную линии в качестве исходящей линии по-умолчанию.<br>
     */
    VOXIMPLANT_LINE_OUTGOING_GET("voximplant.line.outgoing.get"),
    /**
     * Метод запускает обратный звонок.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TO_NUMBER}</b> - Номер, на который звонить.</li>
     * <li><b>{@code VOICE}</b> - Голос, которым произнести этот текст (необязательный). Список голосов можно получить методом {@link #VOXIMPLANT_TTS_VOICES_GET}.</li>
     * <li><b>{@code FROM_LINE}</b> - ID линии, с которой будет выполняться звонок. Список доступных линий можно получить методом voximplant.line.get.</li>
     * <li><b>{@code TEXT_TO_PRONOUNCE}</b> - Текст, который произносится менеджеру перед началом звонка.</li>
     * </ul>
     */
    VOXIMPLANT_CALLBACK_START("voximplant.callback.start"),
    /**
     * Осуществляет звонок на указанный номер с проигрыванием файла формата mp3 по URL<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TO_NUMBER}</b> - Номер, на который звонить.</li>
     * <li><b>{@code URL}</b> - Адрес mp3-записи для проигрывания.</li>
     * <li><b>{@code FROM_LINE}</b> - ID линии, с которой будет выполняться звонок. Список доступных линий можно получить методом {@link #VOXIMPLANT_LINE_GET}.</li>
     * </ul>
     */
    VOXIMPLANT_INFOCALL_STARTWITHSOUND("voximplant.infocall.startwithsound"),
    /**
     * Осуществляет звонок на указанный номер с автоматическим произнесением заданного текста.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code TO_NUMBER}</b> - Номер, на который звонить.</li>
     * <li><b>{@code VOICE}</b> - Голос, которым произнести этот текст (необязательный). Список голосов можно получить методом {@link #VOXIMPLANT_TTS_VOICES_GET}.</li>
     * <li><b>{@code FROM_LINE}</b> - ID линии, с которой будет выполняться звонок. Список доступных линий можно получить методом voximplant.line.get.</li>
     * <li><b>{@code TEXT_TO_PRONOUNCE}</b> - Текст для произнесения.</li>
     * </ul>
     */
    VOXIMPLANT_INFOCALL_STARTWITHTEXT("voximplant.infocall.startwithtext"),
    /**
     * Возвращает массив доступных голосов для синтеза речи.<br>
     */
    VOXIMPLANT_TTS_VOICES_GET("voximplant.tts.voices.get"),
    /**
     * Возвращает настройки пользователей.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code USER_ID: int}</b> - Массив идентификаторов пользователей</li>
     * </ul>
     */
    VOXIMPLANT_USER_GET("voximplant.user.get"),
    /**
     * Отключает сотруднику признак наличия sip-aппарата.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code USER_ID: int}</b> - Идентификатор пользователя</li>
     * </ul>
     */
    VOXIMPLANT_USER_DEACTIVATEPHONE("voximplant.user.deactivatePhone"),
    /**
     * Устанавливает сотруднику признак наличия sip-aппарата.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code USER_ID: int}</b> - Идентификатор пользователя</li>
     * </ul>
     */
    VOXIMPLANT_USER_ACTIVATEPHONE("voximplant.user.activatePhone"),

// Статистика звонков: https://dev.1c-bitrix.ru/rest_help/scope_telephony/voximplant/statistic/index.php

    /**
     * Возвращает список истории звонков.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ORDER}</b> - Порядок сортировки (ASC/DESC).</li>
     * <li><b>{@code FILTER}</b> - Поля для сортировки.</li>
     * <li><b>{@code SORT}</b> - По какому полю производится сортировка.</li>
     * </ul>
     */
    VOXIMPLANT_STATISTIC_GET("voximplant.statistic.get"),

// Учет рабочего времени: https://dev.1c-bitrix.ru/rest_help/timeman/index.php

    /**
     * Получение настроек рабочего времени пользователя<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code USER_ID}</b> - Идентификатор пользователя. Не обязателен, по умолчанию возвращаются настройки текущего пользователя.</li>
     * </ul>
     */
    TIMEMAN_SETTINGS("timeman.settings"),
    /**
     * Получение информации о текущем рабочем дне пользователя<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code USER_ID}</b> - Идентификатор пользователя. Не обязателен, по умолчанию возвращаются настройки текущего пользователя.</li>
     * </ul>
     */
    TIMEMAN_STATUS("timeman.status"),
    /**
     * Начать новый рабочий день либо возобновить закрытый или приостановленный<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code USER_ID}</b> - Идентификатор пользователя. Не обязателен, по умолчанию возвращаются настройки текущего пользователя.</li>
     * <li><b>{@code TIME}</b> - Время начала рабочего дня. Не обязателен, по умолчанию рабочий день открывается текущим моментом с сохраненным часовым поясом сотрудника. Дата должна совпадать с текущей календарной датой.</li>
     * <li><b>{@code LON}</b> - Географическая долгота начала рабочего дня. Не обязателен</li>
     * <li><b>{@code REPORT}</b> - Причина изменения рабочего дня. Обязателен при указании параметра TIME и отключенном для сотрудника свободном графике.</li>
     * <li><b>{@code LAT}</b> - Географическая широта начала рабочего дня. Не обязателен.</li>
     * </ul>
     */
    TIMEMAN_OPEN("timeman.open"),
    /**
     * Закрыть рабочий день<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code USER_ID}</b> - Идентификатор пользователя. Не обязателен, по умолчанию возвращаются настройки текущего пользователя.</li>
     * <li><b>{@code TIME}</b> - Время окончания рабочего дня. Не обязателен, по умолчанию рабочий день закрывается текущим моментом с часовым поясом, в котором рабочий день был начат. Дата должна совпадать с датой начала рабочего дня.</li>
     * <li><b>{@code LON}</b> - Географическая долгота начала рабочего дня. Не обязателен</li>
     * <li><b>{@code REPORT}</b> - Причина изменения рабочего дня. Обязателен при указании параметра TIME и отключенном для сотрудника свободном графике.</li>
     * <li><b>{@code LAT}</b> - Географическая широта начала рабочего дня. Не обязателен.</li>
     * </ul>
     */
    TIMEMAN_CLOSE("timeman.close"),
    /**
     * Приостановить рабочий день<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code USER_ID}</b> - Идентификатор пользователя. Не обязателен, по умолчанию возвращаются настройки текущего пользователя.</li>
     * </ul>
     */
    TIMEMAN_PAUSE("timeman.pause"),
    /**
     * Метод для проверки IP-адреса на вхождение в диапазоны сетевых адресов офисной сети.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code IP}</b> - IP-адрес.. <em>Обязательный:</em> Нет</li>
     * </ul>
     */
    TIMEMAN_NETWORKRANGE_CHECK("timeman.networkrange.check"),
    /**
     * Метод для получения диапазонов сетевых адресов, входящих в офисную сеть.<br>
     */
    TIMEMAN_NETWORKRANGE_GET("timeman.networkrange.get"),
    /**
     * Метод для установки диапазонов сетевых адресов, входящих в офисную сеть.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code RANGES}</b> - Диапазоны сетевых адресов.. <em>Обязательный:</em> Да</li>
     * </ul>
     */
    TIMEMAN_NETWORKRANGE_SET("timeman.networkrange.set"),
    /**
     * Метод для отправки отчета о выявленном отсутствии..<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code USER_ID}</b> - Идентификатор пользователя для которого сформирован отчет (поле доступно только администраторам).. <em>Обязательный:</em> Нет</li>
     * <li><b>{@code TEXT}</b> - Описание причины отсутствия.. <em>Обязательный:</em> Да</li>
     * <li><b>{@code CALENDAR}</b> - Занести отсутствие в календарь (только для первичного отчета).. <em>Обязательный:</em> Нет</li>
     * <li><b>{@code ID}</b> - Идентификатор записи.. <em>Обязательный:</em> Да</li>
     * <li><b>{@code TYPE}</b> - Тип отсутствия (work - по рабочим вопросам, private - личные дела).. <em>Обязательный:</em> Да</li>
     * </ul>
     */
    TIMEMAN_TIMECONTROL_REPORT_ADD("timeman.timecontrol.report.add"),
    /**
     * Метод для получения отчета о выявленных отсутствиях.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code WORKDAY_HOURS}</b> - Необходимая продолжительность рабочего дня в часах (по-умолчанию 8 часов).. <em>Обязательный:</em> Нет</li>
     * <li><b>{@code MONTH}</b> - Месяц для формирования отчета.. <em>Обязательный:</em> Да</li>
     * <li><b>{@code YEAR}</b> - Год для формирования отчета.. <em>Обязательный:</em> Да</li>
     * <li><b>{@code USER_ID}</b> - Идентификатор пользователя.. <em>Обязательный:</em> Да</li>
     * <li><b>{@code IDLE_MINUTES}</b> - Максимальное время отсутствия на рабочем месте, которое не будет учитываться как отсутствие.. <em>Обязательный:</em> Нет</li>
     * </ul>
     */
    TIMEMAN_TIMECONTROL_REPORTS_GET("timeman.timecontrol.reports.get"),
    /**
     * Метод для получения пользовательских настроек для построения интерфейса отчетов инструмента контроля времени.<br>
     */
    TIMEMAN_TIMECONTROL_REPORTS_SETTINGS_GET("timeman.timecontrol.reports.settings.get"),
    /**
     * Метод для получения списка пользователей, относящихся к указанному подразделению.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code DEPARTMENT_ID}</b> - Идентификатор подразделения.. <em>Обязательный:</em> Да*</li>
     * </ul>
     */
    TIMEMAN_TIMECONTROL_REPORTS_USERS_GET("timeman.timecontrol.reports.users.get"),
    /**
     * Метод для получения настроек инструмента контроля времени.<br>
     */
    TIMEMAN_TIMECONTROL_SETTINGS_GET("timeman.timecontrol.settings.get"),
    /**
     * Метод для установки настроек инструмента контроля времени.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code REGISTER_DESKTOP}</b> - Фиксировать факт включения и отключения десктоп приложения.. <em>Обязательный:</em> Нет</li>
     * <li><b>{@code REGISTER_OFFLINE}</b> - Фиксировать факт перехода пользователя в режим офлайн.. <em>Обязательный:</em> Нет</li>
     * <li><b>{@code REGISTER_IDLE}</b> - Фиксировать факт перехода пользователя в режим отошел.. <em>Обязательный:</em> Нет</li>
     * <li><b>{@code ACTIVE}</b> - Доступность инструмента контроля времени. Включается через active: true. Отключать через active: false в случае, если данные отправляются как bool. Если данные отправляются как текст false в виде текста это true , то отключается только через active: 0.. <em>Обязательный:</em> Нет</li>
     * <li><b>{@code REPORT_SIMPLE_TYPE}</b> - Кому доступен упрощенный отчет (all - всем, user - только указанным пользователям).. <em>Обязательный:</em> Нет</li>
     * <li><b>{@code REPORT_REQUEST_TYPE}</b> - У кого запрашивать отчет (all - у всех, user - только у указанных пользователей, none - ни у кого).. <em>Обязательный:</em> Нет</li>
     * <li><b>{@code REPORT_SIMPLE_USERS}</b> - Список пользователей кому доступен упрощенный отчет (если report_simple_type == user).. <em>Обязательный:</em> Нет*</li>
     * <li><b>{@code REPORT_FULL_TYPE}</b> - Кому доступен расширенный отчет (all - всем, user - только указанным пользователям).. <em>Обязательный:</em> Нет</li>
     * <li><b>{@code REPORT_FULL_USERS}</b> - Список пользователей кому доступен расширенный отчет (если report_simple_type == user).. <em>Обязательный:</em> Нет*</li>
     * <li><b>{@code MINIMUM_IDLE_FOR_REPORT}</b> - Минимальное количество времени для запроса отчета в минутах.. <em>Обязательный:</em> Нет</li>
     * <li><b>{@code REPORT_REQUEST_USERS}</b> - Список пользователей у кого запрашивать отчет (если report_request_type == user).. <em>Обязательный:</em> Нет*</li>
     * </ul>
     */
    TIMEMAN_TIMECONTROL_SETTINGS_SET("timeman.timecontrol.settings.set"),
    /**
     * Метод позволяет получить рабочий график по его идентификатору.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code id}</b> - Идентификатор графика</li>
     * </ul>
     */
    TIMEMAN_SCHEDULE_GET("timeman.schedule.get"),

// Право "Хранилище данных": https://dev.1c-bitrix.ru/rest_help/entity/index.php

    /**
     * Создает хранилище данных.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ENTITY}</b> - Обязательный. Строковой идентификатор хранилища, уникальны для данного приложения (максимальная длина - 13 символов).</li>
     * <li><b>{@code ACCESS}</b> - Описание прав доступа к хранилищу. Должно иметь вид ассоциативного массива, ключами которого являются идентификаторы прав доступа, значением - R (чтение), W (запись) или X (управление).</li>
     * <li><b>{@code NAME}</b> - Обязательный. Название хранилища</li>
     * </ul>
     */
    ENTITY_ADD("entity.add"),
    /**
     * Обновляет параметры хранилища данных.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ENTITY}</b> - Обязательный. Строковой идентификатор обновляемого хранилища.</li>
     * <li><b>{@code ENTITY_NEW}</b> - Новый строковой идентификатор хранилища.</li>
     * <li><b>{@code ACCESS}</b> - Описание нового набора прав доступа к хранилищу. Должно иметь вид ассоциативного массива, ключами которого являются идентификаторы прав доступа, значением - R (чтение), W (запись) или X (управление).</li>
     * <li><b>{@code NAME}</b> - Новое название хранилища.</li>
     * </ul>
     */
    ENTITY_UPDATE("entity.update"),
    /**
     * Получение или изменение прав доступа к хранилищу.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ENTITY}</b> - Обязательный. Строковой идентификатор обновляемого хранилища.</li>
     * <li><b>{@code ACCESS}</b> - Описание нового набора прав доступа к хранилищу. Должно иметь вид ассоциативного массива, ключами которого являются идентификаторы прав доступа, значением - R (чтение), W (запись) или X (управление).</li>
     * </ul>
     */
    ENTITY_RIGHTS("entity.rights"),
    /**
     * Получение параметров хранилища или списка всех хранилищ приложения.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ENTITY}</b> - Строковой идентификатор требуемого хранилища.</li>
     * </ul>
     */
    ENTITY_GET("entity.get"),
    /**
     * Удаление хранилища.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ENTITY}</b> - Обязательный. Строковой идентификатор удаляемого хранилища.</li>
     * </ul>
     */
    ENTITY_DELETE("entity.delete"),
    /**
     * Получение списка разделов хранилища (секций инфоблока). Списочный метод.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ENTITY}</b> - Обязательный. Строковой идентификатор хранилища.</li>
     * <li><b>{@code FILTER}</b> - Массив вида array("фильтруемое поле"=>"значение" [, ...]). Фильтруемое поле может принимать значения: ACTIVE - фильтр по активности (Y|N); NAME - по названию (можно искать по шаблону [%_]); CODE - по символьному коду (по шаблону [%_]); SECTION_ID - по коду раздела-родителя (если указать false, то будут возвращены корневые разделы); DEPTH_LEVEL - по уровню вложенности (начинается с 1); LEFT_MARGIN, RIGHT_MARGIN - по положению в дереве (используется, когда необходима выборка дерева подразделов; ID - по коду раздела; TIMESTAMP_X - по времени последнего изменения; DATE_CREATE - по времени создания; MODIFIED_BY - по коду пользователя изменившему раздел; CREATED_BY - по содателю; Все фильтруемые поля могут содержать перед названием тип проверки фильтра. Необязательное. По умолчанию записи не фильтруются.</li>
     * <li><b>{@code SORT}</b> - Массив для сортировки, имеющий вид by1=>order1[, by2=>order2 [, ..]], где by1, ... - поле сортировки, может принимать значения: ID - код раздела; SECTION - код родительской раздела; NAME - название раздела; CODE - символьный код раздела; ACTIVE - активности раздела LEFT_MARGIN - левая граница; DEPTH_LEVEL - глубина вложенности (начинается с 1); SORT - индекс сортировки; CREATED - по времени создания раздела; CREATED_BY - по идентификатору создателя раздела; MODIFIED_BY - по идентификатору пользователя изменившего раздела; TIMESTAMP_X - по времени последнего изменения. order1, ... - порядок сортировки, может принимать значения: ASC - по возрастанию; DESC - по убыванию. Значение по умолчанию Array("SORT"=>"ASC") означает, что результат выборки будет отсортирован по возрастанию. Если задать пустой массив Array(), то результат отсортирован не будет.</li>
     * </ul>
     */
    ENTITY_SECTION_GET("entity.section.get"),
    /**
     * Добавление раздела хранилища.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ENTITY}</b> - Обязательный. Строковой идентификатор хранилища.</li>
     * <li><b>{@code DETAIL_PICTURE}</b> - Детальная картинка раздела.</li>
     * <li><b>{@code ACTIVE}</b> - Флаг активности раздела (Y|N).</li>
     * <li><b>{@code DESCRIPTION}</b> - Описание раздела.</li>
     * <li><b>{@code PICTURE}</b> - Картинка раздела.</li>
     * <li><b>{@code SORT}</b> - Сортировочный параметр раздела.</li>
     * <li><b>{@code SECTION}</b> - Идентификатор родительского раздела.</li>
     * <li><b>{@code NAME}</b> - Обязательный. Наименование раздела.</li>
     * </ul>
     */
    ENTITY_SECTION_ADD("entity.section.add"),
    /**
     * Обновление раздела хранилища.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ENTITY}</b> - Обязательный. Строковой идентификатор хранилища.</li>
     * <li><b>{@code DETAIL_PICTURE}</b> - Детальная картинка раздела.</li>
     * <li><b>{@code ACTIVE}</b> - Флаг активности раздела (Y|N).</li>
     * <li><b>{@code DESCRIPTION}</b> - Описание раздела.</li>
     * <li><b>{@code PICTURE}</b> - Картинка раздела.</li>
     * <li><b>{@code SORT}</b> - Сортировочный параметр раздела.</li>
     * <li><b>{@code ID}</b> - Обязательный. Идентификатор обновляемого раздела.</li>
     * <li><b>{@code SECTION}</b> - Идентификатор родительского раздела.</li>
     * <li><b>{@code NAME}</b> - Наименование раздела.</li>
     * </ul>
     */
    ENTITY_SECTION_UPDATE("entity.section.update"),
    /**
     * Удаление раздела хранилища.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ENTITY}</b> - Обязательный. Строковой идентификатор хранилища.</li>
     * <li><b>{@code ID}</b> - Обязательный. Идентификатор удаляемого раздела.</li>
     * </ul>
     */
    ENTITY_SECTION_DELETE("entity.section.delete"),
    /**
     * Получение списка элементов хранилища. Списочный метод.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ENTITY}</b> - Обязательный. Строковой идентификатор хранилища.</li>
     * <li><b>{@code SORT}</b> - Аналогичны параметрам arOrder и arFilter PHP-метода CIBlockElement::GetList (включая операции фильтра и сложную логику).</li>
     * </ul>
     */
    ENTITY_ITEM_GET("entity.item.get"),
    /**
     * Добавление элемента хранилища.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ACTIVE}</b> - Флаг активности элемента (Y|N).</li>
     * <li><b>{@code DATE_ACTIVE_TO}</b> - Дата окончания активности элемента.</li>
     * <li><b>{@code DATE_ACTIVE_FROM}</b> - Дата начала активности элемента.</li>
     * <li><b>{@code PREVIEW_TEXT}</b> - Анонс элемента.</li>
     * <li><b>{@code PREVIEW_PICTURE}</b> - Картинка анонса элемента.</li>
     * <li><b>{@code NAME}</b> - Обязательный. Наименование элемента.</li>
     * <li><b>{@code CODE}</b> - Символьный код элемента.</li>
     * <li><b>{@code PROPERTY_VALUES}</b> - Ассоциативный список значений свойств элемента. Свойства хранилища создаются при помощи {@link #ENTITY_ITEM_PROPERTY_ADD}.</li>
     * <li><b>{@code ENTITY}</b> - Обязательный. Строковой идентификатор хранилища.</li>
     * <li><b>{@code DETAIL_PICTURE}</b> - Детальная картинка элемента.</li>
     * <li><b>{@code SORT}</b> - Сортировочный вес элемента.</li>
     * <li><b>{@code SECTION}</b> - Идентификатор раздела хранилища.</li>
     * <li><b>{@code DETAIL_TEXT}</b> - Детальный текст элемента.</li>
     * </ul>
     */
    ENTITY_ITEM_ADD("entity.item.add"),
    /**
     * Обновление элемента хранилища.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ACTIVE}</b> - Флаг активности элемента (Y|N).</li>
     * <li><b>{@code DATE_ACTIVE_TO}</b> - Дата окончания активности элемента.</li>
     * <li><b>{@code DATE_ACTIVE_FROM}</b> - Дата начала активности элемента.</li>
     * <li><b>{@code PREVIEW_TEXT}</b> - Анонс элемента.</li>
     * <li><b>{@code PREVIEW_PICTURE}</b> - Картинка анонса элемента.</li>
     * <li><b>{@code NAME}</b> - Наименование элемента.</li>
     * <li><b>{@code CODE}</b> - Символьный код элемента.</li>
     * <li><b>{@code PROPERTY_VALUES}</b> - Обязательный. ассоциативный список значений свойств элемента. Свойства хранилища создаются при помощи {@link #ENTITY_ITEM_PROPERTY_ADD}.</li>
     * <li><b>{@code ENTITY}</b> - Обязательный. Строковой идентификатор хранилища.</li>
     * <li><b>{@code DETAIL_PICTURE}</b> - Детальная картинка элемента.</li>
     * <li><b>{@code SORT}</b> - Сортировочный вес элемента.</li>
     * <li><b>{@code ID}</b> - Обязательный. Идентификатор элемента.</li>
     * <li><b>{@code SECTION}</b> - Идентификатор раздела хранилища.</li>
     * <li><b>{@code DETAIL_TEXT}</b> - Детальный текст элемента.</li>
     * </ul>
     */
    ENTITY_ITEM_UPDATE("entity.item.update"),
    /**
     * Удаление элемента хранилища.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ENTITY}</b> - Обязательный. Строковой идентификатор хранилища.</li>
     * <li><b>{@code ID}</b> - Обязательный. Идентификатор элемента.</li>
     * </ul>
     */
    ENTITY_ITEM_DELETE("entity.item.delete"),
    /**
     * Получение списка дополнительных свойств элементов хранилища.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ENTITY}</b> - Обязательный. Строковой идентификатор хранилища.</li>
     * <li><b>{@code PROPERTY}</b> - Строковой идентификатор требуемого свойства.</li>
     * </ul>
     */
    ENTITY_ITEM_PROPERTY_GET("entity.item.property.get"),
    /**
     * Добавление дополнительного свойства элементов хранилища.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ENTITY}</b> - Обязательный. Строковой идентификатор хранилища.</li>
     * <li><b>{@code PROPERTY}</b> - Обязательный. Строковой идентификатор свойства.</li>
     * <li><b>{@code TYPE}</b> - Обязательный. Тип свойства (S - строка, N - число, F - файл).</li>
     * <li><b>{@code NAME}</b> - Обязательный. Наименование свойства.</li>
     * </ul>
     */
    ENTITY_ITEM_PROPERTY_ADD("entity.item.property.add"),
    /**
     * Обновление дополнительного свойства элементов хранилища.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ENTITY}</b> - Обязательный. Строковой идентификатор хранилища.</li>
     * <li><b>{@code PROPERTY}</b> - Обязательный. Строковой идентификатор свойства.</li>
     * <li><b>{@code PROPERTY_NEW}</b> - Новый строковой идентификатор свойства.</li>
     * <li><b>{@code TYPE}</b> - Тип свойства (S - строка, N - число, F - файл).</li>
     * <li><b>{@code NAME}</b> - Наименование свойства.</li>
     * </ul>
     */
    ENTITY_ITEM_PROPERTY_UPDATE("entity.item.property.update"),
    /**
     * Удаление дополнительного свойства элементов хранилища.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ENTITY}</b> - Обязательный. Строковой идентификатор хранилища.</li>
     * <li><b>{@code PROPERTY}</b> - Обязательный. Строковой идентификатор свойства.</li>
     * </ul>
     */
    ENTITY_ITEM_PROPERTY_DELETE("entity.item.property.delete"),

// Работа с чатами: https://dev.1c-bitrix.ru/learning/course/index.php?COURSE_ID=93&CHAPTER_ID=07689

    /**
     * Создание чата.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code MESSAGE}</b> - Первое приветственное сообщение в чате. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code Добро пожаловать в чат}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code ENTITY_ID}</b> - Числовой идентификатор сущности, может быть использован для поиска чата и для легкого определения контекста в обработчиках событий ONIMBOTMESSAGEADD, ONIMBOTMESSAGEUPDATE, ONIMBOTMESSAGEDELETE. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code 13}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code DESCRIPTION}</b> - Описание чата. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code Очень важный чат}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code COLOR}</b> - Цвет чата для мобильного приложения: RED, GREEN, MINT, LIGHT_BLUE, DARK_BLUE, PURPLE, AQUA, PINK, LIME, BROWN, AZURE, KHAKI, SAND, MARENGO, GRAY, GRAPHITE. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code PINK}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code TITLE}</b> - Заголовок чата. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code Мой новый закрытый чат}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code USERS}</b> - Участники чата. <em>Обязательный: </em>Да. <em>Пример:</em> {@code Array(1,2)}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code AVATAR}</b> - Аватар чата в base64 формате. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code base64 image}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code TYPE}</b> - Тип чата OPEN | CHAT (OPEN - открытый для вступления чат, CHAT - обычный чат по приглашениям, по-умолчанию CHAT). <em>Обязательный: </em>Нет. <em>Пример:</em> {@code CHAT}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code ENTITY_TYPE}</b> - Идентификатор сущности, может быть использован для поиска по этому полю и для легкого определения контекста в обработчиках событий ONIMBOTMESSAGEADD, ONIMBOTMESSAGEUPDATE, ONIMBOTMESSAGEDELETE. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code CHAT}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code OWNER_ID}</b> - Идентификатор владельца чата. Можно не указывать, владельцем будет тот, от кого идёт запрос.. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code 39}. <em>С ревизии:</em> 18</li>
     * </ul>
     */
    IM_CHAT_ADD("im.chat.add"),
    /**
     * Получение списка участников.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code CHAT_ID}</b> - Идентификатор чата. <em>Обязательный: </em>Да. <em>Пример:</em> {@code 13}. <em>С ревизии:</em> 18</li>
     * </ul>
     */
    IM_CHAT_USER_LIST("im.chat.user.list"),
    /**
     * Приглашение участников.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code CHAT_ID}</b> - Идентификатор чата. <em>Обязательный: </em>Да. <em>Пример:</em> {@code 13}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code HIDE_HISTORY}</b> - Отображение истории переписки для пользователя, которого добавляют в чат этим методом. Y/N - по умолчанию N. Если передать Y то новый пользователь не будет видеть историю.. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code N}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code USERS}</b> - Идентификаторы новых пользователей. <em>Обязательный: </em>Да. <em>Пример:</em> {@code Array(3,4)}. <em>С ревизии:</em> 18</li>
     * </ul>
     */
    IM_CHAT_USER_ADD("im.chat.user.add"),
    /**
     * Исключение участников.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code CHAT_ID}</b> - Идентификатор чата. <em>Обязательный: </em>Да. <em>Пример:</em> {@code 13}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code USER_ID}</b> - Идентификатор исключаемого пользователя. <em>Обязательный: </em>Да. <em>Пример:</em> {@code 4}. <em>С ревизии:</em> 18</li>
     * </ul>
     */
    IM_CHAT_USER_DELETE("im.chat.user.delete"),
    /**
     * Покинуть чат.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code CHAT_ID}</b> - Идентификатор чата. <em>Обязательный: </em>Да. <em>Пример:</em> {@code 13}. <em>С ревизии:</em> 18</li>
     * </ul>
     */
    IM_CHAT_LEAVE("im.chat.leave"),
    /**
     * Обновление заголовка чата.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code CHAT_ID}</b> - Идентификатор чата. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code 13}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code TITLE}</b> - Новый заголовок. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code Новое имя для чата}. <em>С ревизии:</em> 18</li>
     * </ul>
     */
    IM_CHAT_UPDATETITLE("im.chat.updateTitle"),
    /**
     * Обновление цвета чата.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code COLOR}</b> - Цвет чата для мобильного приложения (RED, GREEN, MINT, LIGHT_BLUE, DARK_BLUE, PURPLE, AQUA, PINK, LIME, BROWN, AZURE, KHAKI, SAND, MARENGO, GRAY, GRAPHITE). <em>Обязательный: </em>Да. <em>Пример:</em> {@code MINT}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code CHAT_ID}</b> - Идентификатор чата. <em>Обязательный: </em>Да. <em>Пример:</em> {@code 13}. <em>С ревизии:</em> 18</li>
     * </ul>
     */
    IM_CHAT_UPDATECOLOR("im.chat.updateColor"),
    /**
     * Обновление аватара чата.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code CHAT_ID}</b> - Идентификатор чата. <em>Обязательный: </em>Да. <em>Пример:</em> {@code 13}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code AVATAR}</b> - Изображение в формате base64. <em>Обязательный: </em>Да. <em>Пример:</em> {@code *base64 image*}. <em>С ревизии:</em> 18</li>
     * </ul>
     */
    IM_CHAT_UPDATEAVATAR("im.chat.updateAvatar"),
    /**
     * Смена владельца чата.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code COLOR}</b> - Цвет чата для мобильного приложения (RED, GREEN, MINT, LIGHT_BLUE, DARK_BLUE, PURPLE, AQUA, PINK, LIME, BROWN, AZURE, KHAKI, SAND, MARENGO, GRAY, GRAPHITE). <em>Обязательный: </em>Да. <em>Пример:</em> {@code MINT}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code CHAT_ID}</b> - Идентификатор чата. <em>Обязательный: </em>Да. <em>Пример:</em> {@code 13}. <em>С ревизии:</em> 18</li>
     * </ul>
     */
    IM_CHAT_SETOWNER("im.chat.setOwner"),
    /**
     * Получение идентификатора чата.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ENTITY_ID}</b> - Числовой идентификатор сущности. Может быть использован для поиска чата и для легкого определения контекста в обработчиках событий ONIMBOTMESSAGEADD, ONIMBOTMESSAGEUPDATE, ONIMBOTMESSAGEDELETE. <em>Обязательный: </em>Да. <em>Пример:</em> {@code LEAD|13 - для CRM, facebook|2|1647215182041969|862 - для открытых линий ENTITY_ID совпадает с USER_CODE из сессии.}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code ENTITY_TYPE}</b> - Идентификатор сущности. Может быть использован для поиска чата и для легкого определения контекста в обработчиках событий ONIMBOTMESSAGEADD, ONIMBOTMESSAGEUPDATE, ONIMBOTMESSAGEDELETE. <em>Обязательный: </em>Да. <em>Пример:</em> {@code CRM - для CRM, LINES Со стороны оператора или LIVECHAT Со стороны пользователя - для открытых линий}. <em>С ревизии:</em> 18</li>
     * </ul>
     */
    IM_CHAT_GET("im.chat.get"),
    /**
     * Отключение уведомлений в чате.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code CHAT_ID}</b> - Идентификатор чата. <em>Обязательный: </em>Да. <em>Пример:</em> {@code 17}. <em>С ревизии:</em> 19</li>
     * <li><b>{@code MUTE}</b> - Отключить или включить уведомления - Y|N. <em>Обязательный: </em>Да. <em>Пример:</em> {@code Y}. <em>С ревизии:</em> 19</li>
     * </ul>
     */
    IM_CHAT_MUTE("im.chat.mute"),

// Работа с диалогами: https://dev.1c-bitrix.ru/learning/course/index.php?COURSE_ID=93&CHAPTER_ID=011477

    /**
     * Получение списка последних сообщений в чате.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code DIALOG_ID}</b> - Идентификатор диалога. Формат: chatXXX – чат получателя, если сообщение для чата или XXX – идентификатор получателя, если сообщение для приватного диалога. <em>Обязательный: </em>Да. <em>Пример:</em> {@code chat29 или 256}. <em>С ревизии:</em> 19</li>
     * <li><b>{@code FIRST_ID}</b> - Идентификатор первого загруженного сообщения. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code 454322}. <em>С ревизии:</em> 19</li>
     * <li><b>{@code LAST_ID}</b> - Идентификатор последнего загруженного сообщения. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code 28561624}. <em>С ревизии:</em> 19</li>
     * <li><b>{@code LIMIT}</b> - Ограничение на выборку сообщений в диалоге. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code 20}. <em>С ревизии:</em> 19</li>
     * </ul>
     */
    IM_DIALOG_MESSAGES_GET("im.dialog.messages.get"),
    /**
     * Изменение факта прочтения сообщений: все сообщения до указанного (включая само сообщение) помечаются как прочитанные.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code DIALOG_ID}</b> - Идентификатор диалога. Формат: chatXXX – чат получателя, если сообщение для чата или XXX – идентификатор получателя, если сообщение для приватного диалога. <em>Обязательный: </em>Да. <em>Пример:</em> {@code chat29 или 256}. <em>С ревизии:</em> 21</li>
     * <li><b>{@code MESSAGE_ID}</b> - Идентификатор последнего прочитанного сообщения в диалоге. <em>Обязательный: </em>Да. <em>Пример:</em> {@code 12}. <em>С ревизии:</em> 21</li>
     * </ul>
     */
    IM_DIALOG_READ("im.dialog.read"),
    /**
     * Изменение факта прочтения сообщений: все сообщения после указанного (включая само сообщение) помечаются как непрочитанные.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code DIALOG_ID}</b> - Идентификатор диалога. Формат: chatXXX – чат получателя, если сообщение для чата или XXX – идентификатор получателя, если сообщение для приватного диалога. <em>Обязательный: </em>Да. <em>Пример:</em> {@code chat29 или 256}. <em>С ревизии:</em> 21</li>
     * <li><b>{@code MESSAGE_ID}</b> - Идентификатор первого непрочитанного диалога. <em>Обязательный: </em>Да. <em>Пример:</em> {@code 12}. <em>С ревизии:</em> 21</li>
     * </ul>
     */
    IM_DIALOG_UNREAD("im.dialog.unread"),
    /**
     * Получение информации об участниках чата (поддерживается пагинация).<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code DIALOG_ID}</b> - Идентификатор диалога. Формат: chatXXX – чат получателя, если сообщение для чата или XXX – идентификатор получателя, если сообщение для приватного диалога. <em>Обязательный: </em>Да. <em>Пример:</em> {@code chat74}. <em>С ревизии:</em> 30</li>
     * <li><b>{@code SKIP_EXTERNAL_EXCEPT_TYPES}</b> - Строка с теми типами системных пользователей, которых нужно оставить в выборке. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code 'bot, email'}. <em>С ревизии:</em> 30</li>
     * </ul>
     */
    IM_DIALOG_USERS_LIST("im.dialog.users.list"),
    /**
     * Отправка статуса «вам пишут...».<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code DIALOG_ID}</b> - Идентификатор диалога. Формат: chatXXX – чат получателя, если сообщение для чата или XXX – идентификатор получателя, если сообщение для приватного диалога. <em>Обязательный: </em>Да. <em>Пример:</em> {@code 13}. <em>С ревизии:</em> 30</li>
     * </ul>
     */
    IM_DIALOG_WRITING("im.dialog.writing"),
    /**
     * Установка метки «прочитано» для всех диалогов.<br>
     */
    IM_DIALOG_READ_ALL("im.dialog.read.all"),

// Работа с сообщениями: https://dev.1c-bitrix.ru/learning/course/index.php?COURSE_ID=93&CHAPTER_ID=07691

    /**
     * Отправка сообщения в чат.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code SYSTEM}</b> - Отображать сообщения в виде системного сообщения или нет, необязательное поле, по умолчанию 'N'. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code N}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code DIALOG_ID}</b> - Идентификатор диалога. Формат: chatXXX – чат получателя, если сообщение для чата или XXX – идентификатор получателя, если сообщение для приватного диалога. <em>Обязательный: </em>Да. <em>Пример:</em> {@code chat13 или 256}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code MESSAGE}</b> - Текст сообщения. <em>Обязательный: </em>Да. <em>Пример:</em> {@code Текст сообщения}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code URL_PREVIEW}</b> - Преобразовывать ссылки в rich-ссылки, необязательное поле, по умолчанию 'Y'. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code Y}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code ATTACH}</b> - Вложение. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code }. <em>С ревизии:</em> 18</li>
     * <li><b>{@code KEYBOARD}</b> - Клавиатура. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code }. <em>С ревизии:</em> 18</li>
     * <li><b>{@code MENU}</b> - Контекстное меню. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code }. <em>С ревизии:</em> 18</li>
     * </ul>
     */
    IM_MESSAGE_ADD("im.message.add"),
    /**
     * Отправка изменения сообщения чат-бота.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code URL_PREVIEW}</b> - Преобразовывать ссылки в rich-ссылки. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code Y}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code ATTACH}</b> - Вложение. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code }. <em>С ревизии:</em> 18</li>
     * <li><b>{@code MESSAGE_ID}</b> - Идентификатор сообщения. <em>Обязательный: </em>Да. <em>Пример:</em> {@code 1}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code KEYBOARD}</b> - Клавиатура. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code }. <em>С ревизии:</em> 18</li>
     * <li><b>{@code MENU}</b> - Контекстное меню. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code }. <em>С ревизии:</em> 18</li>
     * </ul>
     */
    IM_MESSAGE_UPDATE("im.message.update"),
    /**
     * Удаление сообщения чат-бота.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code MESSAGE_ID}</b> - Идентификатор сообщения. <em>Обязательный: </em>Да. <em>Пример:</em> {@code 1}. <em>С ревизии:</em> 18</li>
     * </ul>
     */
    IM_MESSAGE_DELETE("im.message.delete"),
    /**
     * Установка «Мне нравится».<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code MESSAGE_ID}</b> - Идентификатор сообщения (любое сообщение, отправленное в личных диалогах или в групповых чатах, где присутствует чат-бот). <em>Обязательный: </em>Да. <em>Пример:</em> {@code 1}. <em>С ревизии:</em> 18</li>
     * </ul>
     */
    IM_MESSAGE_LIKE("im.message.like"),
    /**
     * Использование команды бота.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code MESSAGE_ID}</b> - Идентификатор сообщения с возможностью отдать команду боту. <em>Обязательный: </em>Да. <em>Пример:</em> {@code 278}. <em>С ревизии:</em> 30</li>
     * <li><b>{@code COMMAND}</b> - Команда, которую должен выполнить бот. <em>Обязательный: </em>Да. <em>Пример:</em> {@code 'KEYBOARD'}. <em>С ревизии:</em> 30</li>
     * </ul>
     */
    IM_MESSAGE_COMMAND("im.message.command"),
    /**
     * Создание новых сущностей по сообщению в чате: новый чат, задача, пост в Новостях, событие в календаре.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code MESSAGE_ID}</b> - Идентификатор сообщения, по которому будет создана новая сущность. <em>Обязательный: </em>Да. <em>Пример:</em> {@code 289}. <em>С ревизии:</em> 30</li>
     * <li><b>{@code TYPE}</b> - Тип создаваемой сущности: 'CHAT' – по сообщению будет создан новый чат 'TASK' – по сообщению будет создана задача 'POST' – по сообщению будет создан пост в Новостях 'CALEND' – по сообщению будет создано событие в календаре. <em>Обязательный: </em>Да. <em>Пример:</em> {@code 'TASK'}. <em>С ревизии:</em> 30</li>
     * </ul>
     */
    IM_MESSAGE_SHARE("im.message.share"),

// Работа с файлами: https://dev.1c-bitrix.ru/learning/course/index.php?COURSE_ID=93&CHAPTER_ID=011481

    /**
     * Получение информации о папке хранения файлов для чата.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code CHAT_ID}</b> - Идентификатор чата. <em>Обязательный: </em>Да. <em>Пример:</em> {@code 17}. <em>С ревизии:</em> 18</li>
     * </ul>
     */
    IM_DISK_FOLDER_GET("im.disk.folder.get"),
    /**
     * Публикация загруженного файла в чат.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code MESSAGE}</b> - Описание файла будет опубликовано в чате. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code Важный документ}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code DISK_ID}</b> - Идентификатор файла, доступного из локального диска. <em>Обязательный: </em>Да*. <em>Пример:</em> {@code 112}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code CHAT_ID}</b> - Идентификатор чата. <em>Обязательный: </em>Да. <em>Пример:</em> {@code 17}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code SILENT_MODE}</b> - Параметр для чата Открытых линий, обозначает, будет ли отправлена информация о файле клиенту или нет. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code N}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code UPLOAD_ID}</b> - Идентификатор загруженного файла через методы модуля DISK. <em>Обязательный: </em>Да*. <em>Пример:</em> {@code 213}. <em>С ревизии:</em> 18</li>
     * </ul>
     */
    IM_DISK_FILE_COMMIT("im.disk.file.commit"),
    /**
     * Удаление файлов внутри папки чата.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code DISK_ID}</b> - Идентификатор файла. <em>Обязательный: </em>Да. <em>Пример:</em> {@code 112}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code CHAT_ID}</b> - Идентификатор чата. <em>Обязательный: </em>Да. <em>Пример:</em> {@code 17}. <em>С ревизии:</em> 18</li>
     * </ul>
     */
    IM_DISK_FILE_DELETE("im.disk.file.delete"),
    /**
     * Сохранение файла в свой Битрикс24.Диск.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code DISK_ID}</b> - Идентификатор файла. <em>Обязательный: </em>Да. <em>Пример:</em> {@code 112}. <em>С ревизии:</em> 21</li>
     * </ul>
     */
    IM_DISK_FILE_SAVE("im.disk.file.save"),

// Работа с пользователями: https://dev.1c-bitrix.ru/learning/course/index.php?COURSE_ID=93&CHAPTER_ID=011489

    /**
     * Получение данных о пользователе.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ID}</b> - Идентификатор пользователя. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code 5}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code AVATAR_HR}</b> - Генерировать аватар в высоком разрешении. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code N}. <em>С ревизии:</em> 18</li>
     * </ul>
     */
    IM_USER_GET("im.user.get"),
    /**
     * Получение данных о пользователях.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ID}</b> - Идентификаторы пользователей. <em>Обязательный: </em>Да. <em>Пример:</em> {@code [4,5]}. <em>С ревизии:</em> 19</li>
     * <li><b>{@code AVATAR_HR}</b> - Генерировать аватар в высоком разрешении. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code N}. <em>С ревизии:</em> 19</li>
     * </ul>
     */
    IM_USER_LIST_GET("im.user.list.get"),
    /**
     * Получение информации об установленном статусе пользователя.<br>
     */
    IM_USER_STATUS_GET("im.user.status.get"),
    /**
     * Установка статуса пользователя.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code STATUS}</b> - Новый статус пользователя. <em>Обязательный: </em>Да. <em>Пример:</em> {@code online}. <em>С ревизии:</em> 18</li>
     * </ul>
     */
    IM_USER_STATUS_SET("im.user.status.set"),
    /**
     * Установка автоматического статуса «Отошел».<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code AGO}</b> - Сколько минут назад отошел. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code 10}. <em>С ревизии:</em> 18</li>
     * </ul>
     */
    IM_USER_STATUS_IDLE_START("im.user.status.idle.start"),
    /**
     * Отключение автоматического статуса «Отошел».<br>
     */
    IM_USER_STATUS_IDLE_END("im.user.status.idle.end"),

// Работа с подразделениями: https://dev.1c-bitrix.ru/learning/course/index.php?COURSE_ID=93&CHAPTER_ID=011505

    /**
     * Получение данных о подразделении.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ID}</b> - Идентификаторы подразделений. <em>Обязательный: </em>Да. <em>Пример:</em> {@code [51]}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code USER_DATA}</b> - Подгружать данные о пользователях. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code N}. <em>С ревизии:</em> 18</li>
     * </ul>
     */
    IM_DEPARTMENT_GET("im.department.get"),
    /**
     * Получение списка пользователей, состоящих в вашем отделе.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code OFFSET}</b> - Смещение выборки пользователей. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code 0}. <em>С ревизии:</em> 19</li>
     * <li><b>{@code LIMIT}</b> - Лимит выборки пользователей. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code 10}. <em>С ревизии:</em> 19</li>
     * <li><b>{@code USER_DATA}</b> - Подгружать данные о пользователях. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code N}. <em>С ревизии:</em> 19</li>
     * </ul>
     */
    IM_DEPARTMENT_COLLEAGUES_LIST("im.department.colleagues.list"),
    /**
     * Получение списка руководителей подразделений.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ID}</b> - Идентификаторы подразделений. <em>Обязательный: </em>Да. <em>Пример:</em> {@code [105]}. <em>С ревизии:</em> 19</li>
     * <li><b>{@code USER_DATA}</b> - Подгружать данные о пользователях. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code N}. <em>С ревизии:</em> 19</li>
     * </ul>
     */
    IM_DEPARTMENT_MANAGERS_GET("im.department.managers.get"),
    /**
     * Получение списка сотрудников в подразделении.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ID}</b> - Идентификаторы подразделений. <em>Обязательный: </em>Да. <em>Пример:</em> {@code [105]}. <em>С ревизии:</em> 19</li>
     * <li><b>{@code USER_DATA}</b> - Подгружать данные о пользователях. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code N}. <em>С ревизии:</em> 19</li>
     * </ul>
     */
    IM_DEPARTMENT_EMPLOYEES_GET("im.department.employees.get"),

// Работа с поиском: https://dev.1c-bitrix.ru/learning/course/index.php?COURSE_ID=93&CHAPTER_ID=011515

    /**
     * Поиск пользователей.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code FIND}</b> - Поисковая фраза. <em>Обязательный: </em>Да. <em>Пример:</em> {@code Евгений}. <em>С ревизии:</em> 19</li>
     * <li><b>{@code OFFSET}</b> - Смещение выборки пользователей. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code 0}. <em>С ревизии:</em> 19</li>
     * <li><b>{@code BUSINESS}</b> - Поиск среди бизнес пользователей. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code N}. <em>С ревизии:</em> 19</li>
     * <li><b>{@code LIMIT}</b> - Лимит выборки пользователей. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code 10}. <em>С ревизии:</em> 19</li>
     * <li><b>{@code AVATAR_HR}</b> - Генировать аватар в высоком разрешении. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code N}. <em>С ревизии:</em> 19</li>
     * </ul>
     */
    IM_SEARCH_USER_LIST("im.search.user.list"),
    /**
     * Поиск чатов.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code FIND}</b> - Поисковая фраза. <em>Обязательный: </em>Да. <em>Пример:</em> {@code Мятный}. <em>С ревизии:</em> 19</li>
     * <li><b>{@code OFFSET}</b> - Смещение выборки пользователей. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code 0}. <em>С ревизии:</em> 19</li>
     * <li><b>{@code LIMIT}</b> - Лимит выборки пользователей. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code 10}. <em>С ревизии:</em> 19</li>
     * </ul>
     */
    IM_SEARCH_CHAT_LIST("im.search.chat.list"),
    /**
     * Поиск подразделений.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code FIND}</b> - Поисковая фраза. <em>Обязательный: </em>Да. <em>Пример:</em> {@code Московский}. <em>С ревизии:</em> 19</li>
     * <li><b>{@code OFFSET}</b> - Смещение выборки пользователей. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code 0}. <em>С ревизии:</em> 19</li>
     * <li><b>{@code LIMIT}</b> - Лимит выборки пользователей. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code 10}. <em>С ревизии:</em> 19</li>
     * <li><b>{@code USER_DATA}</b> - Подгружать данные о пользователях. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code N}. <em>С ревизии:</em> 19</li>
     * </ul>
     */
    IM_SEARCH_DEPARTMENT_LIST("im.search.department.list"),
    /**
     * Получение списка элементов последнего поиска.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code SKIP_DIALOG}</b> - Пропускать диалоги один-на-один. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code N}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code SKIP_OPENLINES}</b> - Пропускать чаты открытых линий. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code N}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code SKIP_CHAT}</b> - Пропускать чаты. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code N}. <em>С ревизии:</em> 18</li>
     * </ul>
     */
    IM_SEARCH_LAST_GET("im.search.last.get"),
    /**
     * Добавление элемента истории последнего поиска.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code DIALOG_ID}</b> - Идентификатор диалога. Формат: chatXXX – чат получателя, если сообщение для чата или XXX – идентификатор получателя, если сообщение для приватного диалога. <em>Обязательный: </em>Да. <em>Пример:</em> {@code chat17 или 256}. <em>С ревизии:</em> 18</li>
     * </ul>
     */
    IM_SEARCH_LAST_ADD("im.search.last.add"),
    /**
     * Удаление элемента истории последнего поиска.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code DIALOG_ID}</b> - Идентификатор диалога. Формат: chatXXX – чат получателя, если сообщение для чата или XXX – идентификатор получателя, если сообщение для приватного диалога. <em>Обязательный: </em>Да. <em>Пример:</em> {@code chat17 или 256}. <em>С ревизии:</em> 18</li>
     * </ul>
     */
    IM_SEARCH_LAST_DELETE("im.search.last.delete"),

// Работа со списком последних чатов: https://dev.1c-bitrix.ru/learning/course/index.php?COURSE_ID=93&CHAPTER_ID=011531

    /**
     * Список последних диалогов пользователя.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code SKIP_DIALOG}</b> - Пропускать диалоги один-на-один. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code N}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code ONLY_OPENLINES}</b> - Выборка только чатов открытых линий. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code N}. <em>С ревизии:</em> 29</li>
     * <li><b>{@code LAST_UPDATE}</b> - Ограничение выборки для минимизации переданных данных, дата в формате ATOM. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code 2019-07-11T10:45:31+02:00}. <em>С ревизии:</em> 23</li>
     * <li><b>{@code SKIP_OPENLINES}</b> - Пропускать чаты открытых линий. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code N}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code SKIP_CHAT}</b> - Пропускать чаты. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code N}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code LAST_SYNC_DATE}</b> - Дата предыдущей выборки для загрузки изменений, произошедших в списке с этого времени. Выборка возвращает данные не старше 7 дней. Дата в формате ATOM. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code 2019-07-11T10:45:31+02:00}. <em>С ревизии:</em> 29</li>
     * </ul>
     */
    IM_RECENT_GET("im.recent.get"),
    /**
     * Закрепление диалога в избранном.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code DIALOG_ID}</b> - Идентификатор диалога. Формат: chatXXX – чат получателя, если сообщение для чата или XXX – идентификатор получателя, если сообщение для приватного диалога. <em>Обязательный: </em>Да. <em>Пример:</em> {@code chat17 или 256}. <em>С ревизии:</em> 19</li>
     * <li><b>{@code PIN}</b> - Закрепить или открепить диалог. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code Y}. <em>С ревизии:</em> 19</li>
     * </ul>
     */
    IM_RECENT_PIN("im.recent.pin"),
    /**
     * Удаление диалога из списка последних чатов.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code DIALOG_ID}</b> - Идентификатор диалога. Формат: chatXXX – чат получателя, если сообщение для чата или XXX – идентификатор получателя, если сообщение для приватного диалога. <em>Обязательный: </em>Да. <em>Пример:</em> {@code chat17 или 256}. <em>С ревизии:</em> 18</li>
     * </ul>
     */
    IM_RECENT_HIDE("im.recent.hide"),
    /**
     * Установка метки «не прочитан» на чат или диалог.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code DIALOG_ID}</b> - Идентификатор диалога. Формат: chatXXX – чат получателя, если сообщение для чата или XXX – идентификатор получателя, если сообщение для приватного диалога. <em>Обязательный: </em>Да. <em>Пример:</em> {@code 'chat74'}. <em>С ревизии:</em> 30</li>
     * </ul>
     */
    IM_RECENT_UNREAD("im.recent.unread"),
    /**
     * Получение списка последних диалогов пользователя (с поддержкой пагинации).<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code SKIP_OPENLINES}</b> - Пропускать чаты открытых линий. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code 'Y'}. <em>С ревизии:</em> 30</li>
     * <li><b>{@code SKIP_CHAT}</b> - Пропускать чаты. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code 'Y'}. <em>С ревизии:</em> 30</li>
     * </ul>
     */
    IM_RECENT_LIST("im.recent.list"),

// Работа со счетчиками: https://dev.1c-bitrix.ru/learning/course/index.php?COURSE_ID=93&CHAPTER_ID=011539

    /**
     * Получение счетчиков.<br>
     */
    IM_COUNTERS_GET("im.counters.get"),

// Работа с уведомлениями: https://dev.1c-bitrix.ru/learning/course/index.php?COURSE_ID=93&CHAPTER_ID=07693

    /**
     * Отправка персонального уведомления.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code SUB_TAG}</b> - Дополнительный тег, без проверки на уникальность. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code SUB|TEST}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code USER_ID}</b> - Идентификатор пользователя, кому будет адресовано уведомление. <em>Обязательный: </em>Да. <em>Пример:</em> {@code 1}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code MESSAGE_OUT}</b> - Текст уведомления для почты. Если не задано, то используется поле MESSAGE. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code Текст персонального уведомления для почты}. <em>С ревизии:</em> 18</li>
     * </ul>
     */
    IM_NOTIFY_PERSONAL_ADD("im.notify.personal.add"),
    /**
     * Отправка персонального уведомления.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code SUB_TAG}</b> - Дополнительный тег, без проверки на уникальность. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code SUB|TEST}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code USER_ID}</b> - Идентификатор пользователя, кому будет адресовано уведомление. <em>Обязательный: </em>Да. <em>Пример:</em> {@code 1}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code MESSAGE_OUT}</b> - Текст уведомления для почты. Если не задано, то используется поле MESSAGE. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code Текст системного уведомления для почты}. <em>С ревизии:</em> 18</li>
     * </ul>
     */
    IM_NOTIFY_SYSTEM_ADD("im.notify.system.add"),
    /**
     * Удаление уведомления.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code SUB_TAG}</b> - Дополнительный тег, без проверки на уникальность. <em>Обязательный: </em>Да*. <em>Пример:</em> {@code SUB|TEST}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code ID}</b> - Идентификатор уведомления. <em>Обязательный: </em>Да*. <em>Пример:</em> {@code 123}. <em>С ревизии:</em> 18</li>
     * </ul>
     */
    IM_NOTIFY_DELETE("im.notify.delete"),
    /**
     * Установка отмены о прочитанных уведомлениях.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ONLY_CURRENT}</b> - Прочитать только указанное уведомление. <em>Обязательный: </em>Нет. <em>Пример:</em> {@code N}. <em>С ревизии:</em> 18</li>
     * <li><b>{@code ID}</b> - Идентификатор уведомления. <em>Обязательный: </em>Да. <em>Пример:</em> {@code 17}. <em>С ревизии:</em> 18</li>
     * </ul>
     */
    IM_NOTIFY_READ("im.notify.read"),
    /**
     * «Прочтение» списка уведомлений, исключая уведомления типа CONFIRM.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code IDS}</b> - Массив идентификаторов уведомлений. <em>Обязательный: </em>Да. <em>Пример:</em> {@code [1,2,3]}. <em>С ревизии:</em> 30</li>
     * </ul>
     */
    IM_NOTIFY_READ_LIST("im.notify.read.list"),
    /**
     * Ответ на уведомление, поддерживающее быстрый ответ.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ID}</b> - Идентификатор уведомления, поддерживающего быстрый ответ. <em>Обязательный: </em>Да. <em>Пример:</em> {@code 270}. <em>С ревизии:</em> 30</li>
     * </ul>
     */
    IM_NOTIFY_ANSWER("im.notify.answer"),
    /**
     * Взаимодействие с кнопками нотификаций.<br>
     * Параметры:<br>
     * <ul>
     * <li><b>{@code ID}</b> - Идентификатор уведомления, поддерживающего выбор ответа посредством нажатия на кнопки. <em>Обязательный: </em>Да. <em>Пример:</em> {@code 288}. <em>С ревизии:</em> 30</li>
     * </ul>
     */
    IM_NOTIFY_CONFIRM("im.notify.confirm"),

    ;
    private final String name;

    Method(String name) {
        this.name = name;
    }

    /**
     * Для вставки в url вебхука, чтобы ответ пришёл в json
     *
     * @return Имя метода + ".json"
     */
    public String jsonName() {
        return name + ".json";
    }
    public String getName() {
        return name;
    }
}
